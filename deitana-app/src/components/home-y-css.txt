"use client"
import { useState, useRef, useEffect } from "react"
import { Send, ChevronDown, Search, Trash2 } from "lucide-react"
import ReactMarkdown from "react-markdown"
import { useAuth } from "../context/AuthContext"
import { auth } from "../components/Authenticator/firebase"
import { useSearchParams } from "react-router-dom"

const API_URL =
  process.env.NODE_ENV === "development"
    ? "http://localhost:3001"
    : "https://semilleros-deitana-project-v1-production.up.railway.app"

const Home = () => {
  const [searchParams, setSearchParams] = useSearchParams()
  const [sidebarOpen, setSidebarOpen] = useState(true)
  const [message, setMessage] = useState("")
  const [chatMessages, setChatMessages] = useState([])
  const [isTyping, setIsTyping] = useState(false)
  const [showScrollButton, setShowScrollButton] = useState(false)
  const [currentConversationId, setCurrentConversationId] = useState(null)
  const messagesEndRef = useRef(null)
  const chatContainerRef = useRef(null)
  const mainContentRef = useRef(null)
  const [isMobile, setIsMobile] = useState(false)
  const [mobileSidebarOpen, setMobileSidebarOpen] = useState(false)

  // Agregar después de los otros estados
  const [activeSection, setActiveSection] = useState("historial")
  const [historialExpanded, setHistorialExpanded] = useState(false)

  // Eliminar la línea donde se declara historialExpanded:
  // const [historialExpanded, setHistorialExpanded] = useState(false)

  // Agregar un nuevo estado para controlar el menú del usuario:
  const [userMenuOpen, setUserMenuOpen] = useState(false)
  const [modalView, setModalView] = useState("account") // 'main', 'admin', 'appearance', etc.

  // Estado para el modal de búsqueda
  const [searchModalOpen, setSearchModalOpen] = useState(false)
  const [searchQuery, setSearchQuery] = useState("")
  const [debouncedSearchQuery, setDebouncedSearchQuery] = useState("")

  // Obtener la función de logout del contexto de autenticación
  const { logout } = useAuth()

  // Datos de ejemplo para el historial de chats
  const [chatHistory, setChatHistory] = useState([])

  // Agregar estado para forzar la actualización de las fechas
  const [timeUpdate, setTimeUpdate] = useState(0)

  // Cargar el historial de chats al montar el componente
  useEffect(() => {
    const loadChatHistory = async () => {
      try {
        const token = await auth.currentUser?.getIdToken()
        if (!token) return

        const response = await fetch(`${API_URL}/conversations`, {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        })

        if (!response.ok) {
          throw new Error(`Error al cargar el historial: ${response.status}`)
        }

        const data = await response.json()
        if (data.success) {
          setChatHistory(data.data)
        } else {
          throw new Error(data.error || "Error al cargar el historial de chats")
        }
      } catch (error) {
        console.error("Error al cargar el historial de chats:", error)
      }
    }

    loadChatHistory()
  }, [])

  // Detectar si estamos en móvil
  useEffect(() => {
    const checkMobile = () => {
      setIsMobile(window.innerWidth <= 768)
      if (window.innerWidth > 768) {
        setMobileSidebarOpen(false)
      }
    }

    checkMobile()
    window.addEventListener("resize", checkMobile)
    return () => window.removeEventListener("resize", checkMobile)
  }, [])

  const toggleSidebar = () => {
    if (isMobile) {
      setMobileSidebarOpen(!mobileSidebarOpen)
    } else {
      setSidebarOpen(!sidebarOpen)
    }
  }

  const handleLogout = async () => {
    try {
      await logout()
      console.log("Sesión cerrada exitosamente")
    } catch (error) {
      console.error("Error al cerrar sesión:", error)
    }
  }

  // Cargar la conversación desde la URL al montar el componente
  useEffect(() => {
    const conversationId = searchParams.get("chat")
    if (conversationId && !conversationId.startsWith("temp_")) {
      setCurrentConversationId(conversationId)
    }
  }, [searchParams])

  const handleConversationClick = (conversationId) => {
    console.log("Conversación seleccionada:", conversationId)
    setCurrentConversationId(conversationId)
    // Actualizar la URL sin recargar la página
    setSearchParams({ chat: conversationId })
    if (isMobile) {
      setMobileSidebarOpen(false)
    }
  }

  const handleNewChat = async () => {
    try {
      const token = await auth.currentUser?.getIdToken()
      if (!token) return

      // Crear nueva conversación
      const response = await fetch(`${API_URL}/chat/new`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({ message: "NUEVA_CONEXION" }),
      })

      if (!response.ok) {
        throw new Error("Error al crear nueva conversación")
      }

      const data = await response.json()
      if (data.success) {
        setCurrentConversationId(data.data.conversationId)
        setChatMessages([])
        // Limpiar la URL
        setSearchParams({})

        // Recargar el historial de chats
        const historyResponse = await fetch(`${API_URL}/conversations`, {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        })

        if (!historyResponse.ok) {
          throw new Error("Error al cargar el historial")
        }

        const historyData = await historyResponse.json()
        if (historyData.success) {
          setChatHistory(historyData.data)
        }
      }
    } catch (error) {
      console.error("Error al crear nuevo chat:", error)
      setChatMessages((prev) => [
        ...prev,
        {
          id: Date.now(),
          text: "Hubo un error al crear el chat. Por favor, intenta de nuevo.",
          sender: "bot",
          isError: true,
        },
      ])
    }
  }

  const loadConversationMessages = async (conversationId) => {
    try {
      const token = await auth.currentUser?.getIdToken()
      if (!token) return

      const response = await fetch(`${API_URL}/conversations/${conversationId}/messages`, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      })

      if (!response.ok) {
        throw new Error(`Error al cargar los mensajes: ${response.status}`)
      }

      const data = await response.json()
      if (data.success) {
        // Convertir los mensajes al formato que espera el componente
        const formattedMessages = data.data.map((msg) => ({
          id: Date.now() + Math.random(),
          text: msg.content,
          sender: msg.role === "user" ? "user" : "bot",
        }))
        setChatMessages(formattedMessages)
      } else {
        throw new Error(data.error || "Error al cargar los mensajes")
      }
    } catch (error) {
      console.error("Error al cargar los mensajes:", error)
      setChatMessages((prev) => [
        ...prev,
        {
          id: Date.now(),
          text: "Hubo un error al cargar los mensajes. Por favor, intenta de nuevo.",
          sender: "bot",
          isError: true,
        },
      ])
    }
  }

  // Modificar el useEffect para cargar los mensajes cuando cambia la conversación
  useEffect(() => {
    if (currentConversationId && !currentConversationId.startsWith("temp_")) {
      loadConversationMessages(currentConversationId)
    }
  }, [currentConversationId])

  // Modificar la función handleSubmit para usar la conversación actual
  const handleSubmit = async (e) => {
    e.preventDefault()
    if (!message.trim()) return

    console.log("=== INICIO ENVÍO DE MENSAJE ===")
    console.log("Mensaje a enviar:", message)
    console.log("Conversation ID actual:", currentConversationId)

    const userMessage = {
      id: Date.now(),
      text: message,
      sender: "user",
    }

    setChatMessages((prev) => [...prev, userMessage])
    setMessage("")
    setIsTyping(true)

    // Crear mensaje del bot con estado de carga
    const botMessage = {
      id: Date.now() + 1,
      text: "",
      sender: "bot",
      isStreaming: true,
    }

    setChatMessages((prev) => {
      console.log("Creando nuevo mensaje del bot:", botMessage)
      return [...prev, botMessage]
    })

    try {
      const token = await auth.currentUser?.getIdToken()
      if (!token) {
        throw new Error("No hay usuario autenticado")
      }

      console.log("Token obtenido, realizando petición al servidor...")

      // Si no hay conversación actual o es temporal, crear una nueva
      if (!currentConversationId || currentConversationId.startsWith("temp_")) {
        console.log("Creando nueva conversación...")
        const response = await fetch(`${API_URL}/chat`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${token}`,
          },
          body: JSON.stringify({ message }),
        })

        if (!response.ok) {
          throw new Error("Error al procesar el mensaje")
        }

        const data = await response.json()
        if (!data.success) {
          throw new Error(data.error || "Error al procesar el mensaje")
        }

        setCurrentConversationId(data.data.conversationId)

        // Actualizar el mensaje del bot con la respuesta
        setChatMessages((prev) =>
          prev.map((msg) =>
            msg.id === botMessage.id
              ? {
                  ...msg,
                  text: data.data.message,
                  isStreaming: false,
                }
              : msg,
          ),
        )

        // Recargar el historial de chats
        const historyResponse = await fetch(`${API_URL}/conversations`, {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        })

        if (!historyResponse.ok) {
          throw new Error("Error al cargar el historial")
        }

        const historyData = await historyResponse.json()
        if (historyData.success) {
          setChatHistory(historyData.data)
        }
      } else {
        // Si ya existe una conversación, enviar el mensaje
        const response = await fetch(`${API_URL}/chat`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${token}`,
            "Conversation-Id": currentConversationId,
          },
          body: JSON.stringify({
            message,
            conversationId: currentConversationId,
          }),
        })

        if (!response.ok) {
          throw new Error("Error al procesar el mensaje")
        }

        const data = await response.json()
        if (!data.success) {
          throw new Error(data.error || "Error al procesar el mensaje")
        }

        // Actualizar el mensaje del bot con la respuesta
        setChatMessages((prev) =>
          prev.map((msg) =>
            msg.id === botMessage.id
              ? {
                  ...msg,
                  text: data.data.message,
                  isStreaming: false,
                }
              : msg,
          ),
        )
      }
    } catch (error) {
      console.error("Error al enviar mensaje:", error)
      // Actualizar el mensaje del bot con el error
      setChatMessages((prev) =>
        prev.map((msg) =>
          msg.id === botMessage.id
            ? {
                ...msg,
                text: "Hubo un error al conectarse con el servidor.",
                isStreaming: false,
                isError: true,
              }
            : msg,
        ),
      )
    } finally {
      setIsTyping(false)
      console.log("=== FIN ENVÍO DE MENSAJE ===")
    }
  }

  useEffect(() => {
    if (messagesEndRef.current) {
      messagesEndRef.current.scrollIntoView({ behavior: "smooth" })
    }
  }, [chatMessages, isTyping])

  useEffect(() => {
    const chatContainer = chatContainerRef.current
    if (!chatContainer) return

    const handleScroll = () => {
      const isScrolledUp = chatContainer.scrollTop < chatContainer.scrollHeight - chatContainer.clientHeight - 20
      setShowScrollButton(isScrolledUp && chatMessages.length > 0)
    }

    chatContainer.addEventListener("scroll", handleScroll)
    setTimeout(() => handleScroll(), 500)

    return () => chatContainer.removeEventListener("scroll", handleScroll)
  }, [chatMessages])

  const scrollToBottom = () => {
    if (messagesEndRef.current) {
      messagesEndRef.current.scrollIntoView({ behavior: "smooth" })
    }
  }

  const getScrollButtonStyle = () => {
    if (!mainContentRef.current) return {}
    const mainContentRect = mainContentRef.current.getBoundingClientRect()
    const centerX = mainContentRect.left + mainContentRect.width / 2
    return {
      left: `${centerX}px`,
      transform: "translateX(-50%)",
    }
  }

  const isChatEmpty = chatMessages.length === 0 && !isTyping

  // Añadir estilos CSS para el indicador de escritura en línea
  useEffect(() => {
    const style = document.createElement("style")
    style.innerHTML = `
    .ds-typing-indicator-inline {
      display: inline-flex;
      align-items: center;
      margin-left: 5px;
    }
    
    .ds-typing-indicator-inline span {
      height: 6px;
      width: 6px;
      background-color: #333;
      border-radius: 50%;
      display: inline-block;
      margin: 0 2px;
      opacity: 0.6;
      animation: ds-typing 1s infinite;
    }
    
    .ds-typing-indicator-inline span:nth-child(1) {
      animation-delay: 0s;
    }
    
    .ds-typing-indicator-inline span:nth-child(2) {
      animation-delay: 0.2s;
    }
    
    .ds-typing-indicator-inline span:nth-child(3) {
      animation-delay: 0.4s;
    }
    
    @keyframes ds-typing {
      0% {
        transform: translateY(0px);
      }
      50% {
        transform: translateY(-5px);
      }
      100% {
        transform: translateY(0px);
      }
    }

    .ds-message-content p {
      margin: 0;
      line-height: 1.6;
      color: #333;
      font-size: 15px;
      margin-bottom: 12px;
    }

    .ds-message-content strong {
      font-weight: 600;
      font-size: 15px;
      color: #333;
      display: inline;
      margin-right: 4px;
    }

    .ds-message-content em {
      font-style: italic;
      color: #333;
      font-size: 15px;
    }

    .ds-message-content ul, .ds-message-content ol {
      margin: 8px 0;
      padding-left: 20px;
      color: #333;
      font-size: 15px;
    }

    .ds-message-content li {
      margin: 5px 0;
      color: #333;
      font-size: 15px;
    }

    .ds-message-content a {
      color: #2964aa;
      text-decoration: none;
      font-weight: 500;
      border-bottom: 1px solid #2964aa;
      padding-bottom: 1px;
      transition: all 0.2s ease;
    }

    .ds-message-content a:hover {
      color: #1a4b8c;
      border-bottom-color: #1a4b8c;
    }
  `
    document.head.appendChild(style)

    return () => {
      document.head.removeChild(style)
    }
  }, [])

  const formatTimeAgo = (dateString) => {
    const date = new Date(dateString)
    const now = new Date()
    const diffInSeconds = Math.floor((now - date) / 1000)
    const diffInMinutes = Math.floor(diffInSeconds / 60)
    const diffInHours = Math.floor(diffInMinutes / 60)
    const diffInDays = Math.floor(diffInHours / 24)
    const diffInWeeks = Math.floor(diffInDays / 7)
    const diffInMonths = Math.floor(diffInDays / 30)

    if (diffInMonths > 0) {
      return `Hace ${diffInMonths} ${diffInMonths === 1 ? "mes" : "meses"}`
    } else if (diffInWeeks > 0) {
      return `Hace ${diffInWeeks} ${diffInWeeks === 1 ? "semana" : "semanas"}`
    } else if (diffInDays > 0) {
      return `Hace ${diffInDays} ${diffInDays === 1 ? "día" : "días"}`
    } else if (diffInHours > 0) {
      return `Hace ${diffInHours} ${diffInHours === 1 ? "hora" : "horas"}`
    } else if (diffInMinutes > 0) {
      return `Hace ${diffInMinutes} ${diffInMinutes === 1 ? "minuto" : "minutos"}`
    } else {
      return "Hace un momento"
    }
  }

  // Función para filtrar chats por término de búsqueda
  const filterChatsBySearch = (chats, query) => {
    if (!query.trim()) return chats
    
    const searchTerm = query.toLowerCase().trim()
    
    return chats.filter(chat => {
      const title = chat.title === "NUEVA_CONEXION" ? "Nueva conversación" : chat.title
      const titleLower = title.toLowerCase()
      
      // Búsqueda simple: si el título contiene el término de búsqueda
      return titleLower.includes(searchTerm)
    })
  }

  // En la función formatTimeAgo, agregar una nueva función para agrupar por fechas
  const groupChatsByDate = (chats) => {
    const groups = {}
    const now = new Date()
    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate())

    chats.forEach((chat) => {
      const chatDate = new Date(chat.updatedAt || chat.created_at)
      const chatDateOnly = new Date(chatDate.getFullYear(), chatDate.getMonth(), chatDate.getDate())
      const diffInDays = Math.floor((today - chatDateOnly) / (1000 * 60 * 60 * 24))

      let groupKey
      if (diffInDays === 0) {
        groupKey = "Hoy"
      } else if (diffInDays === 1) {
        groupKey = "Ayer"
      } else if (diffInDays <= 7) {
        groupKey = "Hace una semana"
      } else if (diffInDays <= 30) {
        groupKey = "Hace un mes"
      } else {
        // Para fechas más antiguas, mostrar la fecha absoluta
        const options = { day: 'numeric', month: 'long' }
        groupKey = chatDate.toLocaleDateString('es-ES', options)
      }

      if (!groups[groupKey]) {
        groups[groupKey] = []
      }
      groups[groupKey].push(chat)
    })

    return groups
  }

  // Actualizar las fechas cada minuto
  useEffect(() => {
    const interval = setInterval(() => {
      setTimeUpdate((prev) => prev + 1)
    }, 60000) // 60000 ms = 1 minuto

    return () => clearInterval(interval)
  }, [])

  // Debounce para la búsqueda
  useEffect(() => {
    const timer = setTimeout(() => {
      setDebouncedSearchQuery(searchQuery)
    }, 150) // 150ms de delay

    return () => clearTimeout(timer)
  }, [searchQuery])

  const handleDeleteChat = async (conversationId, e) => {
    e.stopPropagation()
    try {
      const token = await auth.currentUser?.getIdToken()
      if (!token) return

      const response = await fetch(`${API_URL}/conversations/${conversationId}`, {
        method: "DELETE",
        headers: {
          Authorization: `Bearer ${token}`,
        },
      })

      if (!response.ok) {
        throw new Error("Error al eliminar la conversación")
      }

      // Actualiza el historial localmente
      setChatHistory((prev) => prev.filter((chat) => chat.id !== conversationId))

      // Si el chat eliminado es el actual, limpia la vista
      if (currentConversationId === conversationId) {
        setCurrentConversationId(null)
        setChatMessages([])
        setSearchParams({})
      }
    } catch (error) {
      console.error("Error al eliminar la conversación:", error)
      // Puedes mostrar un mensaje de error al usuario si lo deseas
    }
  }

  return (
    <div className="ds-home-container">
      {/* Sidebar */}
      {isMobile && mobileSidebarOpen && (
        <div className="ds-mobile-overlay" onClick={() => setMobileSidebarOpen(false)}></div>
      )}

      <div
        className={`ds-sidebar ${
          isMobile
            ? mobileSidebarOpen
              ? "ds-sidebar-mobile-open"
              : "ds-sidebar-mobile-closed"
            : sidebarOpen
              ? "ds-sidebar-expanded"
              : "ds-sidebar-collapsed"
        }`}
      >
        {sidebarOpen || mobileSidebarOpen ? (
          <>
            <div className="ds-sidebar-header">
              <div className="ds-logo-sidebar-container">
                <img src="/logo-crop2.png" alt="Logo" className="ds-collapsed-logo-img" />
              </div>
              {isMobile && (
                <button className="ds-mobile-close-button" onClick={() => setMobileSidebarOpen(false)}>
                  ×
                </button>
              )}
            </div>

            <div className="ds-sidebar-content">
              {/* Navegación principal */}
              <div className="ds-navigation-menu">
                <button className="ds-nav-item" onClick={() => setSearchModalOpen(true)}>
                  <Search size={16} />
                  <span>Buscar</span>
                </button>
                <button className="ds-nav-item ds-close-sidebar-btn" onClick={toggleSidebar}>
                  <svg
                    width="16"
                    height="16"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    strokeWidth="2"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                  >
                    <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                    <path d="M4 12v-6a2 2 0 0 1 2 -2h12a2 2 0 0 1 2 2v8" />
                    <path d="M20 18h-17" />
                    <path d="M6 15l-3 3l3 3" />
                  </svg>
                  <span>Cerrar </span>
                </button>
                <button className={`ds-nav-item ${activeSection === "chat" ? "active" : ""}`} onClick={handleNewChat}>
                  <svg width="16" height="16" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth="1.5">
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      d="M12 20.25c4.97 0 9-3.694 9-8.25s-4.03-8.25-9-8.25S3 7.444 3 12c0 2.104.859 4.023 2.273 5.48.432.447.74 1.04.586 1.641a4.483 4.483 0 0 1-.923 1.785A5.969 5.969 0 0 0 6 21c1.282 0 2.47-.402 3.445-1.087.81.22 1.668.337 2.555.337Z"
                    />
                  </svg>
                  <span>Chat</span>
                </button>
                <button
                  className={`ds-nav-item ${activeSection === "tareas" ? "active" : ""}`}
                  onClick={() => setActiveSection("tareas")}
                >
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                    <path d="M9 11l3 3l8-8" />
                    <path d="M21 12c0 4.97-4.03 9-9 9s-9-4.03-9-9s4.03-9 9-9c1.51 0 2.93.37 4.18 1.03" />
                  </svg>
                  <span>Tareas</span>
                </button>
                <button
                  className={`ds-nav-item${historialExpanded ? " active" : ""}`}
                  onClick={() => {
                    if (activeSection !== "historial") {
                      setActiveSection("historial")
                      setHistorialExpanded(true)
                    } else {
                      setHistorialExpanded(!historialExpanded)
                    }
                  }}
                >
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                    <path d="M3 12a9 9 0 1 0 9-9 9.75 9.75 0 0 0-6.74 2.74L3 8" />
                    <path d="M3 3v5h5" />
                    <path d="M12 7v5l4 2" />
                  </svg>
                  <span>Historial</span>
                </button>
              </div>

              {/* Contenido dinámico basado en la sección activa */}
              {activeSection === "historial" && (
                <div className="ds-section-content">
                  {historialExpanded && (
                    <div className="ds-historial-content">
                      {Object.entries(groupChatsByDate(chatHistory)).map(([dateGroup, chats]) => (
                        <div key={dateGroup} className="ds-date-group">
                          <div className="ds-date-header">{dateGroup}</div>
                          {chats.map((chat) => (
                            <button
                              key={`${chat.id}-${timeUpdate}`}
                              onClick={() => handleConversationClick(chat.id)}
                              className={`ds-historial-item ${currentConversationId === chat.id ? "active" : ""}`}
                            >
                              <span className="ds-historial-title">
                                {chat.title === "NUEVA_CONEXION" ? "Nueva conversación" : chat.title}
                              </span>
                              <button
                                className="ds-historial-delete-button"
                                onClick={(e) => {
                                  e.stopPropagation()
                                  handleDeleteChat(chat.id, e)
                                }}
                                title="Eliminar chat"
                              >
                                <Trash2 size={12} />
                              </button>
                            </button>
                          ))}
                        </div>
                      ))}
                    </div>
                  )}
                </div>
              )}

              {activeSection === "chat" && (
                <div className="ds-section-content">
                  {/* The "Nuevo chat" button is removed, so this section is now empty */}
                </div>
              )}
            </div>

            {/* Footer con usuario */}
            <div className="ds-sidebar-footer">
              <div className="ds-user-section">
                <div className="ds-user-info">
                  <button className="ds-user-circle" onClick={() => setUserMenuOpen(!userMenuOpen)}>
                    <span>F</span>
                  </button>
                </div>
              </div>
              {/* Modal del usuario */}
            </div>
          </>
        ) : (
          <div className="ds-sidebar-collapsed-content">
            {/* Header colapsado */}
            <div className="ds-sidebar-header">
              <div className="ds-logo-sidebar-container">
                <img src="/logo-crop2.png" alt="Logo" className="ds-collapsed-logo-img" />
              </div>
            </div>

            {/* Contenido colapsado */}
            <div className="ds-sidebar-content">
              <div className="ds-navigation-menu">
                <button className="ds-nav-item" onClick={() => setSearchModalOpen(true)}>
                  <Search size={16} />
                </button>
                <button className="ds-nav-item ds-close-sidebar-btn" onClick={toggleSidebar}>
                  <svg
                    width="16"
                    height="16"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    strokeWidth="2"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                  >
                    <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                    <path d="M20 12v-6a2 2 0 0 0 -2 -2h-12a2 2 0 0 0 -2 2v8" />
                    <path d="M4 18h17" />
                    <path d="M18 15l3 3l-3 3" />
                  </svg>
                </button>
                <button
                  className={`ds-nav-item ${activeSection === "chat" ? "active" : ""}`}
                  onClick={() => {
                    handleNewChat()
                    if (!sidebarOpen) toggleSidebar()
                  }}
                >
                  <svg width="16" height="16" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth="1.5">
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      d="M12 20.25c4.97 0 9-3.694 9-8.25s-4.03-8.25-9-8.25S3 7.444 3 12c0 2.104.859 4.023 2.273 5.48.432.447.74 1.04.586 1.641a4.483 4.483 0 0 1-.923 1.785A5.969 5.969 0 0 0 6 21c1.282 0 2.47-.402 3.445-1.087.81.22 1.668.337 2.555.337Z"
                    />
                  </svg>
                </button>
                <button
                  className={`ds-nav-item ${activeSection === "tareas" ? "active" : ""}`}
                  onClick={() => {
                    setActiveSection("tareas")
                    if (!sidebarOpen) toggleSidebar()
                  }}
                >
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                    <path d="M9 11l3 3l8-8" />
                    <path d="M21 12c0 4.97-4.03 9-9 9s-9-4.03-9-9s4.03-9 9-9c1.51 0 2.93.37 4.18 1.03" />
                  </svg>
                </button>
                <button
                  className={`ds-nav-item ${activeSection === "historial" ? "active" : ""}`}
                  onClick={() => {
                    if (activeSection !== "historial") {
                      setActiveSection("historial")
                      setHistorialExpanded(true)
                    } else {
                      setHistorialExpanded(!historialExpanded)
                    }
                    if (!sidebarOpen) toggleSidebar()
                  }}
                >
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                    <path d="M3 12a9 9 0 1 0 9-9 9.75 9.75 0 0 0-6.74 2.74L3 8" />
                    <path d="M3 3v5h5" />
                    <path d="M12 7v5l4 2" />
                  </svg>
                </button>
              </div>

              {activeSection === "chat" && (
                <div className="ds-section-content">
                  {/* The "Nuevo chat" button is removed, so this section is now empty */}
                </div>
              )}
            </div>

            {/* Footer colapsado */}
            <div className="ds-sidebar-footer">
              <div className="ds-user-section">
                <div className="ds-user-info">
                  <button className="ds-user-circle" onClick={() => setUserMenuOpen(!userMenuOpen)}>
                    <span>F</span>
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Main Content */}
      <div className="ds-main-content" ref={mainContentRef}>
        <div className="ds-chat-header">
          {isMobile && (
            <button className="ds-mobile-menu-button" onClick={toggleSidebar}>
              <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                <line x1="3" y1="6" x2="21" y2="6"></line>
                <line x1="3" y1="12" x2="21" y2="12"></line>
                <line x1="3" y1="18" x2="21" y2="18"></line>
              </svg>
            </button>
          )}
          <h1>Nuevo chat</h1>
          {isMobile && (
            <button className="ds-mobile-new-chat-button" onClick={handleNewChat}>
              <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="1.5">
                <circle cx="12" cy="12" r="10" />
                <path d="M12 8v8M8 12h8" />
              </svg>
            </button>
          )}
        </div>

        <div className="ds-chat-layout">
          {isChatEmpty ? (
            <div className="ds-initial-view">
              <div className="ds-welcome-message">
                <div className="ds-welcome-logo">
                  <img src="/logo-crop2.png" alt="Logo" />
                </div>
                <h2>Hola, soy Deitana IA.</h2>
                <p>¿En qué puedo ayudarte hoy?</p>
              </div>
            </div>
          ) : (
            <div className="ds-chat-messages-container" ref={chatContainerRef}>
              <div className="ds-chat-messages">
                <div className="ds-message ds-bot-message">
                  <div className="ds-message-avatar">
                    <img src="/logo-crop2.png" alt="Logo" className="ds-avatar-image" />
                  </div>
                  <div className="ds-message-content">
                    <h2>Hola, soy Deitana IA.</h2>
                    <p>¿En qué puedo ayudarte hoy?</p>
                  </div>
                </div>

                {chatMessages.map((msg) => (
                  <div
                    key={msg.id}
                    className={`ds-message ${msg.sender === "bot" ? "ds-bot-message" : "ds-user-message"}`}
                  >
                    {msg.sender === "bot" && (
                      <div className="ds-message-avatar">
                        <img src="/logo-crop2.png" alt="Logo" className="ds-avatar-image" />
                      </div>
                    )}
                    <div className="ds-message-content">
                      {msg.sender === "bot" ? (
                        <>
                          {console.log("Renderizando mensaje del bot:", msg)}
                          <ReactMarkdown
                            components={{
                              p: ({ children }) => {
                                console.log("Renderizando párrafo con children:", children)
                                return (
                                  <p
                                    style={{
                                      whiteSpace: "pre-line",
                                      color: "#333",
                                      fontSize: "15px",
                                      lineHeight: "1.6",
                                      marginBottom: "12px",
                                    }}
                                  >
                                    {children}
                                  </p>
                                )
                              },
                              strong: ({ children }) => (
                                <strong
                                  style={{
                                    fontWeight: 600,
                                    fontSize: "15px",
                                    color: "#333",
                                    display: "inline",
                                    marginRight: "4px",
                                  }}
                                >
                                  {children}
                                </strong>
                              ),
                              em: ({ children }) => (
                                <em
                                  style={{
                                    fontStyle: "italic",
                                    color: "#333",
                                    fontSize: "15px",
                                  }}
                                >
                                  {children}
                                </em>
                              ),
                              ul: ({ children }) => (
                                <ul
                                  style={{
                                    margin: "8px 0",
                                    paddingLeft: "20px",
                                    color: "#333",
                                    fontSize: "15px",
                                  }}
                                >
                                  {children}
                                </ul>
                              ),
                              ol: ({ children }) => (
                                <ol
                                  style={{
                                    margin: "8px 0",
                                    paddingLeft: "20px",
                                    color: "#333",
                                    fontSize: "15px",
                                  }}
                                >
                                  {children}
                                </ol>
                              ),
                              li: ({ children }) => (
                                <li
                                  style={{
                                    margin: "5px 0",
                                    color: "#333",
                                    fontSize: "15px",
                                  }}
                                >
                                  {children}
                                </li>
                              ),
                              a: ({ href, children }) => (
                                <a
                                  href={href}
                                  target="_blank"
                                  rel="noopener noreferrer"
                                  style={{
                                    color: "#2964aa",
                                    textDecoration: "none",
                                    fontWeight: 500,
                                    borderBottom: "1px solid #2964aa",
                                    paddingBottom: "1px",
                                    transition: "all 0.2s ease",
                                  }}
                                  onMouseEnter={(e) => {
                                    e.target.style.color = "#1a4b8c"
                                    e.target.style.borderBottomColor = "#1a4b8c"
                                  }}
                                  onMouseLeave={(e) => {
                                    e.target.style.color = "#2964aa"
                                    e.target.style.borderBottomColor = "#2964aa"
                                  }}
                                >
                                  {children}
                                </a>
                              ),
                            }}
                          >
                            {msg.text || ""}
                          </ReactMarkdown>
                          {msg.isStreaming && !msg.text && (
                            <div className="ds-typing-container">
                              <div className="ds-typing-indicator-inline">
                                <span></span>
                                <span></span>
                                <span></span>
                              </div>
                            </div>
                          )}
                        </>
                      ) : (
                        <p style={{ whiteSpace: "pre-line" }}>{msg.text}</p>
                      )}
                    </div>
                  </div>
                ))}
                <div ref={messagesEndRef} />
              </div>
            </div>
          )}

          {showScrollButton && !isChatEmpty && (
            <div className="ds-scroll-button-container" style={getScrollButtonStyle()}>
              <button className="ds-scroll-to-bottom" onClick={scrollToBottom}>
                <ChevronDown size={16} />
              </button>
            </div>
          )}

          <div className="ds-chat-input-container">
            <form onSubmit={handleSubmit}>
              <div className="ds-input-wrapper">
                <input
                  type="text"
                  placeholder="¿Cómo puede ayudar Deitana IA?"
                  value={message}
                  onChange={(e) => setMessage(e.target.value)}
                  className="ds-chat-input"
                />
                <button type="submit" className="ds-send-button" disabled={!message.trim()}>
                  <Send size={20} />
                </button>
              </div>
            </form>
            <div className="ds-disclaimer">Deitana IA</div>
          </div>
        </div>
      </div>

      {userMenuOpen && (
        <div className="ds-user-modal-overlay" onClick={() => setUserMenuOpen(false)}>
          <div className="ds-user-modal" onClick={(e) => e.stopPropagation()}>
            <div className="ds-user-modal-header">
              <h2 className="ds-user-modal-title">
                {modalView === "account"
                  ? "Cuenta"
                  : modalView === "appearance"
                    ? "Configuración"
                    : modalView === "behavior"
                      ? "Comportamiento"
                      : modalView === "personalize"
                        ? "Personalizar"
                        : modalView === "data"
                          ? "Controles de datos"
                          : modalView === "apps"
                            ? "Apps conectadas"
                            : "Configuración"}
              </h2>
              <button
                className="ds-user-modal-close"
                onClick={() => {
                  setUserMenuOpen(false)
                  setModalView("account")
                }}
              >
                ×
              </button>
            </div>

            <div className="ds-user-modal-content">
              <div className="ds-user-modal-sidebar">
                <button
                  className={`ds-modal-nav-item ${modalView === "account" ? "active" : ""}`}
                  onClick={() => setModalView("account")}
                >
                  <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                    <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2" />
                    <circle cx="12" cy="7" r="4" />
                  </svg>
                  <span>Cuenta</span>
                </button>
                <button
                  className={`ds-modal-nav-item ${modalView === "appearance" ? "active" : ""}`}
                  onClick={() => setModalView("appearance")}
                >
                  <svg
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    strokeWidth="2"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                  >
                    <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                    <path d="M10.325 4.317c.426 -1.756 2.924 -1.756 3.35 0a1.724 1.724 0 0 0 2.573 1.066c1.543 -.94 3.31 .826 2.37 2.37a1.724 1.724 0 0 0 1.065 2.572c1.756 .426 1.756 2.924 0 3.35a1.724 1.724 0 0 0 -1.066 2.573c.94 1.543 -.826 3.31 -2.37 2.37a1.724 1.724 0 0 0 -2.572 1.065c-.426 1.756 -2.924 1.756 -3.35 0a1.724 1.724 0 0 0 -2.573 -1.066c-1.543 .94 -3.31 -.826 -2.37 -2.37a1.724 1.724 0 0 0 -1.065 -2.572c-1.756 -.426 -1.756 -2.924 0 -3.35a1.724 1.724 0 0 0 1.066 -2.573c-.94 -1.543 .826 -3.31 2.37 -2.37c1 .608 2.296 .07 2.572 -1.065z" />
                    <path d="M9 12a3 3 0 1 0 6 0a3 3 0 0 0 -6 0" />
                  </svg>
                  <span>Configuración</span>
                </button>
                <button
                  className={`ds-modal-nav-item ${modalView === "behavior" ? "active" : ""}`}
                  onClick={() => setModalView("behavior")}
                >
                  <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                    <path d="M12 20h9" />
                    <path d="M16.5 3.5a2.121 2.121 0 0 1 3 3L7 19l-4 1 1-4L16.5 3.5z" />
                  </svg>
                  <span>Comportamiento</span>
                </button>
                <button
                  className={`ds-modal-nav-item ${modalView === "personalize" ? "active" : ""}`}
                  onClick={() => setModalView("personalize")}
                >
                  <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                    <path d="M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 0 1-1.73V4a2 2 0 0 0-2-2z" />
                    <circle cx="12" cy="12" r="3" />
                  </svg>
                  <span>Personalizar</span>
                </button>
                <button
                  className={`ds-modal-nav-item ${modalView === "data" ? "active" : ""}`}
                  onClick={() => setModalView("data")}
                >
                  <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                    <rect x="3" y="3" width="18" height="18" rx="2" ry="2" />
                    <rect x="9" y="9" width="6" height="6" />
                    <path d="M9 1v6M15 1v6M9 21v-6M15 21v-6M1 9h6M1 15h6M21 9h-6M21 15h-6" />
                  </svg>
                  <span>Controles de datos</span>
                </button>
                <button
                  className={`ds-modal-nav-item ${modalView === "apps" ? "active" : ""}`}
                  onClick={() => setModalView("apps")}
                >
                  <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                    <rect x="3" y="3" width="18" height="18" rx="2" ry="2" />
                    <rect x="9" y="9" width="6" height="6" />
                    <path d="M9 1v6M15 1v6M9 21v-6M15 21v-6M1 9h6M1 15h6M21 9h-6M21 15h-6" />
                  </svg>
                  <span>Apps conectadas</span>
                </button>
              </div>

              <div className="ds-user-modal-main">
                {(modalView === "account" || !modalView) && (
                  <>
                    <div className="ds-user-profile-card">
                      <div className="ds-user-avatar-large">
                        <span>F</span>
                      </div>
                      <div className="ds-user-info-large">
                        <div className="ds-user-name-large">Facundo Paredes</div>
                        <div className="ds-user-email-large">facuslice@gmail.com</div>
                      </div>
                      <button className="ds-admin-btn" onClick={() => setModalView("admin")}>
                        Administrar
                      </button>
                    </div>
                    <div className="ds-language-section">
                      <span className="ds-language-text">Cerrar sesión</span>
                      <button className="ds-admin-btn" onClick={handleLogout}>
                        Cerrar sesión
                      </button>
                    </div>
                    <div className="ds-id-section">6498fd0f-2312-4ab1-bef3-0b8b68eba4dc</div>
                  </>
                )}

                {modalView === "admin" && (
                  <div className="ds-admin-options">
                    <h3>Administrar cuenta</h3>
                    <button className="ds-admin-option-btn">
                      <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                        <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2" />
                        <circle cx="12" cy="7" r="4" />
                      </svg>
                      <span>Cambiar Nombre</span>
                    </button>
                    <button className="ds-admin-option-btn">
                      <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                        <rect x="3" y="11" width="18" height="11" rx="2" ry="2" />
                        <circle cx="12" cy="16" r="1" />
                        <path d="M7 11V7a5 5 0 0 1 10 0v4" />
                      </svg>
                      <span>Cambiar contraseña</span>
                    </button>
                    <button className="ds-admin-option-btn">
                      <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                        <path d="M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z" />
                        <polyline points="22,6 12,13 2,6" />
                      </svg>
                      <span>Cambiar email</span>
                    </button>
                    <button className="ds-admin-option-btn ds-admin-danger">
                      <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                        <polyline points="3,6 5,6 21,6" />
                        <path d="M19,6v14a2,2 0 0,1 -2,2H7a2,2 0 0,1 -2,-2V6m3,0V4a2,2 0 0,1 2,-2h4a2,2 0 0,1 2,2v2" />
                        <line x1="10" y1="11" x2="10" y2="17" />
                        <line x1="14" y1="11" x2="14" y2="17" />
                      </svg>
                      <span>Eliminar cuenta</span>
                    </button>
                  </div>
                )}

                {modalView === "appearance" && (
                  <div>
                    <p>Configuración de apariencia próximamente...</p>
                  </div>
                )}

                {modalView === "behavior" && (
                  <div>
                    <p>Configuración de comportamiento próximamente...</p>
                  </div>
                )}

                {modalView === "personalize" && (
                  <div>
                    <p>Opciones de personalización próximamente...</p>
                  </div>
                )}

                {modalView === "data" && (
                  <div>
                    <p>Controles de datos próximamente...</p>
                  </div>
                )}

                {modalView === "apps" && (
                  <div>
                    <p>Apps conectadas próximamente...</p>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      )}

            {searchModalOpen && (
        <div className="ds-search-modal-overlay" onClick={() => {
          setSearchModalOpen(false)
          setSearchQuery("")
          setDebouncedSearchQuery("")
        }}>
          <div className="ds-search-modal" onClick={(e) => e.stopPropagation()}>
            {/* Campo de búsqueda fijo */}
            <div className="ds-search-field-container">
              <div className="ds-search-field-wrapper">
                <input 
                  type="text" 
                  placeholder="Buscar..." 
                  className="ds-search-field-input" 
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  autoFocus
                />
                <Search className="ds-search-field-icon" size={20} />
              </div>
            </div>

            {/* Contenedor scrollable para resultados */}
            <div className="ds-search-results-container">
              {/* Secciones dinámicas usando la misma lógica que el historial */}
              {(() => {
                const filteredChats = filterChatsBySearch(chatHistory, debouncedSearchQuery)
                const groupedChats = groupChatsByDate(filteredChats)
                
                if (debouncedSearchQuery.trim() && filteredChats.length === 0) {
                  return (
                    <div className="ds-search-section">
                      <div className="ds-search-results">
                        <div className="ds-search-result-item" style={{ cursor: 'default', opacity: 0.6 }}>
                          <span className="ds-search-result-title">No se encontraron resultados para "{debouncedSearchQuery}"</span>
                        </div>
                      </div>
                    </div>
                  )
                }
                
                return Object.entries(groupedChats).map(([dateGroup, chats]) => (
                  <div key={dateGroup} className="ds-search-section">
                    <div className="ds-search-section-header">
                      <span className="ds-search-section-title">{dateGroup}</span>
                    </div>
                    <div className="ds-search-results">
                      {chats.map((chat) => (
                        <div 
                          key={chat.id} 
                          className="ds-search-result-item"
                          onClick={() => {
                            handleConversationClick(chat.id)
                            setSearchModalOpen(false)
                            setSearchQuery("")
                            setDebouncedSearchQuery("")
                          }}
                        >
                          <span className="ds-search-result-title">
                            {chat.title === "NUEVA_CONEXION" ? "Nueva conversación" : chat.title}
                          </span>
                          <span className="ds-search-result-time">
                            {formatTimeAgo(chat.updatedAt || chat.created_at)}
                          </span>
                        </div>
                      ))}
                    </div>
                  </div>
                ))
              })()}
            </div>
          </div>
        </div>
      )}
    </div>
  )
}

export default Home
















@import url("https://fonts.googleapis.com/css2?family=Plus+Jakarta+Sans:ital,wght@0,200..800;1,200..800&display=swap");

.login-page {
  font-family: "Plus Jakarta Sans", sans-serif;
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
  background-color: #f8f8f8;
  padding: 20px;
}

.login-container {
  width: 100%;
  max-width: 450px;
  padding: 40px 20px;
}

.logo-container {
  display: flex;
  justify-content: center;
  margin-bottom: 20px;
}

.logo {
  height: 70px;
}

.divider {
  height: 1px;
  background-color: #e0e0e0;
  margin: 20px 0 40px 0;
}

.form-group {
  margin-bottom: 20px;
}

label {
  display: block;
  margin-bottom: 8px;
  font-weight: 500;
  color: #333;
}

input {
  width: 100%;
  padding: 12px 16px;
  background-color: white;
  border: 1px solid #e0e0e0;
  border-radius: 8px;
  font-size: 16px;
  transition: border-color 0.3s;
  box-sizing: border-box;
}

input:focus {
  outline: none;
  border-color: #000;
}

.password-input-container {
  position: relative;
}

.toggle-password {
  position: absolute;
  right: 12px;
  top: 50%;
  transform: translateY(-50%);
  background: none;
  border: none;
  cursor: pointer;
  color: #666;
  padding: 0;
  display: flex;
  align-items: center;
  justify-content: center;
}

.toggle-password:hover {
  color: #333;
}

.login-button {
  width: 100%;
  padding: 12px 16px;
  background-color: white;
  color: #666;
  border: 1px solid #e0e0e0;
  border-radius: 8px;
  font-size: 16px;
  font-weight: 500;
  cursor: pointer;
  transition: background-color 0.3s, border-color 0.3s;
  margin-top: 10px;
}

.login-button:hover {
  background-color: #f5f5f5;
}

.login-button:active {
  background-color: #e0e0e0;
}

.ds-home-container {
  font-family: "Plus Jakarta Sans", sans-serif;
  display: flex;
  height: 100vh;
  width: 100%;
  overflow: hidden;
  position: relative;
}

/* Sidebar Styles */
.ds-sidebar {
  font-family: "Plus Jakarta Sans", sans-serif;
  background-color: #f8f6f7;
  border-right: 1px solid #05050514;
  display: flex;
  flex-direction: column;
  transition: width 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  overflow: hidden;
  z-index: 10;
  width: 260px;
}

.ds-sidebar-expanded {
  width: 260px;
}

.ds-sidebar-collapsed {
  width: 64px;
}

.ds-sidebar-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 16px;
  flex-shrink: 0;
  min-height: 64px;
}

.ds-logo-sidebar-container {
  cursor: pointer;
  display: flex;
  align-items: center;
}

.ds-logo-sidebar-container:hover {
  opacity: 0.8;
}

.ds-mobile-close-button {
  background: none;
  border: none;
  font-size: 24px;
  cursor: pointer;
  color: #666;
  padding: 4px;
  border-radius: 4px;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 32px;
  height: 32px;
}

.ds-mobile-close-button:hover {
  background-color: #e9ecef;
  color: #333;
}

/* Barra de búsqueda */
.ds-search-container {
  padding: 12px 16px;
  flex-shrink: 0;
}

.ds-search-wrapper {
  position: relative;
  display: flex;
  align-items: center;
}

.ds-search-input {
  width: 100%;
  padding: 8px 12px 8px 36px;
  border: 1px solid #e0e0e0;
  border-radius: 20px;
  font-size: 14px;
  background-color: #ffff;
  transition: all 0.2s ease;
}

.ds-search-input:focus {
  outline: none;
  border-color: #0066ff;
  background-color: white;
}

.ds-search-icon {
  position: absolute;
  left: 12px;
  color: #666;
  pointer-events: none;
}

.ds-sidebar-content {
  flex: 1;
  padding: 16px;
  overflow-y: auto;
  display: flex;
  flex-direction: column;
  gap: 8px;
  -webkit-overflow-scrolling: touch;
}

/* Navegación principal */
.ds-navigation-menu {
  display: flex;
  flex-direction: column;
  gap: 2px;
}

.ds-nav-item {
  display: flex;
  align-items: center;
  gap: 12px;
  padding: 10px 12px;
  border: none;
  background: none;
  border-radius: 0.75rem;
  cursor: pointer;
  font-size: 12px;
  line-height: 1.25rem;
  font-weight: 700;
  color: #6b7280;
  transition: all 0.2s ease;
  text-align: left;
  width: 100%;
}

.ds-nav-item:hover {
  background-color: #eeeced;
  color: black;
}

.ds-nav-item.active {
  background-color: #e5e7eb;
  color: #111827;
  font-weight: 700;
}

.ds-nav-item svg {
  flex-shrink: 0;
  width: 20px;
  height: 20px;
  transition: all 0.3s ease;
}

.ds-nav-item span {
  font-family: "Plus Jakarta Sans", sans-serif;
}

/* Estilos para el botón de toggle del historial */
.ds-historial-toggle {
  display: flex;
  align-items: center;
  gap: 8px;
  padding: 8px 12px;
  border: none;
  background: none;
  border-radius: 6px;
  cursor: pointer;
  font-size: 14px;
  color: #6b7280;
  font-weight: 500;
  margin-bottom: 12px;
  width: 100%;
  text-align: left;
  transition: all 0.2s ease;
}

.ds-historial-toggle:hover {
  background-color: #f3f4f6;
  color: #374151;
}

.ds-historial-toggle svg {
  flex-shrink: 0;
}

/* Estilos para el historial expandido */
.ds-historial-header {
  display: flex;
  align-items: center;
  gap: 8px;
  padding: 8px 12px;
  color: #6b7280;
  font-size: 14px;
  font-weight: 500;
  margin-bottom: 12px;
}

.ds-historial-header svg {
  flex-shrink: 0;
}

.ds-historial-content {
  display: flex;
  flex-direction: column;
  gap: 16px;
  position: relative;
}

.ds-historial-content::before {
  content: "";
  position: absolute;
  left: 12px;
  top: 0;
  bottom: 0;
  width: 1px;
  background: linear-gradient(to bottom, transparent 0%, #d1d5db 10%, #d1d5db 90%, transparent 100%);
  z-index: 1;
}

.ds-historial-content::after {
  content: "";
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  height: 40px;
  background: linear-gradient(to bottom, transparent 0%, #f8f6f7 100%);
  pointer-events: none;
  z-index: 2;
}

.ds-date-group {
  display: flex;
  flex-direction: column;
  gap: 4px;
  position: relative;
  z-index: 3;
}

.ds-date-header {
  font-size: 14px;
  font-weight: 600;
  color: #374151;
  padding: 4px 12px 4px 24px;
  margin-bottom: 4px;
  position: relative;
}

.ds-historial-item {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 8px 12px 8px 30px;
  line-height: 1.25rem;
  border-radius: 0.75rem;
  border: none;
  background: none;
  cursor: pointer;
  text-align: left;
  transition: all 0.2s ease;
  position: relative;
  width: 100%;
  margin-left: 0;
}

.ds-historial-item::before {
  content: "";
  position: absolute;
  left: 24px;
  top: 0;
  right: 0;
  bottom: 0;
  background-color: #e5e7eb;
  border-radius: 6px;
  opacity: 0;
  transition: opacity 0.2s ease;
  pointer-events: none;
  border-radius: 0.75rem;
}

.ds-historial-item:hover::before {
  opacity: 1;
}

.ds-historial-item:hover .ds-historial-title,
.ds-historial-item:hover .ds-historial-delete-button {
  position: relative;
  z-index: 1;
}

.ds-historial-title {
  font-size: 13px;
  color: #6b7280;
  flex: 1;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  font-weight: 400;
}

.ds-historial-item.active .ds-historial-title {
  color: #111827;
  font-weight: 500;
}

.ds-historial-delete-button {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 38px;
  height: 20px;
  background: none;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  color: #9ca3af;
  transition: all 0.2s ease;
  opacity: 0;
  flex-shrink: 0;
}

.ds-historial-item:hover .ds-historial-delete-button {
  opacity: 1;
}

.ds-historial-delete-button:hover {
  color: #dc2626;
}

.ds-historial-delete-button:active {
  transform: scale(0.9);
}

/* Secciones del chat */
.ds-chat-section {
  margin-bottom: 24px;
}

.ds-section-title {
  font-size: 12px;
  font-weight: 600;
  color: #666;
  text-transform: uppercase;
  letter-spacing: 0.5px;
  margin: 0 0 12px 0;
  padding: 0 8px;
}

.ds-chat-item {
  font-family: "Plus Jakarta Sans", sans-serif;
  display: flex;
  align-items: center;
  gap: 12px;
  width: 100%;
  padding: 8px 12px;
  padding-right: 40px; /* Espacio para el botón de eliminar */
  border: none;
  background: none;
  border-radius: 8px;
  cursor: pointer;
  text-align: left;
  transition: background-color 0.2s ease;
  margin-bottom: 4px;
  position: relative;
}

.ds-chat-item-container {
  display: flex;
  align-items: center;
  gap: 4px;
  margin-bottom: 4px;
  position: relative;
}

.ds-chat-item-container .ds-chat-item {
  flex: 1;
  margin-bottom: 0;
}

.ds-chat-delete-button {
  position: absolute;
  right: 8px;
  top: 50%;
  transform: translateY(-50%);
  display: flex;
  align-items: center;
  justify-content: center;
  width: 24px;
  height: 24px;
  background: none;
  border: none;
  border-radius: 50%;
  cursor: pointer;
  color: #666;
  transition: all 0.2s ease;
  opacity: 0;
  z-index: 1;
}

.ds-chat-item:hover .ds-chat-delete-button {
  opacity: 1;
}

.ds-chat-delete-button:hover {
  background-color: #dc2626;
  color: white;
}

.ds-chat-delete-button:active {
  background-color: #b91c1c;
  transform: translateY(-50%) scale(0.9);
}

.ds-chat-item:hover {
  background-color: #e9ecef;
}

.ds-gem-item {
  background-color: #f0f7ff;
  border: 1px solid #e6f0ff;
}

.ds-gem-item:hover {
  background-color: #e6f0ff;
}

.ds-gem-icon {
  font-size: 16px;
  flex-shrink: 0;
}

.ds-chat-icon {
  color: #666;
  flex-shrink: 0;
}

.ds-chat-info {
  display: flex;
  flex-direction: column;
  gap: 2px;
  min-width: 0;
  flex: 1;
}

.ds-chat-title {
  font-size: 14px;
  color: #333;
  font-weight: 400;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.ds-chat-timestamp {
  font-size: 12px;
  color: #666;
}

.ds-show-more-button {
  display: flex;
  align-items: center;
  justify-content: space-between;
  width: 100%;
  padding: 8px 12px;
  border: none;
  background: none;
  border-radius: 8px;
  cursor: pointer;
  font-size: 14px;
  color: #666;
  transition: background-color 0.2s ease;
  margin-top: 8px;
}

.ds-show-more-button:hover {
  background-color: #e9ecef;
}

/* Estilos para el sidebar colapsado */
.ds-collapsed-item {
  display: flex;
  justify-content: center;
  align-items: center;
  width: 40px;
  height: 40px;
  margin-bottom: 8px;
  cursor: pointer;
  color: #6b7280;
  border-radius: 10px;
  transition: all 0.2s ease;
  position: relative;
}

.ds-collapsed-item:hover {
  color: #374151;
  background-color: #f3f4f6;
}

.ds-collapsed-item.ds-collapsed-active {
  background-color: #e5e7eb;
  color: #111827;
}

.ds-collapsed-logo {
  margin-bottom: 24px;
  border-radius: 12px;
}

.ds-collapsed-logo:hover {
  background-color: #f3f4f6;
}

.ds-collapsed-logo-img {
  width: 40px;
  height: 40px;
  transition: all 0.3s ease;
}

.ds-collapsed-expand {
  margin-top: 8px;
  margin-bottom: 16px;
}

.ds-user-circle {
  width: 32px;
  height: 32px;
  border-radius: 50%;
  background-color: #009688;
  color: white;
  display: flex;
  justify-content: center;
  align-items: center;
  font-weight: bold;
  font-size: 14px;
  transition: all 0.3s ease;
}

/* Asegurar que los iconos mantengan el mismo tamaño */
.ds-collapsed-item svg {
  width: 20px;
  height: 20px;
  flex-shrink: 0;
  transition: all 0.3s ease;
}

/* Tooltip para el sidebar colapsado */
.ds-collapsed-item::after {
  content: attr(title);
  position: absolute;
  left: 60px;
  top: 50%;
  transform: translateY(-50%);
  background-color: #1f2937;
  color: white;
  padding: 6px 12px;
  border-radius: 6px;
  font-size: 12px;
  white-space: nowrap;
  opacity: 0;
  pointer-events: none;
  transition: opacity 0.2s ease;
  z-index: 1000;
}

.ds-collapsed-item:hover::after {
  opacity: 1;
}

.ds-sidebar-collapsed-content {
  display: flex;
  flex-direction: column;
  height: 100%;
}

.ds-sidebar-collapsed-content .ds-sidebar-header {
  padding: 16px 8px;
  justify-content: center;
}

.ds-sidebar-collapsed-content .ds-search-container {
  padding: 12px 8px;
}

.ds-sidebar-collapsed-content .ds-search-wrapper {
  justify-content: center;
}

.ds-sidebar-collapsed-content .ds-search-placeholder {
  display: none;
}

.ds-sidebar-collapsed-content .ds-sidebar-content {
  flex: none !important;
  padding: 0 8px !important;
  align-items: center;
  min-height: 0 !important;
  background: transparent !important;
  overflow-y: visible !important;
}

.ds-sidebar-collapsed-content .ds-nav-item {
  justify-content: center;
  padding: 10px 12px;
  width: 100%;
  height: auto;
}

.ds-sidebar-collapsed-content .ds-nav-item svg {
  width: 20px !important;
  height: 20px !important;
}

.ds-sidebar-collapsed-content .ds-nav-item span {
  display: none;
}

.ds-sidebar-collapsed-content .ds-sidebar-footer {
  padding: 16px 8px;
  align-items: center;
  margin-top: auto;
}

.ds-sidebar-collapsed-content .ds-user-section {
  justify-content: center;
  gap: 8px;
}

.ds-sidebar-collapsed-content .ds-user-info {
  display: flex;
  align-items: center;
  justify-content: center;
}

.options-sidebar {
  font-family: "Plus Jakarta Sans", sans-serif;
  font-size: 15px;
}

.ds-collapsed-spacer {
  flex-grow: 1;
}

.ds-collapsed-user {
  margin-top: auto;
  margin-bottom: 0;
}

.ds-new-chat-highlight {
  background-color: #e6f0ff !important;
  color: #0066ff !important;
  margin-bottom: 16px;
}

.ds-new-chat-highlight:hover {
  background-color: #d9e8ff !important;
  color: #0066ff !important;
}

.ds-video-button {
  display: flex;
  align-items: center;
  gap: 8px;
  background-color: #f0f0f0;
  color: #6c757d;
  border: none;
  border-radius: 8px;
  padding: 8px 16px;
  width: 100%;
  text-align: left;
  cursor: pointer;
  font-weight: 500;
}

.ds-video-button:hover {
  background-color: #e5e5e5;
}

/* Footer del sidebar */
.ds-sidebar-footer {
  padding: 16px;
  border-top: 1px solid #e9ecef;
  flex-shrink: 0;
  display: flex;
  flex-direction: column;
  gap: 8px;
}

.ds-footer-button {
  display: flex;
  align-items: center;
  gap: 12px;
  background: none;
  border: none;
  border-radius: 8px;
  padding: 8px 12px;
  width: 100%;
  text-align: left;
  cursor: pointer;
  font-size: 14px;
  color: #666;
  transition: background-color 0.2s ease;
}

.ds-footer-button:hover {
  background-color: #e9ecef;
}

.ds-logout-button {
  color: #dc3545;
}

.ds-logout-button:hover {
  background-color: #f8d7da;
  color: #721c24;
}

/* Main Content Styles */
.ds-main-content {
  flex: 1;
  display: flex;
  flex-direction: column;
  background-color: #f8f6f7;
  overflow: hidden;
}

/* Header responsive */
.ds-chat-header {
  padding: 16px 24px;
  text-align: center;
  border-bottom: 1px solid #e9ecef;
  flex-shrink: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
}

.ds-mobile-menu-button {
  position: absolute;
  left: 16px;
  background: none;
  border: none;
  cursor: pointer;
  color: #333;
  padding: 8px;
  border-radius: 8px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.ds-mobile-menu-button:hover {
  background-color: #f5f5f5;
}

/* Botón circular de nuevo chat en móvil */
.ds-mobile-new-chat-button {
  position: absolute;
  right: 16px;
  background-color: transparent;
  color: #333;
  border: none;
  border-radius: 50%;
  width: 40px;
  height: 40px;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.2s ease;
}

.ds-mobile-new-chat-button:hover {
  background-color: #f5f5f5;
  transform: scale(1.05);
}

.ds-mobile-new-chat-button:active {
  transform: scale(0.95);
  background-color: #e9ecef;
}

.ds-header-spacer {
  width: 40px;
}

.ds-chat-header h1 {
  font-size: 20px;
  font-weight: 600;
  margin: 0;
  color: #333;
}

/* Nueva estructura de layout para el chat */
.ds-chat-layout {
  display: flex;
  flex-direction: column;
  height: 100%;
  overflow: hidden;
  position: relative;
}

/* Estilo para chat vacío (centrado) */
.ds-initial-view {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  flex: 1;
  padding: 0 24px;
}

.ds-welcome-message {
  text-align: center;
  max-width: 600px;
}

.ds-welcome-logo {
  margin-bottom: 16px;
}

.ds-welcome-logo img {
  width: 60px;
  height: 60px;
}

.ds-welcome-message h2 {
  font-size: 24px;
  font-weight: 600;
  margin: 0 0 8px 0;
  color: #333;
}

.ds-welcome-message p {
  font-size: 16px;
  color: #666;
  margin: 0;
}

/* Contenedor de mensajes con scroll */
.ds-chat-messages-container {
  flex: 1;
  overflow-y: auto;
  position: relative;
}

/* Mensajes del chat */
.ds-chat-messages {
  padding: 24px;
  display: flex;
  flex-direction: column;
  gap: 24px;
  width: 100%;
  max-width: 800px;
  margin: 0 auto;
}

.ds-message {
  display: flex;
  gap: 16px;
  width: 100%;
  word-wrap: break-word;
  overflow-wrap: break-word;
}

.ds-bot-message {
  align-self: flex-start;
  max-width: 80%;
}

.ds-user-message {
  align-self: flex-end;
  flex-direction: row-reverse;
  background-color: #ffff;
  padding: 12px 16px;
  border-radius: 12px;
  margin-left: auto;
  max-width: 80%;
  width: auto;
  display: inline-flex;
}

.ds-message-avatar {
  flex-shrink: 0;
}

.ds-avatar-image {
  height: 40px;
  width: 40px;
  border-radius: 50%;
}

.logo-sidebar-open,
.ds-collapsed-logo-img {
  width: 40px !important;
  height: 40px !important;
  object-fit: contain;
}

.ds-message-content {
  display: flex;
  flex-direction: column;
  gap: 4px;
  max-width: 100%;
  word-break: break-word;
  overflow-wrap: break-wrap;
}

.ds-message-content h2 {
  font-size: 18px;
  font-weight: 600;
  margin: 0;
}

.ds-message-content p {
  font-size: 15px;
  margin: 0;
  color: #333;
  word-break: break-word;
  overflow-wrap: break-wrap;
}

/* Indicador de escritura mejorado */
.ds-typing-container {
  display: flex;
  align-items: center;
  gap: 12px;
  margin-top: 8px;
}

.ds-typing-indicator-inline {
  display: inline-flex;
  align-items: center;
  padding: 8px 16px;
  border-radius: 16px;
  width: fit-content;
  position: relative;
}

.ds-typing-indicator-inline span {
  height: 8px;
  width: 8px;
  background-color: #666;
  border-radius: 50%;
  display: inline-block;
  margin: 0 3px;
  opacity: 0.4;
  animation: ds-typing 1.5s cubic-bezier(0.4, 0, 0.2, 1) infinite;
}

.ds-typing-indicator-inline span:nth-child(1) {
  animation-delay: 0s;
  background-color: #333;
}

.ds-typing-indicator-inline span:nth-child(2) {
  animation-delay: 0.2s;
  background-color: #666;
}

.ds-typing-indicator-inline span:nth-child(3) {
  animation-delay: 0.4s;
  background-color: #999;
}

@keyframes ds-typing {
  0% {
    transform: translateY(0px) scale(1);
    opacity: 0.4;
  }
  25% {
    transform: translateY(-6px) scale(1.1);
    opacity: 0.8;
  }
  50% {
    transform: translateY(0px) scale(1);
    opacity: 1;
  }
  75% {
    transform: translateY(3px) scale(0.9);
    opacity: 0.8;
  }
  100% {
    transform: translateY(0px) scale(1);
    opacity: 0.4;
  }
}

/* Botón de Scroll to Bottom */
.ds-scroll-button-container {
  position: fixed;
  bottom: 100px;
  left: 50%;
  transform: translateX(-50%);
  z-index: 100;
}

.ds-scroll-to-bottom {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 40px;
  height: 40px;
  background-color: white;
  border: 1px solid #e0e0e0;
  border-radius: 50%;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
  cursor: pointer;
  transition: all 0.2s ease;
}

.ds-scroll-to-bottom:hover {
  background-color: #f5f5f5;
  transform: translateY(-2px);
}

/* Input de mensaje - Fijo en la parte inferior */
.ds-chat-input-container {
  padding: 16px 24px;
  border-top: 1px solid #e9ecef;
  margin: 0 auto;
  width: 100%;
  max-width: 800px;
  background-color: #f8f6f7;
  flex-shrink: 0;
}

.ds-input-wrapper {
  position: relative;
  display: flex;
  align-items: center;
}

.ds-chat-input {
  font-family: "Plus Jakarta Sans", sans-serif;
  width: 100%;
  padding: 12px 16px;
  padding-right: 48px;
  border: 1px solid #05050514;
  border-radius: 24px;
  font-size: 16px;
  background-color: #ffffff;
}

.ds-chat-input:focus {
  outline: none;
  border-color: #0066ff;
  background-color: white;
}

.ds-send-button {
  position: absolute;
  right: 12px;
  background: none;
  border: none;
  color: #6c757d;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 4px;
  border-radius: 50%;
}

.ds-send-button:hover:not(:disabled) {
  color: #0066ff;
  background-color: #e5e7eb;
}

.ds-send-button:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.ds-disclaimer {
  text-align: center;
  color: #6c757d;
  font-size: 12px;
  margin-top: 8px;
}

/* Personalización de la barra de desplazamiento */
.ds-chat-messages-container::-webkit-scrollbar {
  width: 8px;
}

.ds-chat-messages-container::-webkit-scrollbar-track {
  background: transparent;
}

.ds-chat-messages-container::-webkit-scrollbar-thumb {
  background-color: rgba(0, 0, 0, 0.2);
  border-radius: 4px;
}

.ds-chat-messages-container::-webkit-scrollbar-thumb:hover {
  background-color: rgba(0, 0, 0, 0.3);
}

/* Sidebar móvil como overlay */
.ds-sidebar-mobile-closed {
  transform: translateX(-100%);
  position: fixed;
  left: 0;
  top: 0;
  height: 100vh;
  width: 70vw;
  z-index: 1001;
  transition: transform 0.4s cubic-bezier(0.4, 0, 0.2, 1);
}

.ds-sidebar-mobile-open {
  transform: translateX(0);
  position: fixed;
  left: 0;
  top: 0;
  height: 100vh;
  width: 70vw;
  z-index: 1001;
  box-shadow: 2px 0 10px rgba(0, 0, 0, 0.1);
  transition: transform 0.4s cubic-bezier(0.4, 0, 0.2, 1);
}

.ds-mobile-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0, 0, 0, 0.5);
  z-index: 1000;
  opacity: 0;
  animation: fadeIn 0.3s ease forwards;
}

@keyframes fadeIn {
  to {
    opacity: 1;
  }
}

/* Prevenir overflow horizontal */
* {
  box-sizing: border-box;
}

.ds-home-container {
  max-width: 100vw;
  overflow-x: hidden;
}

.ds-main-content {
  min-width: 0;
  flex: 1;
}

.ds-chat-messages-container {
  min-width: 0;
}

/* Contenido de secciones */
.ds-section-content {
  flex: 1;
  overflow-y: visible;
}

/* Footer del usuario mejorado */
.ds-user-section {
  display: flex;
  align-items: center;
  justify-content: space-between;
  border-radius: 8px;
  background-color: #f9fafb;
}

.ds-user-info {
  display: flex;
  align-items: center;
  gap: 8px;
}

.ds-collapse-button {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 40px;
  height: 30px;
  font-size: 12px;
  background: none;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  color: #6b7280;
  transition: all 0.2s ease;
}

.ds-collapse-button svg {
  flex-shrink: 0;
  transition: all 0.3s ease;
}

.ds-collapse-button:hover {
  background-color: #e5e7eb;
  color: #374151;
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .ds-home-container {
    overflow-x: hidden;
    /* Fixes específicos para Safari móvil */
    height: 100vh;
    height: 100dvh;
    height: -webkit-fill-available;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
  }

  /* En móvil, el main content siempre ocupa 100% */
  .ds-main-content {
    width: 100vw;
    margin-left: 0;
  }

  .ds-chat-messages {
    padding: 16px;
    max-width: 100%;
  }

  .ds-message {
    max-width: 100%;
  }

  .ds-bot-message {
    max-width: 95%;
  }

  .ds-user-message {
    max-width: 85%;
  }

  .ds-chat-input-container {
    padding: 12px 16px;
    max-width: 100%;
  }

  .ds-message-content {
    word-break: break-word;
    overflow-wrap: break-wrap;
    max-width: 100%;
  }

  .ds-message-content p {
    word-break: break-word;
    overflow-wrap: break-wrap;
  }

  /* Ocultar elementos del sidebar colapsado en móvil */
  .ds-sidebar-collapsed-content {
    display: none;
  }

  /* Ajustar header en móvil */
  .ds-chat-header {
    padding: 12px 16px;
  }

  .ds-mobile-menu-button {
    left: 12px;
  }

  /* Ajustar sidebar móvil */
  .ds-sidebar-mobile-open,
  .ds-sidebar-mobile-closed {
    width: 75vw;
    height: 100vh;
    height: 100dvh;
    height: -webkit-fill-available;
  }

  /* Asegurar que el sidebar content sea scrolleable en móvil */
  .ds-sidebar-content {
    overflow-y: auto;
    -webkit-overflow-scrolling: touch;
  }

  /* Prevenir zoom en inputs en iOS */
  .ds-chat-input {
    font-size: 16px;
  }

  /* Fixes para Safari móvil - prevenir movimiento de página */
  body {
    position: fixed;
    overflow: hidden;
    width: 100%;
    height: 100vh;
    height: 100dvh;
    height: -webkit-fill-available;
  }
}

/* Desktop optimizations - more compact design */
@media (min-width: 769px) {
  /* Ocultar el botón de nuevo chat en desktop */
  .ds-mobile-new-chat-button {
    display: none;
  }

  .ds-sidebar-header {
    padding: 12px;
  }

  .logo-sidebar-open {
    height: 39px;
  }

  .ds-search-container {
    padding: 8px 12px;
  }

  .ds-search-input {
    font-family: "Plus Jakarta Sans", sans-serif;
    padding: 6px 10px 6px 28px;
    font-size: 13px;
    border-radius: 0.75rem !important;
  }

  .ds-search-icon {
    left: 10px;
  }

  .ds-sidebar-content {
    padding: 12px;
    gap: 6px;
  }

  .ds-section-title {
    font-size: 10px;
    margin: 0 0 8px 0;
    padding: 0 6px;
  }

  .ds-chat-item {
    padding: 6px 10px;
    gap: 10px;
    margin-bottom: 2px;
  }

  .ds-chat-title {
    font-size: 13px;
  }

  .ds-chat-timestamp {
    font-size: 11px;
  }

  .ds-footer-button {
    padding: 6px 10px;
    font-size: 13px;
    gap: 10px;
  }

  .ds-sidebar-footer {
    padding: 12px;
    gap: 6px;
  }

  .ds-chat-header {
    padding: 12px 20px;
  }

  .ds-chat-header h1 {
    font-size: 18px;
  }

  .ds-welcome-logo img {
    width: 45px;
    height: 45px;
  }

  .ds-welcome-message h2 {
    font-size: 20px;
  }

  .ds-welcome-message p {
    font-size: 14px;
  }

  .ds-chat-messages {
    padding: 20px;
    gap: 20px;
  }

  .ds-avatar-image {
    height: 32px;
    width: 32px;
  }

  .ds-message-content h2 {
    font-size: 16px;
  }

  .ds-message-content p {
    font-size: 14px;
  }

  .ds-chat-input-container {
    padding: 12px 20px;
  }

  .ds-chat-input {
    padding: 22px 14px;
    padding-right: 44px;
    font-size: 14px;
    border-radius: 0.75rem;
  }

  .ds-disclaimer {
    font-size: 11px;
  }

  .options-sidebar {
    font-size: 13px;
  }

  .ds-show-more-button {
    padding: 6px 10px;
    font-size: 13px;
  }

  .ds-chat-section {
    margin-bottom: 20px;
  }

  .ds-new-chat-highlight {
    margin-bottom: 12px;
  }

  /* Restaurar body en desktop */
  body {
    position: static;
    overflow: auto;
    height: auto;
  }

  .ds-chat-delete-button {
    width: 24px;
    height: 24px;
  }
}

/* Fixes específicos para Safari móvil */
@supports (-webkit-touch-callout: none) {
  @media (max-width: 768px) {
    .ds-home-container {
      height: -webkit-fill-available;
    }

    .ds-sidebar-mobile-open,
    .ds-sidebar-mobile-closed {
      height: -webkit-fill-available;
    }

    body {
      height: -webkit-fill-available;
    }

    /* Prevenir el rubber band scrolling */
    body {
      overscroll-behavior: none;
      -webkit-overflow-scrolling: auto;
    }
  }
}

.ds-search-input::placeholder {
  color: #9ca3af;
  font-size: 14px;
}

.ds-user-modal-sidebar {
  padding: 12px;
  gap: 8px;
  display: flex;
  flex-direction: column;
}

/* Modal del usuario - Ventana centrada */
.ds-user-modal-overlay {
  position: fixed !important;
  top: 0 !important;
  left: 0 !important;
  right: 0 !important;
  bottom: 0 !important;
  background-color: rgba(0, 0, 0, 0.5) !important;
  z-index: 9999 !important;
  display: flex !important;
  align-items: center !important;
  justify-content: center !important;
  padding: 20px !important;
}

.ds-user-modal {
  background: #f8f6f7;
  border-radius: 16px !important;
  width: 100% !important;
  max-width: 700px !important;
  height: 500px !important;
  box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04) !important;
  position: relative !important;
  display: flex !important;
  flex-direction: column !important;
}

.ds-user-modal-header {
  display: flex !important;
  align-items: center !important;
  justify-content: space-between !important;
  padding: 20px 24px !important;
  flex-shrink: 0 !important;
}

.ds-user-modal-title {
  font-size: 18px !important;
  font-weight: 600 !important;
  color: #111827 !important;
  margin: 0 !important;
}

.ds-user-modal-close {
  background: none !important;
  border: none !important;
  font-size: 20px !important;
  color: #6b7280 !important;
  cursor: pointer !important;
  padding: 4px !important;
  border-radius: 4px !important;
  display: flex !important;
  align-items: center !important;
  justify-content: center !important;
  transition: all 0.2s ease !important;
}

.ds-user-modal-close:hover {
  background-color: #f3f4f6 !important;
  color: #374151 !important;
}

.ds-user-modal-content {
  display: flex !important;
  flex: 1 !important;
  overflow: hidden !important;
}

.ds-user-modal-main {
  flex: 1 !important;
  padding: 24px !important;
  overflow-y: auto !important;
}

.ds-modal-nav-item {
  display: flex;
  align-items: center;
  gap: 12px;
  padding: 12px;
  margin-bottom: 4px;
  border: none;
  background: none;
  border-radius: 0.75rem;
  cursor: pointer;
  font-size: 12px;
  line-height: 1.25rem;
  font-weight: 700;
  color: #6b7280;
  transition: all 0.2s ease;
  text-align: left;
  width: 100%;
  font-family: "Plus Jakarta Sans", sans-serif;
}

.ds-modal-nav-item:hover {
  background-color: #eeeced !important;
  color: #374151 !important;
}

.ds-modal-nav-item.active {
  background-color: #e5e7eb;
  color: #111827;
  font-weight: 700;
}

.ds-modal-nav-item svg {
  flex-shrink: 0 !important;
  width: 16px !important;
  height: 16px !important;
}

.ds-user-profile-card {
  display: flex !important;
  align-items: center !important;
  gap: 16px !important;
  border-radius: 8px !important;
}

.ds-user-avatar-large {
  width: 48px !important;
  height: 48px !important;
  border-radius: 50% !important;
  background-color: #009688 !important;
  color: white !important;
  display: flex !important;
  justify-content: center !important;
  align-items: center !important;
  font-weight: bold !important;
  font-size: 18px !important;
  flex-shrink: 0 !important;
}

.ds-user-info-large {
  flex: 1 !important;
}

.ds-user-name-large {
  font-size: 16px !important;
  font-weight: 600 !important;
  color: #111827 !important;
  margin-bottom: 2px !important;
}

.ds-user-email-large {
  font-size: 14px !important;
  color: #6b7280 !important;
}

.ds-admin-btn {
  background: none !important;
  border: 1px solid #05050514;
  border-radius: 6px !important;
  padding: 6px 12px !important;
  font-size: 14px !important;
  color: #374151 !important;
  cursor: pointer !important;
  transition: all 0.2s ease !important;
  font-weight: 500 !important;
}

.ds-admin-btn:hover {
  background-color: #e5e7eb !important;
  border-color: 1px solid #05050514;
}

.ds-connect-section {
  display: flex !important;
  align-items: center !important;
  justify-content: space-between !important;
  padding: 16px 0 !important;
  border-bottom: 1px solid #e5e7eb !important;
  margin-bottom: 16px !important;
}

.ds-connect-text {
  font-size: 14px !important;
  color: #374151 !important;
}

.ds-connect-btn {
  background-color: #1976d2 !important;
  color: white !important;
  border: none !important;
  border-radius: 6px !important;
  padding: 6px 12px !important;
  font-size: 14px !important;
  cursor: pointer !important;
  transition: background-color 0.2s ease !important;
  font-weight: 500 !important;
}

.ds-connect-btn:hover {
  background-color: #1565c0 !important;
}

.ds-language-section {
  display: flex !important;
  align-items: center !important;
  justify-content: space-between !important;
  padding: 16px 0 !important;
  border-bottom: 1px solid #e5e7eb !important;
  margin-bottom: 16px !important;
}

.ds-language-text {
  font-size: 14px !important;
  color: #374151 !important;
}

.ds-logout-btn {
  background-color: #dc2626 !important;
  color: white !important;
  border: none !important;
  border-radius: 6px !important;
  padding: 6px 12px !important;
  font-size: 14px !important;
  cursor: pointer !important;
  transition: background-color 0.2s ease !important;
  font-weight: 500 !important;
}

.ds-logout-btn:hover {
  background-color: #b91c1c !important;
}

.ds-id-section {
  font-size: 12px !important;
  color: #9ca3af !important;
  margin-bottom: 16px !important;
}

.ds-promo-section {
  background: linear-gradient(135deg, #1a1a1a 0%, #2d2d2d 100%) !important;
  border-radius: 12px !important;
  padding: 16px !important;
  color: white !important;
}

.ds-promo-header {
  display: flex !important;
  align-items: center !important;
  gap: 8px !important;
  margin-bottom: 8px !important;
}

.ds-promo-logo {
  width: 20px !important;
  height: 20px !important;
  background-color: #4ade80 !important;
  border-radius: 4px !important;
  display: flex !important;
  align-items: center !important;
  justify-content: center !important;
  font-weight: bold !important;
  font-size: 10px !important;
  color: #000 !important;
}

.ds-promo-title {
  font-size: 14px !important;
  font-weight: 600 !important;
  margin: 0 !important;
}

.ds-promo-text {
  font-size: 12px !important;
  color: #d1d5db !important;
  margin-bottom: 12px !important;
}

.ds-promo-btn {
  background-color: white !important;
  color: #1a1a1a !important;
  border: none !important;
  border-radius: 6px !important;
  padding: 8px 16px !important;
  font-size: 12px !important;
  font-weight: 600 !important;
  cursor: pointer !important;
  transition: all 0.2s ease !important;
}

.ds-promo-btn:hover {
  background-color: #f3f4f6 !important;
}

.ds-sidebar-content::-webkit-scrollbar {
  width: 6px;
}

.ds-sidebar-content::-webkit-scrollbar-track {
  background: transparent;
}

.ds-sidebar-content::-webkit-scrollbar-thumb {
  background-color: rgba(0, 0, 0, 0.15);
  border-radius: 3px;
  transition: background-color 0.2s ease;
}

.ds-sidebar-content::-webkit-scrollbar-thumb:hover {
  background-color: rgba(0, 0, 0, 0.25);
}

.ds-chat-messages-container::-webkit-scrollbar {
  width: 8px;
}

.ds-chat-messages-container::-webkit-scrollbar-track {
  background: transparent;
}

.ds-chat-messages-container::-webkit-scrollbar-thumb {
  background-color: rgba(0, 0, 0, 0.2);
  border-radius: 4px;
}

.ds-chat-messages-container::-webkit-scrollbar-thumb:hover {
  background-color: rgba(0, 0, 0, 0.3);
}

.ds-admin-options {
  display: flex;
  flex-direction: column;
  gap: 16px;
}

.ds-admin-options h3 {
  margin: 0 0 8px 0;
  font-size: 18px;
  font-weight: 600;
  color: #333;
}

.ds-admin-option-btn {
  display: flex;
  align-items: center;
  gap: 12px;
  padding: 12px 16px;
  border: 1px solid #e5e7eb;
  background: #ffffff;
  border-radius: 8px;
  cursor: pointer;
  font-size: 14px;
  color: #333;
  transition: all 0.2s ease;
  text-align: left;
  width: 100%;
}

.ds-admin-option-btn:hover {
  background-color: #f9fafb;
  border-color: #d1d5db;
}

.ds-admin-option-btn svg {
  width: 20px;
  height: 20px;
  flex-shrink: 0;
}

.ds-admin-option-btn.ds-admin-danger {
  border-color: #fecaca;
  color: #dc2626;
}

.ds-admin-option-btn.ds-admin-danger:hover {
  background-color: #fef2f2;
  border-color: #f87171;
}

/* Modal de búsqueda - Exactamente como buscarB.png */
.ds-search-modal-overlay {
  position: fixed !important;
  top: 0 !important;
  left: 0 !important;
  right: 0 !important;
  bottom: 0 !important;
  background-color: rgba(0, 0, 0, 0.5) !important;
  z-index: 9999 !important;
  display: flex !important;
  align-items: center !important;
  justify-content: center !important;
  padding: 20px !important;
}

.ds-search-modal {
  background: #ffff;
  border-radius: 16px !important;
  width: 100% !important;
  max-width: 700px !important;
  height: 500px !important;
  box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04) !important;
  position: relative !important;
  display: flex !important;
  flex-direction: column !important;
  overflow: hidden;
}

.ds-search-field-container {
  flex-shrink: 0;
  border-bottom: 1px solid #e5e7eb;
}

.ds-search-results-container {
  flex: 1;
  overflow-y: auto;
  padding: 0;
}



.ds-search-field-wrapper {
  position: relative;
  display: flex;
  align-items: center;
}

.ds-search-field-input {
  width: 100%;
  padding: 12px 48px 12px 33px;
border: none;
  font-size: 16px;
  background-color: #ffff;
  transition: all 0.2s ease;
  font-family: "Plus Jakarta Sans", sans-serif;
}

.ds-search-field-input:focus {
  outline: none;

  background-color: white;

}

.ds-search-field-input::placeholder {
  color: #9ca3af;
}

.ds-search-field-icon {
  position: absolute;
  right: 16px;
  color: #9ca3af;
  pointer-events: none;
}

/* Secciones */
.ds-search-section {
  margin-bottom: 8px;
}

.ds-search-section:last-child {
  margin-bottom: 0;
}

.ds-search-section-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 13px 33px;
  margin-bottom: 4px;
  border-top: 1px solid #05050514;
}

.ds-search-section-title {
  font-size: 14px;
  font-weight: 600;
  color: #374151;
}

.ds-search-section-action {
  font-size: 14px;
  color: #9ca3af;
  cursor: pointer;
  transition: color 0.2s ease;
}

.ds-search-section-action:hover {
  color: #6b7280;
}

/* Acciones */
.ds-search-actions {
  padding: 0 24px 16px 24px;
}

.ds-search-action-item {
  display: flex;
  align-items: center;
  gap: 12px;
  width: 100%;
  padding: 12px 16px;
  border: none;
  background: transparent;
  border-radius: 8px;
  cursor: pointer;
  font-size: 14px;
  color: #374151;
  transition: all 0.2s ease;
  text-align: left;
  font-family: "Plus Jakarta Sans", sans-serif;
}

.ds-search-action-item:hover {
  background-color: #f9fafb;
}

.ds-search-action-icon {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 20px;
  height: 20px;
  color: #6b7280;
}

/* Resultados de búsqueda */
.ds-search-results {
  padding: 0 24px 16px 24px;
  display: flex;
  flex-direction: column;
  gap: 2px;
}

.ds-search-result-item {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 13px 10px;
  border-radius: 8px;
  cursor: pointer;
  transition: all 0.2s ease;
}

.ds-search-result-item:hover {
  background-color: #f9fafb;
}

.ds-search-result-title {
  font-size: 14px;
  color: #374151;
  font-weight: 400;
  flex: 1;
  margin-right: 16px;
}

.ds-search-result-time {
  font-size: 14px;
  color: #9ca3af;
  flex-shrink: 0;
}

/* Scrollbar para el modal de búsqueda */
.ds-search-results-container::-webkit-scrollbar {
  width: 6px;
}

.ds-search-results-container::-webkit-scrollbar-track {
  background: transparent;
}

.ds-search-results-container::-webkit-scrollbar-thumb {
  background-color: rgba(0, 0, 0, 0.15);
  border-radius: 3px;
  transition: background-color 0.2s ease;
}

.ds-search-results-container::-webkit-scrollbar-thumb:hover {
  background-color: rgba(0, 0, 0, 0.25);
}

/* Responsive para el modal de búsqueda */
@media (max-width: 768px) {
  .ds-search-modal {
    max-width: 95vw !important;
    max-height: 90vh !important;
    margin: 20px;
  }

  .ds-search-section-header {
    padding: 8px 20px;
  }

  .ds-search-actions {
    padding: 0 20px 12px 20px;
  }

  .ds-search-results {
    padding: 0 20px 12px 20px;
  }
}


