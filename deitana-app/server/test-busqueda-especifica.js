// =====================================
// TEST: B√öSQUEDA ESPEC√çFICA DE CAMBIO DE AGUA
// =====================================

const ragInteligente = require('./admin/core/ragInteligente');

async function testBusquedaEspecifica() {
    console.log('üß™ [TEST] === TESTEANDO B√öSQUEDA ESPEC√çFICA DE CAMBIO DE AGUA ===');
    
    try {
        // 1. Probar la consulta exacta
        const consulta = "¬øCada cu√°ntas bandejas se cambia el agua?";
        console.log(`\nüìù [TEST] Consulta: "${consulta}"`);
        
        const resultadoRAG = await ragInteligente.recuperarConocimientoRelevante(consulta, 'test-especifico');
        
        console.log('\nüìä [TEST] Resultado del RAG:');
        console.log(resultadoRAG);
        
        // 2. Verificar si contiene la informaci√≥n espec√≠fica
        const contiene9000 = resultadoRAG.includes('9000');
        const contieneCambioAgua = resultadoRAG.toLowerCase().includes('cambio de agua');
        const contieneBandejas = resultadoRAG.toLowerCase().includes('bandejas');
        
        console.log('\nüîç [TEST] An√°lisis del resultado:');
        console.log(`‚Ä¢ Contiene "9000": ${contiene9000 ? 'S√ç' : 'NO'}`);
        console.log(`‚Ä¢ Contiene "cambio de agua": ${contieneCambioAgua ? 'S√ç' : 'NO'}`);
        console.log(`‚Ä¢ Contiene "bandejas": ${contieneBandejas ? 'S√ç' : 'NO'}`);
        
        if (contiene9000 && contieneCambioAgua) {
            console.log('‚úÖ [TEST] ¬°√âXITO! El RAG encontr√≥ la informaci√≥n espec√≠fica');
        } else {
            console.log('‚ùå [TEST] El RAG NO encontr√≥ la informaci√≥n espec√≠fica');
            
            // 3. Probar b√∫squeda vectorial directa
            console.log('\nüîç [TEST] Probando b√∫squeda vectorial directa...');
            
            const resultadoVectorial = await ragInteligente.buscarVectorial(consulta);
            
            console.log('\nüìä [TEST] Resultado de b√∫squeda vectorial directa:');
            console.log(resultadoVectorial.substring(0, 500) + (resultadoVectorial.length > 500 ? '...' : ''));
            
            // 4. Verificar si la b√∫squeda vectorial encontr√≥ la informaci√≥n
            const vectorialContiene9000 = resultadoVectorial.includes('9000');
            const vectorialContieneCambioAgua = resultadoVectorial.toLowerCase().includes('cambio de agua');
            
            console.log('\nüîç [TEST] An√°lisis de b√∫squeda vectorial:');
            console.log(`‚Ä¢ Contiene "9000": ${vectorialContiene9000 ? 'S√ç' : 'NO'}`);
            console.log(`‚Ä¢ Contiene "cambio de agua": ${vectorialContieneCambioAgua ? 'S√ç' : 'NO'}`);
            
            if (!vectorialContiene9000) {
                console.log('\n‚ö†Ô∏è [TEST] PROBLEMA: La b√∫squeda vectorial no encuentra la informaci√≥n espec√≠fica');
                console.log('Posibles causas:');
                console.log('1. El chunking no est√° capturando bien esa l√≠nea espec√≠fica');
                console.log('2. El embedding de la consulta no es similar al chunk que contiene la informaci√≥n');
                console.log('3. La informaci√≥n est√° en un chunk muy grande y se pierde en el contexto');
            }
        }
        
    } catch (error) {
        console.error('‚ùå [TEST] Error en el test:', error);
    }
}

// Ejecutar el test
testBusquedaEspecifica(); 