const { recuperarConocimientoRelevante } = require('./admin/core/ragInteligente');
const fs = require('fs');
const path = require('path');

// ========================================
// SISTEMA DE DIAGN√ìSTICO RAG EMPRESARIAL
// ========================================

class DiagnosticoRAGEmpresarial {
    constructor() {
        this.problemas = [];
        this.estadisticas = {
            chunksTotales: 0,
            chunksProblematicos: 0,
            palabrasClaveNoEncontradas: [],
            seccionesProblematicas: [],
            tiemposBusqueda: []
        };
    }

    async ejecutarDiagnosticoCompleto() {
        console.log('üîç [DIAGN√ìSTICO] Iniciando an√°lisis completo del RAG empresarial...');
        
        await this.analizarChunksPorSeccion();
        await this.testearBusquedasEspecificas();
        await this.verificarCoberturaTematica();
        await this.analizarTiemposRespuesta();
        
        await this.generarReporteDiagnostico();
    }

    async analizarChunksPorSeccion() {
        console.log('üìä [AN√ÅLISIS] Verificando chunks por secci√≥n...');
        
        const seccionesEsperadas = [
            'CLIENTES', 'ART√çCULOS', 'BANDEJAS', 'PROVEEDORES',
            'FORMAS DE PAGO', 'VENDEDORES', 'CASAS COMERCIALES',
            'ALMACENES', 'ENVASES DE VENTA', 'INVERNADEROS',
            'PRODUCTOS FITOSANITARIOS', 'SECTORES', 'SUSTRATOS',
            'UBICACIONES', 'ZONAS', 'DEPARTAMENTOS', 'PARTIDAS',
            'MAQUINARIA', 'T√âCNICOS'
        ];
        
        for (const seccion of seccionesEsperadas) {
            await this.verificarSeccionEspecifica(seccion);
        }
    }

    async verificarSeccionEspecifica(seccion) {
        console.log(`üîç [SECCI√ìN] Analizando: ${seccion}`);
        
        const consultasTest = [
            `informaci√≥n sobre ${seccion}`,
            `qu√© es ${seccion} en Semilleros Deitana`,
            `campos de ${seccion}`,
            `ejemplo de ${seccion}`
        ];
        
        let problemasSeccion = 0;
        
        for (const consulta of consultasTest) {
            try {
                const inicio = Date.now();
                const resultado = await recuperarConocimientoRelevante(consulta, 'sistema');
                const tiempo = Date.now() - inicio;
                
                this.estadisticas.tiemposBusqueda.push(tiempo);
                
                if (!resultado || resultado.length < 100) {
                    problemasSeccion++;
                    this.problemas.push({
                        tipo: 'SECCION_SIN_CONTEXTO',
                        seccion,
                        consulta,
                        problema: `No se encontr√≥ contexto suficiente para: ${consulta}`,
                        longitudResultado: resultado ? resultado.length : 0
                    });
                }
                
                // Verificar si contiene informaci√≥n relevante de la secci√≥n
                if (resultado && !this.contieneInformacionRelevante(resultado, seccion)) {
                    problemasSeccion++;
                    this.problemas.push({
                        tipo: 'SECCION_CONTEXTO_IRRELEVANTE',
                        seccion,
                        consulta,
                        problema: `El contexto no es espec√≠fico de la secci√≥n ${seccion}`,
                        contextoObtenido: resultado.substring(0, 200) + '...'
                    });
                }
                
            } catch (error) {
                problemasSeccion++;
                this.problemas.push({
                    tipo: 'ERROR_BUSQUEDA',
                    seccion,
                    consulta,
                    error: error.message
                });
            }
        }
        
        if (problemasSeccion > 2) {
            this.estadisticas.seccionesProblematicas.push({
                seccion,
                problemasDetectados: problemasSeccion,
                severidad: problemasSeccion > 3 ? 'CR√çTICA' : 'ALTA'
            });
        }
    }

    contieneInformacionRelevante(contexto, seccion) {
        const palabrasClaveSeccion = {
            'CLIENTES': ['cl_deno', 'cl_dom', 'cl_iban', 'cliente', 'denominaci√≥n'],
            'ART√çCULOS': ['ar_deno', 'ar_prv', 'art√≠culo', 'semilla', 'injerto'],
            'BANDEJAS': ['bn_alv', 'alv√©olos', 'bandeja', 'reutilizable'],
            'PROVEEDORES': ['pr_deno', 'pr_fpg', 'proveedor', 'suministro'],
            'ALMACENES': ['am_deno', 'am_caja', 'almac√©n', 'delegaci√≥n'],
            'PARTIDAS': ['par_enc', 'par_sem', 'partida', 'siembra', 'encargo'],
            'MAQUINARIA': ['ma_mod', 'ma_trab', 'maquinaria', 'equipo'],
            'T√âCNICOS': ['tn_deno', 'tn_act', 't√©cnico', 'trabajador']
        };
        
        const palabras = palabrasClaveSeccion[seccion] || [seccion.toLowerCase()];
        const contextoLower = contexto.toLowerCase();
        
        return palabras.some(palabra => contextoLower.includes(palabra.toLowerCase()));
    }

    async testearBusquedasEspecificas() {
        console.log('üéØ [B√öSQUEDAS] Testeando consultas espec√≠ficas...');
        
        const consultasEspecificas = [
            // Informaci√≥n b√°sica de la empresa
            { consulta: "Cu√°ndo fue fundada Semilleros Deitana", esperado: "1989" },
            { consulta: "D√≥nde est√° ubicada Semilleros Deitana", esperado: "Totana, Murcia" },
            { consulta: "Qu√© certificaci√≥n tiene Semilleros Deitana", esperado: "ISO 9001" },
            
            // Informaci√≥n t√©cnica espec√≠fica
            { consulta: "Qu√© significa CL_DENO", esperado: "denominaci√≥n del cliente" },
            { consulta: "Para qu√© sirve AR_PRV", esperado: "proveedor" },
            { consulta: "Qu√© es BN_ALV", esperado: "alv√©olos" },
            
            // Procesos espec√≠ficos
            { consulta: "Tiempos de siembra de sand√≠a", esperado: "35 d√≠as verano, 55-60 invierno" },
            { consulta: "Qu√© cultivos maneja Semilleros Deitana", esperado: "tomate, sand√≠a, pepino, mel√≥n" },
            
            // Estructura del ERP
            { consulta: "D√≥nde se encuentran los clientes en el ERP", esperado: "Archivos ‚Äì Generales ‚Äì Clientes" },
            { consulta: "Ubicaci√≥n de art√≠culos en el ERP", esperado: "Archivos ‚Äì Generales ‚Äì Art√≠culos" },
            
            // Datos espec√≠ficos de ejemplo
            { consulta: "Ejemplo de cliente Roberto", esperado: "SANZ ORADOR" },
            { consulta: "Tomate amarelo c√≥digo", esperado: "00000013" },
            { consulta: "Previcur energy dosis", esperado: "0.25" }
        ];
        
        for (const { consulta, esperado } of consultasEspecificas) {
            await this.verificarBusquedaEspecifica(consulta, esperado);
        }
    }

    async verificarBusquedaEspecifica(consulta, esperado) {
        try {
            const inicio = Date.now();
            const resultado = await recuperarConocimientoRelevante(consulta, 'sistema');
            const tiempo = Date.now() - inicio;
            
            this.estadisticas.tiemposBusqueda.push(tiempo);
            
            if (!resultado) {
                this.problemas.push({
                    tipo: 'BUSQUEDA_SIN_RESULTADO',
                    consulta,
                    esperado,
                    problema: 'No se obtuvo ning√∫n resultado'
                });
                return;
            }
            
            const resultadoLower = resultado.toLowerCase();
            const esperadoLower = esperado.toLowerCase();
            
            if (!resultadoLower.includes(esperadoLower)) {
                this.problemas.push({
                    tipo: 'RESULTADO_INCOMPLETO',
                    consulta,
                    esperado,
                    problema: `El resultado no contiene la informaci√≥n esperada: "${esperado}"`,
                    contextoObtenido: resultado.substring(0, 300) + '...'
                });
                
                this.estadisticas.palabrasClaveNoEncontradas.push({
                    consulta,
                    palabraEsperada: esperado,
                    contextoLength: resultado.length
                });
            } else {
                console.log(`‚úÖ [√âXITO] ${consulta} -> Encontrado: ${esperado}`);
            }
            
        } catch (error) {
            this.problemas.push({
                tipo: 'ERROR_BUSQUEDA_ESPECIFICA',
                consulta,
                esperado,
                error: error.message
            });
        }
    }

    async verificarCoberturaTematica() {
        console.log('üìã [COBERTURA] Verificando cobertura tem√°tica...');
        
        const temasImportantes = [
            'fundaci√≥n empresa',
            'ubicaci√≥n sede',
            'certificaciones calidad',
            'liderazgo hermanos Galera',
            't√©cnicas injerto',
            'cultivos principales',
            'estructura ERP',
            'gesti√≥n clientes',
            'control art√≠culos',
            'proceso partidas',
            'maquinaria empresa',
            'personal t√©cnico',
            'productos fitosanitarios',
            'tarifas precios',
            'almacenes delegaciones'
        ];
        
        for (const tema of temasImportantes) {
            await this.verificarCoberturaTema(tema);
        }
    }

    async verificarCoberturaTema(tema) {
        try {
            const resultado = await recuperarConocimientoRelevante(tema, 'sistema');
            
            if (!resultado || resultado.length < 150) {
                this.problemas.push({
                    tipo: 'COBERTURA_INSUFICIENTE',
                    tema,
                    problema: `Cobertura insuficiente para el tema: ${tema}`,
                    longitudContexto: resultado ? resultado.length : 0
                });
            }
            
        } catch (error) {
            this.problemas.push({
                tipo: 'ERROR_COBERTURA',
                tema,
                error: error.message
            });
        }
    }

    async analizarTiemposRespuesta() {
        console.log('‚è±Ô∏è [TIEMPOS] Analizando tiempos de respuesta...');
        
        if (this.estadisticas.tiemposBusqueda.length === 0) return;
        
        const tiempos = this.estadisticas.tiemposBusqueda;
        const promedio = tiempos.reduce((sum, t) => sum + t, 0) / tiempos.length;
        const maximo = Math.max(...tiempos);
        const minimo = Math.min(...tiempos);
        
        this.estadisticas.rendimiento = {
            tiempoPromedio: Math.round(promedio),
            tiempoMaximo: maximo,
            tiempoMinimo: minimo,
            busquedasLentas: tiempos.filter(t => t > 2000).length
        };
        
        if (promedio > 1500) {
            this.problemas.push({
                tipo: 'RENDIMIENTO_LENTO',
                problema: `Tiempo promedio muy alto: ${Math.round(promedio)}ms`,
                recomendacion: 'Optimizar √≠ndices de Pinecone o reducir tama√±o de chunks'
            });
        }
        
        if (this.estadisticas.rendimiento.busquedasLentas > 5) {
            this.problemas.push({
                tipo: 'MULTIPLES_BUSQUEDAS_LENTAS',
                problema: `${this.estadisticas.rendimiento.busquedasLentas} b√∫squedas > 2 segundos`,
                recomendacion: 'Revisar configuraci√≥n de embeddings'
            });
        }
    }

    async generarReporteDiagnostico() {
        const reporte = {
            resumen: {
                fecha: new Date().toISOString(),
                totalProblemas: this.problemas.length,
                problemasCriticos: this.problemas.filter(p => p.tipo.includes('SIN_RESULTADO')).length,
                seccionesProblematicas: this.estadisticas.seccionesProblematicas.length,
                rendimiento: this.estadisticas.rendimiento
            },
            problemasDetectados: this.problemas,
            estadisticas: this.estadisticas,
            recomendaciones: this.generarRecomendacionesEspecificas(),
            planAccion: this.generarPlanAccion()
        };
        
        // Guardar reporte
        const nombreArchivo = `diagnostico-rag-empresarial-${new Date().toISOString().split('T')[0]}.json`;
        const rutaArchivo = path.join(__dirname, 'reportes', nombreArchivo);
        
        // Crear directorio si no existe
        const dirReportes = path.dirname(rutaArchivo);
        if (!fs.existsSync(dirReportes)) {
            fs.mkdirSync(dirReportes, { recursive: true });
        }
        
        fs.writeFileSync(rutaArchivo, JSON.stringify(reporte, null, 2));
        
        // Mostrar resumen en consola
        console.log('\nüéØ [DIAGN√ìSTICO COMPLETADO] ========================================');
        console.log(`üìä Total problemas detectados: ${reporte.resumen.totalProblemas}`);
        console.log(`üö® Problemas cr√≠ticos: ${reporte.resumen.problemasCriticos}`);
        console.log(`üìã Secciones problem√°ticas: ${reporte.resumen.seccionesProblematicas}`);
        
        if (this.estadisticas.rendimiento) {
            console.log(`‚è±Ô∏è Tiempo promedio: ${this.estadisticas.rendimiento.tiempoPromedio}ms`);
            console.log(`üêå B√∫squedas lentas: ${this.estadisticas.rendimiento.busquedasLentas}`);
        }
        
        console.log(`üìÅ Reporte guardado: ${rutaArchivo}`);
        console.log('========================================');
        
        return reporte;
    }

    generarRecomendacionesEspecificas() {
        const recomendaciones = [];
        
        // Analizar tipos de problemas m√°s frecuentes
        const tiposProblemas = {};
        this.problemas.forEach(p => {
            tiposProblemas[p.tipo] = (tiposProblemas[p.tipo] || 0) + 1;
        });
        
        for (const [tipo, count] of Object.entries(tiposProblemas)) {
            if (count >= 3) {
                switch (tipo) {
                    case 'SECCION_SIN_CONTEXTO':
                        recomendaciones.push({
                            prioridad: 'CR√çTICA',
                            problema: `${count} secciones sin contexto adecuado`,
                            solucion: 'Re-procesar informacionEmpresa.txt con chunks m√°s espec√≠ficos por secci√≥n',
                            accion: 'Ejecutar script de re-indexaci√≥n con separaci√≥n por secciones'
                        });
                        break;
                        
                    case 'RESULTADO_INCOMPLETO':
                        recomendaciones.push({
                            prioridad: 'ALTA',
                            problema: `${count} b√∫squedas con resultados incompletos`,
                            solucion: 'Mejorar embeddings y aumentar contexto de chunks relacionados',
                            accion: 'Ajustar par√°metros de similitud en Pinecone'
                        });
                        break;
                        
                    case 'ERROR_BUSQUEDA':
                        recomendaciones.push({
                            prioridad: 'CR√çTICA',
                            problema: `${count} errores en b√∫squedas`,
                            solucion: 'Revisar configuraci√≥n de Pinecone y conexi√≥n',
                            accion: 'Verificar API keys y configuraci√≥n de conexi√≥n'
                        });
                        break;
                }
            }
        }
        
        // Recomendaciones de rendimiento
        if (this.estadisticas.rendimiento && this.estadisticas.rendimiento.tiempoPromedio > 1000) {
            recomendaciones.push({
                prioridad: 'MEDIA',
                problema: 'Tiempos de respuesta lentos',
                solucion: 'Optimizar configuraci√≥n de Pinecone y reducir tama√±o de chunks',
                accion: 'Revisar configuraci√≥n de similarity_top_k y chunk_size'
            });
        }
        
        return recomendaciones;
    }

    generarPlanAccion() {
        return {
            inmediato: [
                'Ejecutar re-indexaci√≥n completa de informacionEmpresa.txt',
                'Verificar conectividad con Pinecone',
                'Revisar configuraci√≥n de embeddings'
            ],
            cortoplazo: [
                'Optimizar chunks por secciones espec√≠ficas',
                'Ajustar par√°metros de similitud',
                'Implementar cache de b√∫squedas frecuentes'
            ],
            mediano_plazo: [
                'Crear embeddings especializados por tipo de consulta',
                'Implementar sistema de feedback de calidad',
                'Monitoreo autom√°tico de rendimiento RAG'
            ]
        };
    }
}

// ========================================
// EJECUCI√ìN PRINCIPAL
// ========================================

async function main() {
    console.log('üîç [INICIO] Sistema de Diagn√≥stico RAG Empresarial');
    console.log('üìã [INFO] Analizando problemas espec√≠ficos del RAG');
    console.log('üéØ [OBJETIVO] Identificar y solucionar fallos en informacionEmpresa.txt');
    
    const diagnostico = new DiagnosticoRAGEmpresarial();
    
    try {
        await diagnostico.ejecutarDiagnosticoCompleto();
        
        console.log('\n‚úÖ [COMPLETADO] Diagn√≥stico finalizado');
        console.log('üìÅ [RESULTADO] Revisa el archivo de reporte generado');
        console.log('üîß [SIGUIENTE] Implementa el plan de acci√≥n recomendado');
        
    } catch (error) {
        console.error('‚ùå [ERROR CR√çTICO] El diagn√≥stico fall√≥:', error);
        console.error('üîç [DEBUG] Stack trace:', error.stack);
    }
}

// Ejecutar si es llamado directamente
if (require.main === module) {
    main();
}

module.exports = { DiagnosticoRAGEmpresarial }; 