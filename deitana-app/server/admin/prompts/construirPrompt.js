// =====================================
// CONSTRUCTOR DIN√ÅMICO DE PROMPTS OPTIMIZADO
// =====================================

const { promptBase } = require('./base');
const { sqlRules } = require('./sqlRules');
const { formatoRespuesta } = require('./formatoRespuesta');
const { ejemplosSQL, ejemplosConversacion } = require('./ejemplos');
const { comportamiento, comportamientoAsistente } = require('./comportamiento');
const { comportamientoChatGPT } = require('./comportamientoChatGPT');
const ragInteligente = require('../core/ragInteligente');

/**
 * Analiza la intenci√≥n del usuario usando patrones b√°sicos (SIN IA)
 * Esto elimina la primera llamada costosa a OpenAI
 */
function analizarIntencionBasica(mensaje) {
    console.log('üß† [INTENCION-BASICA] Analizando consulta con patrones...');
    
    const mensajeLower = mensaje.toLowerCase();
    
    // Patrones de saludo
    if (/^(hola|buenos|buenas|saludos|hello|hi)\b/.test(mensajeLower)) {
        return { tipo: 'saludo', complejidad: 'simple', requiereIA: false };
    }
    
    // Patrones de comandos de memoria
    if (/^(recuerda|guarda|anota|apunta|memoriza)\b/.test(mensajeLower)) {
        return { tipo: 'memoria', complejidad: 'simple', requiereIA: false };
    }
    
    // Patrones de consultas que requieren RAG + SQL combinado (DEBE IR ANTES DE CONVERSACION)
    const consultasRAGSQL = /(qu√© tipos?|que tipos?|cu√°les?|cuales?|c√≥mo se|como se|procedimiento|proceso|funci√≥n|funcion|utiliza|usa|emplea|manual|entrada|c√°mara|camara|germinaci√≥n|germinacion)/i;
    const entidadesERP = /(cliente|proveedor|articulo|bandeja|tecnico|accion|pedido|factura|almacen|invernadero)/i;
    
    // Si pregunta sobre tipos, procedimientos, funciones, manuales, etc. Y menciona entidades ERP
    if (consultasRAGSQL.test(mensajeLower) && entidadesERP.test(mensajeLower)) {
        return { tipo: 'rag_sql', complejidad: 'media', requiereIA: true };
        }

    // Si pregunta sobre manuales, procesos, c√°maras, etc. (sin entidades ERP espec√≠ficas)
    const consultasRAGPuro = /(manual|proceso|procedimiento|c√°mara|camara|germinaci√≥n|germinacion|entrada|siembra|cultivo|injerto|qu√© se hace|que se hace|c√≥mo es|como es)/i;
    if (consultasRAGPuro.test(mensajeLower)) {
        return { tipo: 'rag_sql', complejidad: 'media', requiereIA: true };
        }
    
    // Patrones de consultas conversacionales (DEBE IR DESPU√âS DE RAG)
    if (/^(qu√© es|que es|explica|c√≥mo|como|cu√°l|cual|por qu√©|porque|ayuda)\b/.test(mensajeLower)) {
        return { tipo: 'conversacion', complejidad: 'media', requiereIA: true };
    }
    
    // Patrones de consultas complejas SQL
    if (/\b(an√°lisis|an√°lisys|compara|comparison|tendencia|trend|reporte|report|estad√≠stica|statistic)\b/.test(mensajeLower)) {
        return { tipo: 'sql', complejidad: 'compleja', requiereIA: true };
    }
    
    // Patrones de consultas SQL puras (listados, cantidades, etc.)
    const consultasSQLPuras = /(cu√°ntos?|cuantas?|listar|lista|mostrar|buscar|encontrar|total|suma|promedio)/i;
    if (consultasSQLPuras.test(mensajeLower) && entidadesERP.test(mensajeLower)) {
        return { tipo: 'sql', complejidad: 'simple', requiereIA: true };
    }
    
    // Por defecto: conversaci√≥n
    console.log('üéØ [INTENCION-BASICA] Clasificaci√≥n: conversacion (default)');
    return { tipo: 'conversacion', complejidad: 'media', requiereIA: true };
}

/**
 * Detecta qu√© tablas del mapaERP son relevantes usando mapeo directo (SIN IA)
 * Esto elimina la segunda llamada costosa a OpenAI
 */
function detectarTablasRelevantesBasico(mensaje, mapaERP) {
    console.log('üìä [TABLAS-BASICAS] Detectando tablas con mapeo directo...');
    
    const mensajeLower = mensaje.toLowerCase();
    const tablasRelevantes = [];
    
    // Mapeo directo de palabras clave a tablas
    const mapaPalabras = {
        'cliente': ['clientes'],
        'clientes': ['clientes'],
        'proveedor': ['proveedores'], 
        'proveedores': ['proveedores'],
        'articulo': ['articulos'],
        'articulos': ['articulos'],
        'producto': ['articulos'],
        'productos': ['articulos'],
        'bandeja': ['bandejas'],
        'bandejas': ['bandejas'],
        'tecnico': ['tecnicos'],
        'tecnicos': ['tecnicos'],
        'empleado': ['tecnicos'],
        'empleados': ['tecnicos'],
        'accion': ['acciones_com'],
        'acciones': ['acciones_com'],
        'pedido': ['pedidos'],
        'pedidos': ['pedidos'],
        'factura': ['facturas-e', 'facturas-r'],
        'facturas': ['facturas-e', 'facturas-r'],
        'albaran': ['alb-venta', 'alb-compra'],
        'albaranes': ['alb-venta', 'alb-compra'],
        'almacen': ['almacenes'],
        'almacenes': ['almacenes'],
        'invernadero': ['invernaderos'],
        'invernaderos': ['invernaderos']
    };
    
    // Buscar coincidencias directas
    for (const [palabra, tablas] of Object.entries(mapaPalabras)) {
        if (mensajeLower.includes(palabra)) {
            tablasRelevantes.push(...tablas);
        }
    }
    
    // Eliminar duplicados
    const tablasUnicas = [...new Set(tablasRelevantes)];
    
    console.log('üìä [TABLAS-BASICAS] Tablas detectadas:', tablasUnicas);
    return tablasUnicas;
}

/**
 * Construye el contexto del mapaERP de forma selectiva
 */
function construirContextoMapaERP(tablasRelevantes, mapaERP) {
    if (!tablasRelevantes || tablasRelevantes.length === 0 || !mapaERP) {
        console.log('‚ö†Ô∏è [MAPA-ERP] No se incluye contexto - tablas:', tablasRelevantes, 'mapaERP:', !!mapaERP);
        return ''; // No incluir mapaERP si no es necesario o no existe
    }
    
    let contexto = '\n=== ESTRUCTURA DE DATOS RELEVANTE ===\n';
    
    tablasRelevantes.forEach(tabla => {
        if (mapaERP && mapaERP[tabla]) {
            console.log(`üìã [MAPA-ERP] Incluyendo tabla: ${tabla}`);
            contexto += `\n${tabla}: ${mapaERP[tabla].descripcion || 'Sin descripci√≥n'}\n`;
            
            if (mapaERP[tabla].columnas) {
                // Incluir TODAS las columnas importantes, no solo las primeras 8
                const columnas = Object.entries(mapaERP[tabla].columnas);
                const columnasConDescripcion = columnas.map(([columna, descripcion]) => 
                    `${columna}: ${descripcion}`
                ).join('\n');
                
                contexto += `Columnas disponibles:\n${columnasConDescripcion}\n`;
            }
        } else {
            console.log(`‚ö†Ô∏è [MAPA-ERP] Tabla no encontrada en mapaERP: ${tabla}`);
        }
    });
    
    console.log('üìã [MAPA-ERP] Contexto construido:', contexto.substring(0, 200) + '...');
    return contexto;
}

/**
 * Selecciona el modelo GPT m√°s apropiado seg√∫n la complejidad
 */
function seleccionarModeloInteligente(intencion, tablasRelevantes) {
    // SIEMPRE usar GPT-4-turbo-preview como en la versi√≥n original que funcionaba
    const config = {
        modelo: 'gpt-4o',
        maxTokens: 2000,
        temperature: 0.3,
        razon: 'Usar el modelo original que ya funcionaba correctamente para SQL'
    };
    
    console.log('ü§ñ [MODELO-SELECTOR] Complejidad:', intencion.complejidad);
    console.log('ü§ñ [MODELO-SELECTOR] Modelo seleccionado:', config.modelo);
    console.log('ü§ñ [MODELO-SELECTOR] Raz√≥n:', config.razon);
    
    return config;
}

/**
 * Construye instrucciones optimizadas para respuestas m√°s naturales
 */
function construirInstruccionesNaturales(intencion, tablasRelevantes, contextoPinecone) {
    // USAR EL NUEVO COMPORTAMIENTO CHATGPT COMPLETO
    let instrucciones = comportamientoChatGPT + '\n\n';
    
    // Agregar contexto espec√≠fico de la empresa
    instrucciones += `
## üè¢ CONTEXTO EMPRESARIAL

Eres un empleado experto de **Semilleros Deitana** trabajando desde adentro de la empresa.

**TU IDENTIDAD:**
- üè¢ Trabajas EN Semilleros Deitana (no "para" - est√°s DENTRO)
- üå± Conoces NUESTROS procesos de producci√≥n de semillas y pl√°ntulas
- üçÖ Sabes c√≥mo funcionan NUESTROS sistemas de cultivo e injertos  
- üî¨ Entiendes NUESTRAS certificaciones ISO 9001 y est√°ndares de calidad
- üèóÔ∏è Conoces NUESTRAS instalaciones en Totana, Murcia

**FORMA DE HABLAR:**
- Usa "NOSOTROS", "NUESTRA empresa", "NUESTROS sistemas"
- Jam√°s digas "una empresa" o "la empresa" - es NUESTRA empresa
- Habla como empleado que conoce los detalles internos
- S√© espec√≠fico sobre NUESTROS procesos reales

`;

    // Instrucciones espec√≠ficas seg√∫n el tipo de consulta
    if (intencion.tipo === 'rag_sql') {
        instrucciones += `
## üéØ PROCESO PARA CONSULTAS T√âCNICAS (RAG + SQL):

### üìö **1. Usa el conocimiento empresarial como base**
- El contexto de Pinecone contiene manuales y procedimientos
- √ösalo como GU√çA principal para explicar procesos y conceptos
- Siempre proporciona contexto antes de datos espec√≠ficos

### üìä **2. Complementa con datos SQL cuando sea √∫til**
- Si es apropiado, genera consulta SQL: \`<sql>SELECT...</sql>\`
- Usa EXACTAMENTE las columnas de la estructura de datos
- Explica qu√© muestra la consulta antes de generarla

### ü§ù **3. Combina ambas fuentes inteligentemente**
- Informaci√≥n de manuales + ejemplos reales de la base de datos
- Explica el "por qu√©" usando manuales
- Muestra el "qu√©" usando datos SQL

### ‚úÖ **4. IMPORTANTE:**
- **SIEMPRE responde**, incluso sin informaci√≥n espec√≠fica
- Si no hay datos exactos, explica el concepto general
- Ofrece alternativas y siguientes pasos
- S√© √∫til y completo, no restrictivo

`;
    } else if (intencion.tipo === 'sql') {
        instrucciones += `
## üìä PROCESO PARA CONSULTAS DE DATOS:

### üéØ **1. Genera consulta SQL apropiada**
- Usa estructura de datos proporcionada exactamente
- Formato: \`<sql>SELECT...</sql>\`
- Explica qu√© hace la consulta antes de generarla

### üìù **2. Interpreta resultados de forma natural**
- No solo muestres datos, explica qu√© significan
- Proporciona contexto y an√°lisis
- Sugiere acciones basadas en los resultados

`;
    } else {
        instrucciones += `
## üí¨ PROCESO PARA CONVERSACI√ìN GENERAL:

### üß† **1. Respuesta inteligente y completa**
- Usa tu conocimiento general sobre agricultura y semillas
- Relaciona con el contexto de Semilleros Deitana cuando sea relevante
- Proporciona ejemplos pr√°cticos y actionables

### üîÑ **2. Mant√©n la conversaci√≥n fluida**
- Ofrece seguir explorando temas relacionados
- Proporciona sugerencias √∫tiles para el trabajo del usuario

`;
    }

    // INSTRUCCIONES CR√çTICAS PARA USO DE CONOCIMIENTO EMPRESARIAL
    instrucciones += `
## üö® **REGLAS CR√çTICAS SOBRE CONOCIMIENTO EMPRESARIAL**

### ‚≠ê **PRIORIDAD ABSOLUTA:**
- Si recibes "CONOCIMIENTO EMPRESARIAL RELEVANTE", **√öSALO COMO FUENTE PRINCIPAL**
- **NUNCA inventes informaci√≥n** que no est√© en el conocimiento empresarial
- **SIEMPRE di "seg√∫n nuestros documentos"** cuando uses informaci√≥n espec√≠fica de empresa
- **RECONOCE cuando NO tienes informaci√≥n espec√≠fica** en lugar de inventar

### üö® **OBLIGATORIO PARA INFORMACI√ìN DE SEMILLEROS DEITANA:**
- **PANEL DE OPERACIONES:** Si hay informaci√≥n espec√≠fica en CONOCIMIENTO EMPRESARIAL, √∫sala EXACTAMENTE
- **PROCESOS INTERNOS:** Solo explicar seg√∫n NUESTROS manuales reales
- **SISTEMAS ESPEC√çFICOS:** Solo describir seg√∫n documentaci√≥n oficial de la empresa
- **CUALQUIER T√âRMINO T√âCNICO:** Verificar primero en el conocimiento empresarial

### üîç **Para preguntas espec√≠ficas de Semilleros Deitana:**
- **Bandejas:** Solo usar informaci√≥n del documento oficial
- **F√≥rmulas/productos:** Solo usar datos reales de la empresa  
- **Procesos:** Solo explicar seg√∫n manuales internos
- **Frecuencias/n√∫meros:** Solo citar cifras documentadas
- **Panel de operaciones:** Usar EXACTAMENTE la descripci√≥n de NUESTROS documentos

### ‚úÖ **Ejemplos de respuestas correctas:**
- ‚úÖ "En NUESTRO panel de operaciones tenemos..."
- ‚úÖ "Seg√∫n NUESTROS documentos internos, el panel de control es..."
- ‚úÖ "En NUESTRA empresa, utilizamos..."
- ‚úÖ "No encuentro informaci√≥n espec√≠fica sobre eso en NUESTROS documentos..."

### ‚ùå **Ejemplos de respuestas PROHIBIDAS:**
- ‚ùå "El Panel de Operaciones es una interfaz centralizada que permite a los usuarios..." (gen√©rico)
- ‚ùå "en una empresa" (debe ser "en NUESTRA empresa")
- ‚ùå Cualquier descripci√≥n gen√©rica cuando hay informaci√≥n espec√≠fica disponible

`;

    // Recordatorio final sobre formato
    instrucciones += `
## üé® RECORDATORIO FINAL DE FORMATO:

**OBLIGATORIO en cada respuesta:**
- üè∑Ô∏è **T√≠tulo con emoji** relevante
- üìã **Estructura organizada** con encabezados
- ‚úÖ **Listas con emojis** para puntos clave
- üí° **Blockquotes** para tips importantes
- üîß **C√≥digo formateado** cuando corresponda
- üìä **Tablas** para comparaciones/datos
- üòä **Emojis apropiados** al contexto
- ü§î **Preguntas de seguimiento** √∫tiles

**¬°S√© exactamente como ChatGPT: √∫til, inteligente y visualmente atractivo!** üöÄ
`;

    return instrucciones;
}

/**
 * Funci√≥n principal: construye el prompt din√°mico OPTIMIZADO
 * ELIMINA las 3 llamadas a OpenAI y las reduce a 0 para construcci√≥n
 */
async function construirPromptInteligente(mensaje, mapaERP, openaiClient, contextoPinecone = '', contextoDatos = '', modoDesarrollo = false) {
    console.log('üöÄ [PROMPT-BUILDER] Construyendo prompt OPTIMIZADO sin llamadas IA...');
    console.log('üîç [DEBUG] mapaERP recibido:', !!mapaERP, 'tipo:', typeof mapaERP);
    if (mapaERP) {
        console.log('üîç [DEBUG] Claves del mapaERP:', Object.keys(mapaERP).slice(0, 10));
    }
    
    // 1. Analizar intenci√≥n SIN IA (b√°sico)
    const intencion = analizarIntencionBasica(mensaje);
    console.log('üéØ [PROMPT-BUILDER] Intenci√≥n detectada:', intencion);
    
    // 2. Detectar tablas relevantes SIN IA (b√°sico)  
    const tablasRelevantes = (intencion.tipo === 'sql' || intencion.tipo === 'rag_sql')
        ? detectarTablasRelevantesBasico(mensaje, mapaERP)
        : [];
    console.log('üìä [PROMPT-BUILDER] Tablas relevantes:', tablasRelevantes);
    
    // 3. Seleccionar modelo apropiado
    const configModelo = seleccionarModeloInteligente(intencion, tablasRelevantes);
    
    // 4. Construir contexto de mapaERP selectivo
    const contextoMapaERP = construirContextoMapaERP(tablasRelevantes, mapaERP);
    
    // 5. Construir instrucciones naturales
    const instruccionesNaturales = construirInstruccionesNaturales(intencion, tablasRelevantes, contextoPinecone);
    
    // 6. OBTENER CONOCIMIENTO RAG (solo cuando realmente se necesita)
    let contextoRAG = '';
    
    // Skip RAG para consultas conversacionales simples
    const consultasSimples = /(^hola|^hi|^buenos|^buenas|dime algo|cu√©ntame|cuentame|qui√©n eres|quien eres|qu√© eres|que eres|sobre ti|acerca de ti|algo de ti|acerca tuyo|quien soy|quines eres)/i;
    const esConsultaSimple = consultasSimples.test(mensaje.trim());
    
    // NUEVO: Detectar consultas que requieren informaci√≥n de empresa
    const consultasEmpresariales = /(bandejas?|previcur|formula|tipos?|que.*hay|cuales?|cuantos?|proceso|procedimiento|frecuencia|cambio.*agua|9000|semilleros deitana|cultivo|invernadero|tomate|lechuga|semilla|tratamiento|cliente|proveedor)/i;
    const esConsultaEmpresarial = consultasEmpresariales.test(mensaje.toLowerCase());
    
    // USAR RAG si: no es consulta simple Y (es conversaci√≥n/rag_sql O es consulta empresarial)
    if (!esConsultaSimple && ((intencion.tipo === 'conversacion' || intencion.tipo === 'rag_sql') || esConsultaEmpresarial)) {
        try {
            console.log('üß† [RAG] Recuperando conocimiento empresarial...');
            console.log('üéØ [RAG] Motivo: Consulta empresarial detectada -', esConsultaEmpresarial ? 'S√ç' : 'NO');
            contextoRAG = await ragInteligente.recuperarConocimientoRelevante(mensaje, 'sistema');
            console.log('‚úÖ [RAG] Conocimiento recuperado:', contextoRAG ? contextoRAG.length : 0, 'caracteres');
        } catch (error) {
            console.error('‚ùå [RAG] Error recuperando conocimiento:', error.message);
        }
    } else if (esConsultaSimple) {
        console.log('‚ö° [OPTIMIZACI√ìN] Consulta simple detectada - saltando RAG');
    } else {
        console.log('‚ö° [OPTIMIZACI√ìN] Consulta no empresarial - saltando RAG');
    }
    
    // 7. Ensamblar prompt final
    let promptFinal = instruccionesNaturales;
    
    // A√±adir conocimiento empresarial para conversaciones y RAG+SQL
    if (intencion.tipo === 'conversacion' || intencion.tipo === 'rag_sql') {
        promptFinal += `${promptBase}\n\n`;
    }
    
    // A√±adir estructura de datos solo si es necesario
            if (contextoMapaERP) {
        promptFinal += `${contextoMapaERP}\n\n`;
            }
            
    // A√±adir reglas SQL solo para consultas SQL
    if (intencion.tipo === 'sql' || intencion.tipo === 'rag_sql') {
        promptFinal += `${sqlRules}\n\n`;
    }
    
    // A√±adir contexto RAG si existe
    if (contextoRAG) {
        promptFinal += `CONOCIMIENTO EMPRESARIAL RELEVANTE:\n${contextoRAG}\n\n`;
    }
    
    // A√±adir contexto de datos previos si existe
    if (contextoDatos) {
        promptFinal += `DATOS DE CONTEXTO PREVIO:\n${contextoDatos}\n\n`;
    }
    
    console.log('‚úÖ [PROMPT-BUILDER] Prompt optimizado construido');
    console.log('‚ö° [PROMPT-BUILDER] Llamadas IA eliminadas: 3 ‚Üí 0');
    console.log('üéØ [PROMPT-BUILDER] Modelo final:', configModelo.modelo);
    
    return {
        prompt: promptFinal,
        configModelo: configModelo,
        intencion: intencion,
        tablasRelevantes: tablasRelevantes,
        metricas: {
            usaIA: false, // YA NO USA IA PARA CONSTRUCCI√ìN
            tablasDetectadas: tablasRelevantes.length,
            llamadasIA: 0, // CERO llamadas IA
            optimizado: true
        }
    };
}

module.exports = {
    construirPromptInteligente,
    analizarIntencionBasica,
    detectarTablasRelevantesBasico,
    seleccionarModeloInteligente
};