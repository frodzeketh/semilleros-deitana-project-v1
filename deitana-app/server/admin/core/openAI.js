// =====================================
// SISTEMA DE INTELIGENCIA ARTIFICIAL PARA SEMILLEROS DEITANA
// =====================================
// 
// Este archivo es el n√∫cleo central del asistente IA empresarial que:
// - Procesa consultas naturales y las convierte en SQL
// - Integra conocimiento empresarial con datos actuales
// - Proporciona respuestas personalizadas y naturales
// - Mantiene contexto conversacional y memoria
// - Soporta streaming en tiempo real
//
// ARQUITECTURA PRINCIPAL:
// 1. An√°lisis de intenci√≥n con IA
// 2. Construcci√≥n inteligente de prompts
// 3. Ejecuci√≥n de SQL con validaci√≥n
// 4. Formateo natural de respuestas
// 5. Persistencia en Firestore y Pinecone
// 6. Streaming en tiempo real
//
// AUTOR: Sistema de IA Semilleros Deitana
// VERSI√ìN: 2.0 (Optimizada con una sola llamada IA)
// FECHA: 2024
// =====================================

// =====================================
// 1. IMPORTACIONES Y CONFIGURACI√ìN INICIAL
// =====================================

const { OpenAI } = require('openai');
const pool = require('../../db');
const chatManager = require('../../utils/chatManager');
const admin = require('../../firebase-admin');
const pineconeMemoria = require('../../utils/pinecone');
const comandosMemoria = require('../../utils/comandosMemoria');
const langfuseUtils = require('../../utils/langfuse');
require('dotenv').config();
const mapaERP = require('./mapaERP');

// Importaciones de prompts
const { formatoObligatorio } = require('../prompts/formatoObligatorio');
const { promptGlobal } = require('../prompts/promptGlobal');
const { promptBase } = require('../prompts/base');
const { sqlRules, generarPromptSQL, generarPromptRAGSQL } = require('../prompts/sqlRules');
const { comportamientoChatGPT, comportamiento, comportamientoAsistente } = require('../prompts/comportamiento');
const { formatoRespuesta, generarPromptFormateador, generarPromptConversacional, generarPromptRAGSQLFormateador, generarPromptErrorFormateador, generarPromptCombinado } = require('../prompts/formatoRespuesta');
const ragInteligente = require('./ragInteligente');

// Inicializar el cliente de OpenAI
const openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY
});

// =====================================
// PROMPTS PRECOMPILADOS EN MEMORIA
// =====================================
// 
// Sistema de prompts optimizados que:
// - Carga prompts al iniciar el servidor (no en cada petici√≥n)
// - Evita I/O y concatenaciones repetidas (~50-300ms de ahorro)
// - Mantiene prompts en memoria para acceso instant√°neo
// - Permite personalizaci√≥n din√°mica cuando sea necesario
// =====================================

// Prompts precompilados (se cargan al iniciar el servidor)
let promptsPrecompilados = {
    base: null,
    sqlRules: null,
    comportamiento: null,
    formatoObligatorio: null,
    promptGlobal: null,
    mapaERPContexto: null
};

/**
 * Inicializa todos los prompts precompilados
 * Se ejecuta al iniciar el servidor
 */
async function inicializarPromptsPrecompilados() {
    console.log('üöÄ [PROMPTS] Inicializando prompts precompilados...');
    
    try {
        // Cargar prompts base
        promptsPrecompilados.base = promptBase;
        promptsPrecompilados.sqlRules = sqlRules;
        promptsPrecompilados.comportamiento = comportamientoChatGPT;
        promptsPrecompilados.formatoObligatorio = formatoObligatorio;
        promptsPrecompilados.promptGlobal = promptGlobal;
        
        // Precompilar contexto de mapaERP
        promptsPrecompilados.mapaERPContexto = construirContextoMapaERPCompleto(mapaERP);
        
        console.log('‚úÖ [PROMPTS] Prompts precompilados inicializados correctamente');
        console.log('üìä [PROMPTS] Tama√±o total en memoria:', 
            JSON.stringify(promptsPrecompilados).length, 'bytes');
        
    } catch (error) {
        console.error('‚ùå [PROMPTS] Error inicializando prompts:', error.message);
        // Fallback a carga din√°mica si falla
    }
}

// Eliminado: cierre extra agregado accidentalmente

//

/**
 * Obtiene un prompt precompilado
 * @param {string} tipo - Tipo de prompt ('base', 'sqlRules', etc.)
 * @returns {string} Prompt precompilado
 */
function obtenerPromptPrecompilado(tipo) {
    return promptsPrecompilados[tipo] || '';
}

/**
 * Construye prompt optimizado usando prompts precompilados
 * @param {string} mensaje - Mensaje del usuario
 * @param {boolean} necesitaRAG - Si necesita RAG
 * @param {string} contextoRAG - Contexto RAG si existe
 * @param {Array} historial - Historial conversacional
 * @returns {string} Prompt optimizado
 */
function construirPromptOptimizado(mensaje, necesitaRAG = false, contextoRAG = '', historial = []) {
    const fechaActual = new Date().toLocaleString('es-ES', { 
        timeZone: 'Europe/Madrid', 
        dateStyle: 'full', 
        timeStyle: 'short' 
    });
    
    // Usar prompts precompilados
    const promptGlobalConFecha = promptsPrecompilados.promptGlobal.replace('{{FECHA_ACTUAL}}', fechaActual);
    const instruccionesNaturales = promptsPrecompilados.comportamiento + '\n\n' + promptsPrecompilados.formatoObligatorio;
    
    let promptFinal = `${promptGlobalConFecha}\n${instruccionesNaturales}\n`;
    promptFinal += `${promptsPrecompilados.base}\n\n`;
    promptFinal += `${promptsPrecompilados.mapaERPContexto}\n\n`;
    promptFinal += `${promptsPrecompilados.sqlRules}\n\n`;
    
    // Agregar contexto RAG solo si es necesario
    if (necesitaRAG && contextoRAG) {
        promptFinal += `CONOCIMIENTO EMPRESARIAL RELEVANTE:\n${contextoRAG}\n\n`;
    }
    
    // Agregar historial conversacional optimizado
    if (historial && historial.length > 0) {
        const ultimosMensajes = historial.slice(-4); // Solo √∫ltimos 4 mensajes
        const contextoConversacional = ultimosMensajes.map(msg => 
            `${msg.role === 'user' ? 'Usuario' : 'Asistente'}: ${msg.content}`
        ).join('\n');
        
        promptFinal += `## üí¨ CONTEXTO CONVERSACIONAL RECIENTE\n\n${contextoConversacional}\n\n`;
    }
    
    return promptFinal;
}

// =====================================
// 2. CONFIGURACI√ìN DE VARIABLES GLOBALES
// =====================================

// Historial global de conversaci√≥n (en memoria, para demo)
const conversationHistory = [];

// Contexto de datos reales de la √∫ltima consulta relevante
let lastRealData = null;

// =====================================
// CACHE LRU PARA RESPUESTAS TRIVIALES
// =====================================
// 
// Sistema de cache inteligente que:
// - Almacena respuestas para consultas triviales (saludos, confirmaciones)
// - Reduce latencia de ~6s a ~100ms para consultas repetidas
// - Cache por usuario para personalizaci√≥n
// - Auto-expiraci√≥n para mantener frescura
// =====================================

class LRUCache {
    constructor(maxSize = 1000) {
        this.maxSize = maxSize;
        this.cache = new Map();
    }

    get(key) {
        if (this.cache.has(key)) {
            // Mover al final (m√°s reciente)
            const value = this.cache.get(key);
            this.cache.delete(key);
            this.cache.set(key, value);
            return value;
        }
        return null;
    }

    set(key, value) {
        if (this.cache.has(key)) {
            this.cache.delete(key);
        } else if (this.cache.size >= this.maxSize) {
            // Eliminar el m√°s antiguo (primero)
            const firstKey = this.cache.keys().next().value;
            this.cache.delete(firstKey);
        }
        this.cache.set(key, value);
    }

    clear() {
        this.cache.clear();
    }

    size() {
        return this.cache.size;
    }
}

// Cache global para respuestas triviales
const trivialResponseCache = new LRUCache(2000);

/**
 * Normaliza el input del usuario para cache lookup
 * @param {string} input - Input del usuario
 * @returns {string} Input normalizado
 */
function normalizarInput(input) {
    return input
        .toLowerCase()
        .trim()
        .replace(/\s+/g, ' ') // Normalizar espacios
        .replace(/[^\w\s]/g, ''); // Remover puntuaci√≥n
}

/**
 * Detecta si una consulta es trivial (saludo, confirmaci√≥n, etc.)
 * @param {string} input - Input normalizado
 * @returns {boolean} True si es trivial
 */
function esConsultaTrivial(input) {
    const consultasTriviales = [
        'hola', 'buenos dias', 'buenas tardes', 'buenas noches',
        'gracias', 'ok', 'okay', 'perfecto', 'genial', 'excelente',
        'bien', 'mal', 'ayuda', 'saludos', 'que tal', 'como estas',
        'todo bien', 'muy bien', 'no se', 'no se que', 'no se que hacer'
    ];
    
    return consultasTriviales.some(trivial => input.includes(trivial));
}

/**
 * Obtiene respuesta cacheada o null si no existe
 * @param {string} userId - ID del usuario
 * @param {string} input - Input normalizado
 * @returns {string|null} Respuesta cacheada o null
 */
function obtenerRespuestaCacheada(userId, input) {
    const cacheKey = `${userId}:${input}`;
    return trivialResponseCache.get(cacheKey);
}

/**
 * Guarda respuesta en cache para futuras consultas
 * @param {string} userId - ID del usuario
 * @param {string} input - Input normalizado
 * @param {string} respuesta - Respuesta a cachear
 */
function guardarRespuestaCacheada(userId, input, respuesta) {
    const cacheKey = `${userId}:${input}`;
    trivialResponseCache.set(cacheKey, {
        respuesta,
        timestamp: Date.now(),
        userId
    });
}

// =====================================
// 3. FUNCIONES AUXILIARES - FORMATEO Y UTILIDADES
// =====================================
// 
// Estas funciones se encargan de:
// - Formatear resultados SQL en Markdown
// - Obtener descripciones de columnas desde mapaERP
// - Determinar tablas basadas en columnas
// - Limitar y aleatorizar resultados
// - Generar respuestas naturales y conversacionales
// =====================================

/**
 * Funci√≥n para formatear resultados en Markdown
 * @param {Array} results - Resultados de la consulta SQL
 * @returns {string} Resultados formateados en Markdown
 * 
 * @example
 * formatResultsAsMarkdown([
 *   { CL_NOMBRE: 'ACME S.A.', CL_DIR: 'Calle Principal 123' },
 *   { CL_NOMBRE: 'Campo Sur', CL_DIR: 'Av. Rural 456' }
 * ]);
 * // Retorna tabla Markdown formateada
 */
function formatResultsAsMarkdown(results) {
    if (!results || results.length === 0) {
        return "No se han encontrado resultados para tu consulta.";
    }

    if (results.length === 1 && Object.keys(results[0]).length === 1) {
        const value = Object.values(results[0])[0];
        return `Total: ${value}`;
    }

    const columns = Object.keys(results[0]);
    let markdown = "| " + columns.join(" | ") + " |\n";
    markdown += "| " + columns.map(() => "---").join(" | ") + " |\n";
    results.forEach(row => {
        markdown += "| " + columns.map(col => (row[col] ?? "No disponible")).join(" | ") + " |\n";
    });
    return markdown;
}

/**
 * Funci√≥n para obtener la descripci√≥n de una columna desde mapaERP
 * @param {string} tabla - Nombre de la tabla
 * @param {string} columna - Nombre de la columna
 * @returns {string} Descripci√≥n de la columna o el nombre original
 * 
 * @example
 * // Suponiendo mapaERP.clientes.columnas = { CL_NOMBRE: 'Nombre del cliente' }
 * obtenerDescripcionColumna('clientes', 'CL_NOMBRE'); // 'Nombre del cliente'
 * obtenerDescripcionColumna('clientes', 'CL_ID'); // 'CL_ID' (si no hay descripci√≥n)
 */
function obtenerDescripcionColumna(tabla, columna) {
    if (mapaERP[tabla] && mapaERP[tabla].columnas && mapaERP[tabla].columnas[columna]) {
        return mapaERP[tabla].columnas[columna];
    }
    return columna;
}

/**
 * Funci√≥n para determinar la tabla basada en las columnas
 * @param {Array} columnas - Array de nombres de columnas
 * @returns {string|null} Nombre de la tabla o null si no se encuentra
 * 
 * @example
 * determinarTabla(['CL_ID', 'CL_NOMBRE']); // 'clientes'
 * determinarTabla(['AR_ID', 'AR_DENO']);   // 'articulos'
 */
function determinarTabla(columnas) {
    for (const [tabla, info] of Object.entries(mapaERP)) {
        const columnasTabla = Object.keys(info.columnas || {});
        if (columnas.every(col => columnasTabla.includes(col))) {
            return tabla;
        }
    }
    return null;
}

/**
 * Funci√≥n para limitar resultados con opci√≥n de aleatorizaci√≥n
 * @param {Array} results - Resultados de la consulta
 * @param {number} limite - N√∫mero m√°ximo de resultados (default: 5)
 * @param {boolean} aleatorio - Si se deben seleccionar registros aleatorios (default: false)
 * @returns {Array} Resultados limitados
 * 
 * @example
 * limitarResultados([{id:1},{id:2},{id:3}], 2, false); // [{id:1},{id:2}]
 * limitarResultados([{id:1},{id:2},{id:3}], 2, true);  // 2 resultados aleatorios
 */
function limitarResultados(results, limite = 5, aleatorio = false) {
    if (!results || results.length === 0) return [];
    if (aleatorio && results.length > 1) {
        // Selecciona registros aleatorios
        const shuffled = results.sort(() => 0.5 - Math.random());
        return shuffled.slice(0, limite);
    }
    return results.slice(0, limite);
}

// =====================================
// 4. FUNCIONES DE EJECUCI√ìN Y VALIDACI√ìN SQL
// =====================================
// 
// Estas funciones manejan:
// - Ejecuci√≥n segura de consultas SQL
// - Validaci√≥n y extracci√≥n de SQL de respuestas de IA
// - Reemplazo de nombres de tablas con nombres reales
// - Validaci√≥n de tablas y columnas en mapaERP
// - Prevenci√≥n de SQL injection
// - Correcci√≥n autom√°tica de sintaxis SQL
// =====================================

/**
 * Funci√≥n para ejecutar consultas SQL con manejo de errores
 * @param {string} sql - Consulta SQL a ejecutar
 * @returns {Promise<Array>} Resultados de la consulta
 * 
 * @example
 * const rows = await executeQuery("<sql>SELECT CL_ID, CL_NOMBRE FROM clientes LIMIT 5</sql>");
 * // rows: Array de objetos con columnas reales
 * 
 * Nota: Esta funci√≥n reemplaza nombres de tablas mapeadas con backticks si contienen guiones
 * para compatibilidad con MySQL (`tabla-con-guion` ‚Üí `\`tabla-con-guion\``).
 */
async function executeQuery(sql) {
    try {
        // Reemplazar los nombres de las tablas con sus nombres reales
        const sqlModificado = reemplazarNombresTablas(sql);
        console.log('üîç [SQL-EXEC] Ejecutando:', sqlModificado);
        const [rows] = await pool.query(sqlModificado);
        console.log('üìä [SQL-RESULT] Filas devueltas:', rows.length);
        
        if (rows.length === 0) {
            console.log('‚ö†Ô∏è [SQL-RESULT] La consulta no devolvi√≥ resultados');
            return [];
        }

        return rows;
    } catch (error) {
        console.error('‚ùå [SQL-EXEC] Error ejecutando consulta:', error.message);
        console.error('‚ùå [SQL-EXEC] SQL:', sql);
        throw error;
    }
}

/**
 * Funci√≥n para validar que la respuesta contiene una consulta SQL v√°lida
 * Extrae SQL de diferentes formatos y valida su sintaxis
 * 
 * @param {string} response - Respuesta de OpenAI
 * @returns {string|null} SQL validado o null si no es v√°lido
 * 
 * FORMATOS SOPORTADOS:
 * - <sql>SELECT...</sql>
 * - ```sql SELECT...```
 * - SELECT... (texto plano)
 * 
 * @example
 * validarRespuestaSQL('Respuesta: <sql>SELECT * FROM clientes</sql>'); // 'SELECT * FROM clientes'
 * validarRespuestaSQL('```sql\nSELECT CL_NOMBRE FROM clientes\n```'); // 'SELECT CL_NOMBRE FROM clientes'
 * validarRespuestaSQL('Muestra clientes'); // null (no hay SQL)
 */
function validarRespuestaSQL(response) {
    console.log('üîç [SQL-VALIDATION] Validando respuesta para extraer SQL...');
    
    // Primero intentar con etiquetas <sql>
    let sqlMatch = response.match(/<sql>([\s\S]*?)<\/sql>/);
    
    // Si no encuentra, intentar con bloques de c√≥digo SQL
    if (!sqlMatch) {
        sqlMatch = response.match(/```sql\s*([\s\S]*?)```/);
        if (sqlMatch) {
            console.log('‚ö†Ô∏è [SQL-VALIDATION] SQL encontrado en formato markdown, convirtiendo');
            response = response.replace(/```sql\s*([\s\S]*?)```/, '<sql>$1</sql>');
            sqlMatch = response.match(/<sql>([\s\S]*?)<\/sql>/);
        }
    }
    
    // Si no encuentra, buscar SQL en texto plano (nueva funcionalidad)
    if (!sqlMatch) {
        console.log('üîç [SQL-VALIDATION] Buscando SQL en texto plano...');
        const sqlPattern = /(SELECT\s+[\s\S]*?)(?:;|$)/i;
        sqlMatch = response.match(sqlPattern);
        if (sqlMatch) {
            console.log('‚úÖ [SQL-VALIDATION] SQL encontrado en texto plano');
        }
    }
    
    if (!sqlMatch) {
        console.log('‚ùå [SQL-VALIDATION] No se encontr√≥ SQL en la respuesta');
        return null; // Permitir respuestas sin SQL
    }
    
    let sql = sqlMatch[1].trim();
    if (!sql) {
        console.error('‚ùå [SQL-VALIDATION] La consulta SQL est√° vac√≠a');
        throw new Error('La consulta SQL est√° vac√≠a');
    }
    
    // VALIDACI√ìN SEM√ÅNTICA AVANZADA
    console.log('üîç [SQL-VALIDATION] Ejecutando validaci√≥n sem√°ntica...');
    const validacionSemantica = validacionSemanticaSQL(sql);
    
    if (!validacionSemantica.esValido) {
        console.error('‚ùå [SQL-VALIDATION] Validaci√≥n sem√°ntica fall√≥:', validacionSemantica.errores);
        throw new Error(`SQL no v√°lido: ${validacionSemantica.errores.join(', ')}`);
    }
    
    if (validacionSemantica.advertencias.length > 0) {
        console.log('‚ö†Ô∏è [SQL-VALIDATION] Advertencias:', validacionSemantica.advertencias);
    }
    
    // NORMALIZACI√ìN DE NOMBRES
    console.log('üîÑ [SQL-VALIDATION] Normalizando nombres t√©cnicos...');
    sql = normalizarNombresSQL(sql);
    
    // Validar que es una consulta SQL v√°lida
    if (!sql.toLowerCase().startsWith('select')) {
        console.error('‚ùå [SQL-VALIDATION] La consulta no es SELECT');
        throw new Error('La consulta debe comenzar con SELECT');
    }
    
    console.log('‚úÖ [SQL-VALIDATION] SQL v√°lido extra√≠do');
    
    // Validar y corregir sintaxis com√∫n
    if (sql.includes('OFFSET')) {
        const offsetMatch = sql.match(/LIMIT\s+(\d+)\s+OFFSET\s+(\d+)/i);
        if (offsetMatch) {
            sql = sql.replace(
                /LIMIT\s+(\d+)\s+OFFSET\s+(\d+)/i,
                `LIMIT ${offsetMatch[2]}, ${offsetMatch[1]}`
            );
            console.log('üîÑ [SQL-VALIDATION] Corregida sintaxis OFFSET');
        }
    }
    
    // Verificar si es una consulta de conteo
    const esConsultaConteo = sql.toLowerCase().includes('count(*)');
    const tieneDistinct = /select\s+distinct/i.test(sql);
    const tieneGroupBy = /group by/i.test(sql);
    const tieneJoin = /join/i.test(sql);
    const tieneFiltroFecha = /where[\s\S]*fpe_fec|where[\s\S]*fecha|where[\s\S]*_fec/i.test(sql);
    
    // Si no tiene LIMIT y no es excepci√≥n, AGREGAR LIMIT autom√°ticamente
    if (!esConsultaConteo && !tieneDistinct && !tieneGroupBy && !sql.toLowerCase().includes('limit') && !(tieneJoin && tieneFiltroFecha)) {
        // Buscar el final de la consulta (antes de ; si existe)
        sql = sql.replace(/;*\s*$/, '');
        sql += ' LIMIT 10';
        console.log('üîÑ [SQL-VALIDATION] Agregado LIMIT autom√°tico');
    }
    
    // LOGS ESTRUCTURADOS
    const logValidacion = {
        timestamp: new Date().toISOString(),
        sqlOriginal: sqlMatch[1].trim(),
        sqlFinal: sql,
        validacionSemantica: {
            esValido: validacionSemantica.esValido,
            errores: validacionSemantica.errores,
            advertencias: validacionSemantica.advertencias,
            nivelRiesgo: validacionSemantica.nivelRiesgo,
            tablasUsadas: validacionSemantica.tablasUsadas,
            columnasUsadas: validacionSemantica.columnasUsadas
        },
        complejidad: calcularComplejidadSQL(sql)
    };
    
    console.log('üìä [SQL-VALIDATION] Log estructurado:', JSON.stringify(logValidacion, null, 2));
    
    console.log('‚úÖ [SQL-VALIDATION] SQL final validado:', sql.substring(0, 100) + '...');
    return sql;
}

/**
 * Obtiene el nombre real de la tabla desde `mapaERP` para una clave l√≥gica
 * @param {string} nombreClave - Clave de la tabla en `mapaERP`
 * @returns {string} Nombre real (p.ej. con guiones) o la clave si no hay mapeo
 * 
 * @example
 * // mapaERP.articulos = { tabla: 'erp-articulos' }
 * obtenerNombreRealTabla('articulos'); // 'erp-articulos'
 */
function obtenerNombreRealTabla(nombreClave) {
    if (mapaERP[nombreClave] && mapaERP[nombreClave].tabla) {
        return mapaERP[nombreClave].tabla;
    }
    return nombreClave;
}

/**
 * Funci√≥n avanzada para reemplazar nombres de tablas con validaci√≥n completa
 * @param {string} sql - SQL original
 * @returns {string} SQL con nombres de tablas reemplazados
 */
function reemplazarNombresTablas(sql) {
    console.log('üîÑ [TABLAS] Iniciando reemplazo simplificado de nombres de tablas...');
    
    // Enfoque simplificado: solo reemplazar nombres de tabla exactos
    let sqlModificado = sql;
    
    // Buscar patrones FROM tabla y reemplazar solo el nombre de la tabla
    const patronesFrom = [
        /FROM\s+([a-zA-Z_][a-zA-Z0-9_]*)/gi,
        /from\s+([a-zA-Z_][a-zA-Z0-9_]*)/gi
    ];
    
    patronesFrom.forEach(patron => {
        sqlModificado = sqlModificado.replace(patron, (match, nombreTabla) => {
            const nombreTablaLower = nombreTabla.toLowerCase();
            
            // Verificar si existe en mapaERP
            if (mapaERP[nombreTablaLower]) {
                const tablaReal = mapaERP[nombreTablaLower].nombreReal || mapaERP[nombreTablaLower].tabla || nombreTablaLower;
                console.log(`üîÑ [TABLAS] Reemplazando: ${nombreTabla} ‚Üí ${tablaReal}`);
                return match.replace(nombreTabla, tablaReal);
            }
            
            return match; // No cambiar si no est√° en mapaERP
        });
    });
    
    console.log(`‚úÖ [TABLAS] Reemplazo completado`);
    return sqlModificado;
}

/**
 * Extracci√≥n avanzada de columnas SQL con soporte completo
 * @param {string} sql - SQL a analizar
 * @returns {Array} Array de objetos con informaci√≥n de columnas
 */
function extraerColumnasSQL(sql) {
    console.log('üîç [COLUMNAS] Iniciando extracci√≥n avanzada de columnas...');
    
    const columnas = [];
    const sqlUpper = sql.toUpperCase();
    
    // 1. FUNCIONES Y EXPRESIONES A IGNORAR
    const patronesIgnorar = [
        /COUNT\s*\(\s*\*\s*\)/gi,
        /SUM\s*\([^)]+\)/gi,
        /AVG\s*\([^)]+\)/gi,
        /MAX\s*\([^)]+\)/gi,
        /MIN\s*\([^)]+\)/gi,
        /CASE\s+WHEN[^END]+END/gi,
        /COALESCE\s*\([^)]+\)/gi,
        /IFNULL\s*\([^)]+\)/gi,
        /DISTINCT\s+/gi
    ];
    
    // Crear SQL limpio sin funciones
    let sqlLimpio = sql;
    patronesIgnorar.forEach(patron => {
        sqlLimpio = sqlLimpio.replace(patron, '');
    });
    
    // 2. EXTRACCI√ìN DE COLUMNAS CON ALIAS
    const extraerColumnaConAlias = (texto) => {
        const patrones = [
            // tabla.columna
            /([a-zA-Z_][a-zA-Z0-9_]*)\s*\.\s*([a-zA-Z_][a-zA-Z0-9_]*)/g,
            // solo columna (sin tabla)
            /\b([a-zA-Z_][a-zA-Z0-9_]*)\b/g
        ];
        
        const columnasEncontradas = [];
        
        patrones.forEach(patron => {
            let match;
            while ((match = patron.exec(texto)) !== null) {
                if (match.length === 3) {
                    // tabla.columna
                    columnasEncontradas.push({
                        tabla: match[1],
                        columna: match[2],
                        completo: `${match[1]}.${match[2]}`,
                        tipo: 'con_alias'
                    });
                } else if (match.length === 2) {
                    // solo columna
                    const columna = match[1];
                    // Ignorar palabras reservadas SQL
                    const palabrasReservadas = [
                        'SELECT', 'FROM', 'WHERE', 'JOIN', 'ON', 'GROUP', 'BY', 'ORDER', 'LIMIT',
                        'AND', 'OR', 'NOT', 'IN', 'BETWEEN', 'LIKE', 'IS', 'NULL', 'ASC', 'DESC',
                        'AS', 'DISTINCT', 'COUNT', 'SUM', 'AVG', 'MAX', 'MIN', 'CASE', 'WHEN',
                        'THEN', 'ELSE', 'END', 'COALESCE', 'IFNULL', 'HAVING', 'UNION'
                    ];
                    
                    if (!palabrasReservadas.includes(columna.toUpperCase())) {
                        columnasEncontradas.push({
                            tabla: null,
                            columna: columna,
                            completo: columna,
                            tipo: 'sin_alias'
                        });
                    }
                }
            }
        });
        
        return columnasEncontradas;
    };
    
    // 3. EXTRAER DE SELECT
    const selectMatch = sqlLimpio.match(/SELECT\s+(.+?)\s+FROM/i);
    if (selectMatch) {
        const columnasSelect = selectMatch[1].split(',').map(c => c.trim());
        columnasSelect.forEach(col => {
            const columnasEncontradas = extraerColumnaConAlias(col);
            columnas.push(...columnasEncontradas);
        });
    }
    
    // 4. EXTRAER DE WHERE (operadores avanzados)
    const wherePatterns = [
        /WHERE\s+(.+?)(?:\s+(?:GROUP BY|ORDER BY|LIMIT|HAVING|$))/gi,
        /AND\s+(.+?)(?:\s+(?:AND|OR|GROUP BY|ORDER BY|LIMIT|$))/gi,
        /OR\s+(.+?)(?:\s+(?:AND|OR|GROUP BY|ORDER BY|LIMIT|$))/gi
    ];
    
    wherePatterns.forEach(pattern => {
        let match;
        while ((match = pattern.exec(sqlLimpio)) !== null) {
            const whereClause = match[1];
            const columnasEncontradas = extraerColumnaConAlias(whereClause);
            columnas.push(...columnasEncontradas);
        }
    });
    
    // 5. EXTRAER DE JOIN
    const joinPatterns = [
        /JOIN\s+[a-zA-Z_][a-zA-Z0-9_]*\s+(?:AS\s+)?[a-zA-Z_][a-zA-Z0-9_]*\s+ON\s+(.+?)(?:\s+(?:JOIN|WHERE|GROUP BY|ORDER BY|$))/gi,
        /ON\s+(.+?)(?:\s+(?:JOIN|WHERE|GROUP BY|ORDER BY|$))/gi
    ];
    
    joinPatterns.forEach(pattern => {
        let match;
        while ((match = pattern.exec(sqlLimpio)) !== null) {
            const joinClause = match[1];
            const columnasEncontradas = extraerColumnaConAlias(joinClause);
            columnas.push(...columnasEncontradas);
        }
    });
    
    // 6. EXTRAER DE GROUP BY
    const groupByMatch = sqlLimpio.match(/GROUP BY\s+(.+?)(?:\s+(?:ORDER BY|LIMIT|$))/i);
    if (groupByMatch) {
        const groupByColumns = groupByMatch[1].split(',').map(c => c.trim());
        groupByColumns.forEach(col => {
            const columnasEncontradas = extraerColumnaConAlias(col);
            columnas.push(...columnasEncontradas);
        });
    }
    
    // 7. EXTRAER DE ORDER BY
    const orderByMatch = sqlLimpio.match(/ORDER BY\s+(.+?)(?:\s+(?:LIMIT|$))/i);
    if (orderByMatch) {
        const orderByColumns = orderByMatch[1].split(',').map(c => c.trim());
        orderByColumns.forEach(col => {
            const columnasEncontradas = extraerColumnaConAlias(col);
            columnas.push(...columnasEncontradas);
        });
    }
    
    // 8. EXTRAER DE HAVING
    const havingMatch = sqlLimpio.match(/HAVING\s+(.+?)(?:\s+(?:ORDER BY|LIMIT|$))/i);
    if (havingMatch) {
        const havingClause = havingMatch[1];
        const columnasEncontradas = extraerColumnaConAlias(havingClause);
        columnas.push(...columnasEncontradas);
    }
    
    // 9. ELIMINAR DUPLICADOS MANTENIENDO ORDEN
    const columnasUnicas = [];
    const seen = new Set();
    
    columnas.forEach(col => {
        const key = col.completo;
        if (!seen.has(key)) {
            seen.add(key);
            columnasUnicas.push(col);
        }
    });
    
    // 10. LOGGING ESTRUCTURADO
    const logExtraccion = {
        timestamp: new Date().toISOString(),
        sqlOriginal: sql.substring(0, 200) + '...',
        columnasEncontradas: columnasUnicas,
        estadisticas: {
            total: columnasUnicas.length,
            conAlias: columnasUnicas.filter(c => c.tipo === 'con_alias').length,
            sinAlias: columnasUnicas.filter(c => c.tipo === 'sin_alias').length
        }
    };
    
    console.log('üìä [COLUMNAS] Log de extracci√≥n:', JSON.stringify(logExtraccion, null, 2));
    console.log(`‚úÖ [COLUMNAS] Extracci√≥n completada: ${columnasUnicas.length} columnas √∫nicas`);
    
    return columnasUnicas;
}

/**
 * Determina a qu√© tabla pertenece una columna
 * @param {string} columna - Nombre de la columna
 * @param {Array} tablasUsadas - Tablas usadas en la consulta
 * @returns {string|null} Nombre de la tabla o null
 */
function determinarTablaColumna(columna, tablasUsadas) {
    for (const tabla of tablasUsadas) {
        if (mapaERP[tabla] && mapaERP[tabla].columnas) {
            const columnasTabla = Object.keys(mapaERP[tabla].columnas);
            if (columnasTabla.includes(columna)) {
                return tabla;
            }
        }
    }
    return null;
}

/**
 * Valida si una columna existe en una tabla
 * @param {string} tabla - Nombre de la tabla
 * @param {string} columna - Nombre de la columna
 * @returns {boolean} True si la columna existe
 */
function validarColumnaEnTabla(tabla, columna) {
    if (!mapaERP[tabla] || !mapaERP[tabla].columnas) {
        return false;
    }
    
    const columnasTabla = Object.keys(mapaERP[tabla].columnas);
    return columnasTabla.includes(columna);
}

/**
 * Valida que todas las tablas referenciadas en la sentencia SQL existan en `mapaERP`
 * @param {string} sql - Sentencia SQL a validar
 * @throws {Error} Si alguna tabla no est√° definida en `mapaERP`
 * 
 * @example
 * validarTablaEnMapaERP('SELECT CL_NOMBRE FROM clientes'); // OK o lanza error
 */
function validarTablaEnMapaERP(sql) {
    console.log('üîç [VALIDACION-TABLAS] Validando tablas contra mapaERP...');
    
    const resultado = {
        esValido: true,
        errores: [],
        advertencias: [],
        tablasDetectadas: [],
        tablasValidas: [],
        tablasInvalidas: []
    };
    
    // Detectar todas las tablas en el SQL
    const patronesTabla = [
        /(?:FROM|from)\s+([a-zA-Z_][a-zA-Z0-9_]*)/gi,
        /(?:JOIN|join)\s+([a-zA-Z_][a-zA-Z0-9_]*)/gi,
        /(?:UPDATE|update)\s+([a-zA-Z_][a-zA-Z0-9_]*)/gi,
        /(?:DELETE\s+FROM|delete\s+from)\s+([a-zA-Z_][a-zA-Z0-9_]*)/gi
    ];
    
    const tablasEncontradas = new Set();
    
    patronesTabla.forEach(patron => {
        let match;
        while ((match = patron.exec(sql)) !== null) {
            const nombreTabla = match[1].toLowerCase();
            tablasEncontradas.add(nombreTabla);
        }
    });
    
    resultado.tablasDetectadas = Array.from(tablasEncontradas);
    
    // Validar cada tabla contra mapaERP
    resultado.tablasDetectadas.forEach(tabla => {
        if (mapaERP[tabla]) {
            resultado.tablasValidas.push({
                nombre: tabla,
                nombreReal: mapaERP[tabla].nombreReal || tabla.toUpperCase(),
                descripcion: mapaERP[tabla].descripcion || 'Sin descripci√≥n',
                columnas: Object.keys(mapaERP[tabla].columnas || {}).length
            });
        } else {
            resultado.tablasInvalidas.push(tabla);
            resultado.errores.push(`Tabla no existe en mapaERP: ${tabla}`);
            resultado.esValido = false;
        }
    });
    
    // Validaci√≥n adicional: verificar alias v√°lidos
    const aliasPattern = /(?:FROM|JOIN)\s+[a-zA-Z_][a-zA-Z0-9_]*\s+(?:AS\s+)?([a-zA-Z_][a-zA-Z0-9_]*)/gi;
    const aliasEncontrados = new Set();
    
    let aliasMatch;
    while ((aliasMatch = aliasPattern.exec(sql)) !== null) {
        const alias = aliasMatch[1];
        if (aliasEncontrados.has(alias)) {
            resultado.advertencias.push(`Alias duplicado detectado: ${alias}`);
        }
        aliasEncontrados.add(alias);
    }
    
    // Logging estructurado
    const logValidacion = {
        timestamp: new Date().toISOString(),
        sql: sql.substring(0, 200) + '...',
        resultado: resultado,
        estadisticas: {
            totalTablas: resultado.tablasDetectadas.length,
            tablasValidas: resultado.tablasValidas.length,
            tablasInvalidas: resultado.tablasInvalidas.length,
            errores: resultado.errores.length,
            advertencias: resultado.advertencias.length
        }
    };
    
    console.log('üìä [VALIDACION-TABLAS] Log estructurado:', JSON.stringify(logValidacion, null, 2));
    
    if (resultado.esValido) {
        console.log(`‚úÖ [VALIDACION-TABLAS] Validaci√≥n exitosa: ${resultado.tablasValidas.length} tablas v√°lidas`);
    } else {
        console.error(`‚ùå [VALIDACION-TABLAS] Validaci√≥n fall√≥: ${resultado.errores.length} errores`);
    }
    
    return resultado;
}

/**
 * Validaci√≥n avanzada de columnas contra mapaERP
 * @param {string} sql - SQL a validar
 * @param {string} tabla - Tabla principal
 * @returns {Object} Resultado de validaci√≥n
 */
function validarColumnasEnMapaERP(sql, tabla) {
    console.log(`üîç [VALIDACION-COLUMNAS] Validando columnas de tabla: ${tabla}`);
    
    const resultado = {
        esValido: true,
        errores: [],
        advertencias: [],
        columnasDetectadas: [],
        columnasValidas: [],
        columnasInvalidas: [],
        columnasSugeridas: []
    };
    
    if (!mapaERP[tabla] || !mapaERP[tabla].columnas) {
        resultado.esValido = false;
        resultado.errores.push(`Tabla ${tabla} no tiene definici√≥n de columnas en mapaERP`);
        return resultado;
    }
    
    const columnasTabla = Object.keys(mapaERP[tabla].columnas);
    const columnasTablaLower = columnasTabla.map(c => c.toLowerCase());
    
    // Extraer columnas del SQL
    const columnasSQL = extraerColumnasSQL(sql);
    resultado.columnasDetectadas = columnasSQL;
    
    // Validar cada columna
    columnasSQL.forEach(columna => {
        const columnaLower = columna.toLowerCase();
        
        if (columnasTablaLower.includes(columnaLower)) {
            // Encontrar el nombre exacto (preservar case)
            const columnaExacta = columnasTabla.find(c => c.toLowerCase() === columnaLower);
            resultado.columnasValidas.push({
                nombre: columna,
                nombreExacto: columnaExacta,
                descripcion: mapaERP[tabla].columnas[columnaExacta] || 'Sin descripci√≥n'
            });
        } else {
            resultado.columnasInvalidas.push(columna);
            
            // Buscar sugerencias similares
            const sugerencias = buscarColumnasSimilares(columna, columnasTabla);
            if (sugerencias.length > 0) {
                resultado.columnasSugeridas.push({
                    columna: columna,
                    sugerencias: sugerencias
                });
                resultado.advertencias.push(`Columna '${columna}' no existe. Sugerencias: ${sugerencias.join(', ')}`);
            } else {
                resultado.errores.push(`Columna '${columna}' no existe en tabla '${tabla}'`);
            }
        }
    });
    
    // Validar alias de columnas
    const aliasColumnas = extraerAliasColumnas(sql);
    aliasColumnas.forEach(alias => {
        if (resultado.columnasDetectadas.includes(alias)) {
            resultado.advertencias.push(`Posible conflicto: '${alias}' usado como alias y como columna`);
        }
    });
    
    // Actualizar estado de validaci√≥n
    if (resultado.errores.length > 0) {
        resultado.esValido = false;
    }
    
    // Logging estructurado
    const logValidacion = {
        timestamp: new Date().toISOString(),
        tabla: tabla,
        sql: sql.substring(0, 200) + '...',
        resultado: resultado,
        estadisticas: {
            totalColumnas: resultado.columnasDetectadas.length,
            columnasValidas: resultado.columnasValidas.length,
            columnasInvalidas: resultado.columnasInvalidas.length,
            sugerencias: resultado.columnasSugeridas.length,
            errores: resultado.errores.length,
            advertencias: resultado.advertencias.length
        }
    };
    
    console.log('üìä [VALIDACION-COLUMNAS] Log estructurado:', JSON.stringify(logValidacion, null, 2));
    
    if (resultado.esValido) {
        console.log(`‚úÖ [VALIDACION-COLUMNAS] Validaci√≥n exitosa: ${resultado.columnasValidas.length} columnas v√°lidas`);
    } else {
        console.error(`‚ùå [VALIDACION-COLUMNAS] Validaci√≥n fall√≥: ${resultado.errores.length} errores`);
    }
    
    return resultado;
}

/**
 * Busca columnas similares para sugerencias
 * @param {string} columna - Columna a buscar
 * @param {Array} columnasTabla - Columnas disponibles
 * @returns {Array} Array de sugerencias
 */
function buscarColumnasSimilares(columna, columnasTabla) {
    const columnaLower = columna.toLowerCase();
    const sugerencias = [];
    
    columnasTabla.forEach(col => {
        const colLower = col.toLowerCase();
        
        // B√∫squeda exacta (case-insensitive)
        if (colLower === columnaLower) {
            sugerencias.unshift(col); // Prioridad alta
        }
        // B√∫squeda por inclusi√≥n
        else if (colLower.includes(columnaLower) || columnaLower.includes(colLower)) {
            sugerencias.push(col);
        }
        // B√∫squeda por similitud de caracteres
        else {
            const similitud = calcularSimilitud(columnaLower, colLower);
            if (similitud > 0.6) {
                sugerencias.push(col);
            }
        }
    });
    
    // Ordenar por relevancia y limitar a 3 sugerencias
    return sugerencias.slice(0, 3);
}

/**
 * Extrae alias de columnas del SQL
 * @param {string} sql - SQL a analizar
 * @returns {Array} Array de alias detectados
 */
function extraerAliasColumnas(sql) {
    const alias = [];
    
    // Patr√≥n para alias en SELECT
    const aliasPattern = /SELECT\s+(.+?)\s+FROM/gi;
    let match;
    
    while ((match = aliasPattern.exec(sql)) !== null) {
        const columnas = match[1].split(',').map(c => c.trim());
        
        columnas.forEach(col => {
            // Buscar alias con AS
            const asMatch = col.match(/(?:AS\s+)?([a-zA-Z_][a-zA-Z0-9_]*)\s*$/i);
            if (asMatch) {
                alias.push(asMatch[1]);
            }
        });
    }
    
    return alias;
}

// =====================================
// 5. FUNCIONES DE PERSISTENCIA Y ALMACENAMIENTO (FIREBASE)
// =====================================
// 
// Estas funciones gestionan:
// - Guardado de mensajes de usuario en Firestore
// - Guardado de respuestas del asistente
// - Detecci√≥n de preguntas de seguimiento
// - Organizaci√≥n de conversaciones por usuario
// - Persistencia as√≠ncrona para no bloquear respuestas
// =====================================

/**
 * Funci√≥n auxiliar para detectar si la pregunta es de seguimiento sobre tel√©fono de cliente
 * @param {string} userQuery - Consulta del usuario
 * @param {Object} lastRealData - Datos de la consulta anterior
 * @returns {boolean} True si es pregunta de seguimiento sobre tel√©fono
 * 
 * @example
 * esPreguntaTelefonoCliente('¬øcu√°l es su tel√©fono?', { type: 'cliente', data: [...] }); // true
 */
function esPreguntaTelefonoCliente(userQuery, lastRealData) {
    if (!lastRealData || lastRealData.type !== 'cliente' || !lastRealData.data) return false;
    const texto = userQuery.toLowerCase();
    return (
        texto.includes('telefono') || texto.includes('tel√©fono')
    );
}

/**
 * Funci√≥n para guardar mensaje en Firestore
 * @param {string} userId - ID del usuario
 * @param {string} message - Mensaje a guardar
 * @param {boolean} isAdmin - Si es mensaje de administrador
 * @returns {Promise<boolean>} True si se guard√≥ correctamente
 * 
 * @example
 * await saveMessageToFirestore('user123', 'dame clientes', true);
 */
async function saveMessageToFirestore(userId, message, conversationId = 'admin_conversation', isAdmin = true) {
    try {
        const now = new Date();
        const messageData = {
            content: message,
            role: 'user',
            timestamp: now
        };

        const userChatRef = chatManager.chatsCollection.doc(userId);
        const conversationRef = userChatRef.collection('conversations').doc(conversationId);
        
        // Primero obtenemos el documento actual
        const conversationDoc = await conversationRef.get();
        let messages = [];
        
        if (conversationDoc.exists) {
            messages = conversationDoc.data().messages || [];
        }
        
        // Agregamos el nuevo mensaje
        messages.push(messageData);
        
        // Actualizamos el documento con el nuevo array de mensajes
        await conversationRef.set({
            lastUpdated: now,
            messages: messages
        }, { merge: true });

        return true;
    } catch (error) {
        console.error('Error al guardar mensaje en Firestore:', error);
        return false;
    }
}

/**
 * Funci√≥n para guardar mensaje del asistente en Firestore
 * @param {string} userId - ID del usuario
 * @param {string} message - Mensaje del asistente a guardar
 * @returns {Promise<boolean>} True si se guard√≥ correctamente
 * 
 * @example
 * await saveAssistantMessageToFirestore('user123', 'Aqu√≠ tienes los clientes...');
 */
async function saveAssistantMessageToFirestore(userId, message, conversationId = 'admin_conversation') {
    try {
        const now = new Date();
        const messageData = {
            content: message,
            role: 'assistant',
            timestamp: now
        };

        const userChatRef = chatManager.chatsCollection.doc(userId);
        const conversationRef = userChatRef.collection('conversations').doc(conversationId);
        
        // Primero obtenemos el documento actual
        const conversationDoc = await conversationRef.get();
        let messages = [];
        
        if (conversationDoc.exists) {
            messages = conversationDoc.data().messages || [];
        }
        
        // Agregamos el nuevo mensaje
        messages.push(messageData);
        
        // Actualizamos el documento con el nuevo array de mensajes
        await conversationRef.set({
            lastUpdated: now,
            messages: messages
        }, { merge: true });

        return true;
    } catch (error) {
        console.error('Error al guardar mensaje del asistente en Firestore:', error);
        return false;
    }
}

// =====================================
// 6. B√öSQUEDA FLEXIBLE (FUZZY SEARCH)
// =====================================
// 
// Esta funci√≥n implementa b√∫squeda inteligente cuando SQL falla:
// - Genera variantes del t√©rmino de b√∫squeda
// - Prueba m√∫ltiples columnas y tablas
// - B√∫squeda multi-t√©rmino para art√≠culos
// - Manejo especial para tablas espec√≠ficas
// - Recuperaci√≥n autom√°tica cuando consultas exactas fallan
// =====================================

/**
 * Funci√≥n auxiliar para intentar una b√∫squeda flexible (fuzzy search) en SQL
 * Se ejecuta cuando una consulta SQL exacta falla, generando variantes inteligentes
 * 
 * @param {string} sql - SQL original que fall√≥
 * @param {string} userQuery - Consulta original del usuario
 * @returns {Object|null} Resultados encontrados o null si no hay coincidencias
 * 
 * ESTRATEGIAS DE B√öSQUEDA:
 * - Genera variantes del t√©rmino (may√∫sculas, min√∫sculas, sin tildes)
 * - Prueba m√∫ltiples columnas de texto
 * - B√∫squeda multi-t√©rmino para art√≠culos
 * - Manejo especial para tablas espec√≠ficas
 * - Recuperaci√≥n autom√°tica cuando consultas exactas fallan
 * 
 * @example
 * const retry = await fuzzySearchRetry(
 *   'SELECT * FROM articulos WHERE AR_DENO LIKE "%caja 200cc%"',
 *   'busca caja 200cc'
 * );
 * if (retry) { console.log(retry.sqlFuzzyTry, retry.results); }
 */
async function fuzzySearchRetry(sql, userQuery) {
    console.log('üîç [FUZZY-SEARCH] Iniciando b√∫squeda flexible...');
    console.log('üîç [FUZZY-SEARCH] SQL original:', sql);
    console.log('üîç [FUZZY-SEARCH] Query usuario:', userQuery);
    
    // Detectar el t√©rmino de b√∫squeda en el WHERE
    const likeMatch = sql.match(/WHERE\s+([\w.]+)\s+LIKE\s+'%([^%']+)%'/i);
    const eqMatch = sql.match(/WHERE\s+([\w.]+)\s*=\s*'([^']+)'/i);
    let columna = null;
    let valor = null;
    if (likeMatch) {
        columna = likeMatch[1];
        valor = likeMatch[2];
        console.log('üîç [FUZZY-SEARCH] Detectado LIKE:', columna, '=', valor);
    } else if (eqMatch) {
        columna = eqMatch[1];
        valor = eqMatch[2];
        console.log('üîç [FUZZY-SEARCH] Detectado igualdad:', columna, '=', valor);
    }
    if (!columna || !valor) {
        console.log('‚ö†Ô∏è [FUZZY-SEARCH] No se pudo detectar columna/valor para fuzzy search');
        return null;
    }

    // Detectar la tabla principal del FROM
    const fromMatch = sql.match(/FROM\s+([`\w]+)/i);
    let tabla = fromMatch ? fromMatch[1].replace(/`/g, '') : null;
    console.log('üîç [FUZZY-SEARCH] Tabla detectada:', tabla);
    
    // Buscar la clave de mapaERP que corresponde a la tabla real
    let claveMapa = tabla && Object.keys(mapaERP).find(k => (mapaERP[k].tabla || k) === tabla);
    // Si no se detecta, fallback a la columna original
    let columnasTexto = [columna];
    if (claveMapa && mapaERP[claveMapa].columnas) {
        // Filtrar solo columnas tipo texto (por nombre o heur√≠stica)
        columnasTexto = Object.keys(mapaERP[claveMapa].columnas).filter(c => {
            const nombre = c.toLowerCase();
            return !nombre.match(/(id|num|cant|fecha|fec|total|importe|precio|monto|valor|kg|ha|area|superficie|lat|lon|long|ancho|alto|diam|mm|cm|m2|m3|porc|\d)/);
        });
        if (columnasTexto.length === 0) columnasTexto = Object.keys(mapaERP[claveMapa].columnas);
        console.log('üîç [FUZZY-SEARCH] Columnas texto disponibles:', columnasTexto.join(', '));
    }

    // Generar variantes del valor para fuzzy search
    const variantes = [
        valor,
        valor.toUpperCase(),
        valor.toLowerCase(),
        valor.normalize('NFD').replace(/[\u0300-\u036f]/g, ''), // sin tildes
        valor.split(' ')[0], // solo la primera palabra
        valor.replace(/\s+/g, ''), // sin espacios
        valor.replace(/cc/gi, ' CC'),
        valor.replace(/lt/gi, ' LT'),
        valor.replace(/\./g, ''),
        valor.replace(/\d+/g, ''),
        valor.slice(0, Math.max(3, Math.floor(valor.length * 0.7)))
    ];
    
    console.log('üîç [FUZZY-SEARCH] Variantes generadas:', variantes.length);

    // --- MEJORA: Si el valor tiene varios t√©rminos, buscar art√≠culos cuyo AR_DENO contenga TODOS los t√©rminos (AND) ---
    if (tabla === 'articulos' && valor.trim().split(/\s+/).length > 1) {
        console.log('üîç [FUZZY-SEARCH] B√∫squeda multi-t√©rmino en art√≠culos...');
        const terminos = valor.trim().split(/\s+/).filter(Boolean);
        // Buscar en AR_DENO y AR_REF, ambos deben contener todos los t√©rminos
        const condicionesDeno = terminos.map(t => `AR_DENO LIKE '%${t}%'`).join(' AND ');
        const condicionesRef = terminos.map(t => `AR_REF LIKE '%${t}%'`).join(' AND ');
        // Probar primero en AR_DENO
        let sqlMultiTerm = `SELECT * FROM articulos WHERE ${condicionesDeno} LIMIT 5`;
        try {
            console.log('üîç [FUZZY-SEARCH] Probando multi-t√©rmino AR_DENO...');
            const results = await executeQuery(sqlMultiTerm);
            if (results && results.length > 0) {
                console.log('‚úÖ [FUZZY-SEARCH] Encontrados con multi-t√©rmino AR_DENO:', results.length);
                return { results, sqlFuzzyTry: sqlMultiTerm };
            }
        } catch (e) {
            console.log('‚ö†Ô∏è [FUZZY-SEARCH] Error en multi-t√©rmino AR_DENO:', e.message);
        }
        // Probar en AR_REF
        let sqlMultiTermRef = `SELECT * FROM articulos WHERE ${condicionesRef} LIMIT 5`;
        try {
            console.log('üîç [FUZZY-SEARCH] Probando multi-t√©rmino AR_REF...');
            const results = await executeQuery(sqlMultiTermRef);
            if (results && results.length > 0) {
                console.log('‚úÖ [FUZZY-SEARCH] Encontrados con multi-t√©rmino AR_REF:', results.length);
                return { results, sqlFuzzyTry: sqlMultiTermRef };
            }
        } catch (e) {
            console.log('‚ö†Ô∏è [FUZZY-SEARCH] Error en multi-t√©rmino AR_REF:', e.message);
        }
        // Probar en ambos (OR)
        let sqlMultiTermBoth = `SELECT * FROM articulos WHERE (${condicionesDeno}) OR (${condicionesRef}) LIMIT 5`;
        try {
            console.log('üîç [FUZZY-SEARCH] Probando multi-t√©rmino combinado...');
            const results = await executeQuery(sqlMultiTermBoth);
            if (results && results.length > 0) {
                console.log('‚úÖ [FUZZY-SEARCH] Encontrados con multi-t√©rmino combinado:', results.length);
                return { results, sqlFuzzyTry: sqlMultiTermBoth };
            }
        } catch (e) {
            console.log('‚ö†Ô∏è [FUZZY-SEARCH] Error en multi-t√©rmino combinado:', e.message);
        }
    }
    // --- FIN MEJORA ---

    // Probar todas las combinaciones de columna y variante
    console.log('üîç [FUZZY-SEARCH] Probando combinaciones columna-variante...');
    for (const col of columnasTexto) {
        for (const variante of variantes) {
            if (!variante || variante.length < 2) continue;
            let sqlFuzzyTry = sql.replace(/WHERE[\s\S]*/i, `WHERE ${col} LIKE '%${variante}%' LIMIT 5`);
            try {
                const results = await executeQuery(sqlFuzzyTry);
                if (results && results.length > 0) {
                    console.log(`‚úÖ [FUZZY-SEARCH] Encontrados con ${col} LIKE %${variante}%:`, results.length);
                    return { results, sqlFuzzyTry };
                }
            } catch (e) {
                // Ignorar errores de SQL en fuzzy
            }
        }
    }
    // Si la tabla es articulos, probar tambi√©n AR_DENO y AR_REF expl√≠citamente
    if (tabla === 'articulos') {
        console.log('üîç [FUZZY-SEARCH] Probando b√∫squeda directa en art√≠culos...');
        for (const variante of variantes) {
            let sqlTry = `SELECT * FROM articulos WHERE AR_DENO LIKE '%${variante}%' OR AR_REF LIKE '%${variante}%' LIMIT 5`;
            try {
                const results = await executeQuery(sqlTry);
                if (results && results.length > 0) {
                    console.log(`‚úÖ [FUZZY-SEARCH] Encontrados con variante directa ${variante}:`, results.length);
                    return { results, sqlFuzzyTry: sqlTry };
                }
            } catch (e) {}
        }
    }
    
    console.log('‚ùå [FUZZY-SEARCH] No se encontraron resultados con b√∫squeda flexible');
    return null;
}

// =====================================
// 7. FUNCIONES DE USUARIO Y CONTEXTO CONVERSACIONAL
// =====================================
// 
// Estas funciones gestionan:
// - Obtenci√≥n de informaci√≥n del usuario desde Firebase
// - Recuperaci√≥n de historial conversacional
// - Personalizaci√≥n de respuestas con nombre del usuario
// - Contexto conversacional para continuidad
// - Gesti√≥n de sesiones y conversaciones
// =====================================

/**
 * Obtiene la informaci√≥n del usuario desde Firebase incluyendo su displayName
 * @param {string} userId - UID de Firebase
 * @returns {Promise<{ uid: string, nombre: string, email: string|null, esAdmin: boolean }>} Datos del usuario
 * 
 * @example
 * const userInfo = await obtenerInfoUsuario('firebase_uid_123');
 * // { uid: 'firebase_uid_123', nombre: 'Juan P√©rez', email: 'juan@deitana.com', esAdmin: true }
 */
async function obtenerInfoUsuario(userId) {
    try {
        console.log('üë§ [USER-INFO] Obteniendo informaci√≥n del usuario:', userId);
        
        const userRecord = await admin.auth().getUser(userId);
        
        const infoUsuario = {
            uid: userRecord.uid,
            nombre: userRecord.displayName || 'Usuario',
            email: userRecord.email,
            esAdmin: userRecord.customClaims?.isAdmin || false
        };
        
        console.log('‚úÖ [USER-INFO] Informaci√≥n obtenida:', {
            nombre: infoUsuario.nombre,
            email: infoUsuario.email?.substring(0, 3) + '***',
            esAdmin: infoUsuario.esAdmin
        });
        
        return infoUsuario;
    } catch (error) {
        console.error('‚ùå [USER-INFO] Error obteniendo informaci√≥n del usuario:', error.message);
        return {
            uid: userId,
            nombre: 'Usuario',
            email: null,
            esAdmin: false
        };
    }
}

/**
 * Obtiene el historial completo de la conversaci√≥n para contexto
 * CON CONTINUIDAD ENTRE SESIONES - Si es conversaci√≥n temporal, busca contexto del usuario
 * @param {string} userId - UID de Firebase
 * @param {string} conversationId - ID de conversaci√≥n en Firestore
 * @returns {Promise<Array<{ role: 'user'|'assistant', content: string }>>}
 * 
 * @example
 * const historial = await obtenerHistorialConversacion('user123', 'conv_456');
 * // [{ role: 'user', content: 'dame clientes' }, { role: 'assistant', content: 'Aqu√≠ tienes...' }]
 */
async function obtenerHistorialConversacion(userId, conversationId) {
    try {
        console.log('üìú [HISTORIAL] Obteniendo contexto conversacional...');
        console.log('üìú [HISTORIAL] Usuario:', userId, 'Conversaci√≥n:', conversationId);
        
        // =====================================
        // ESTRATEGIA DE CONTINUIDAD INTELIGENTE
        // =====================================
        
        // 1. Si hay conversationId espec√≠fico y no es temporal
        if (conversationId && !conversationId.startsWith('temp_')) {
            console.log('üìú [HISTORIAL] Usando conversaci√≥n espec√≠fica:', conversationId);
            const mensajes = await chatManager.getConversationMessages(userId, conversationId);
            const mensajesRecientes = mensajes.slice(-6);
            console.log(`üìú [HISTORIAL] Obtenidos ${mensajesRecientes.length} mensajes de conversaci√≥n espec√≠fica`);
            return mensajesRecientes.map(msg => ({
                role: msg.role,
                content: msg.content
            }));
        }
        
        // 2. Si es conversaci√≥n temporal ‚Üí BUSCAR CONTINUIDAD DEL USUARIO
        console.log('üîÑ [CONTINUIDAD] Conversaci√≥n temporal - buscando contexto del usuario...');
        return await obtenerHistorialUsuario(userId);
        
    } catch (error) {
        console.error('‚ùå [HISTORIAL] Error obteniendo historial:', error.message);
        return [];
    }
}

/**
 * Obtiene historial de conversaciones recientes del usuario para mantener continuidad
 * @param {string} userId - UID de Firebase
 * @param {number} limitConversaciones - N√∫mero m√°ximo de conversaciones a revisar
 * @returns {Promise<Array<{ role: 'user'|'assistant', content: string }>>}
 * 
 * @example
 * const historial = await obtenerHistorialUsuario('user123', 3);
 * // Combina √∫ltimos mensajes de las 3 conversaciones m√°s recientes
 */
async function obtenerHistorialUsuario(userId, limitConversaciones = 3) {
    try {
        console.log('üîÑ [CONTINUIDAD] Buscando conversaciones recientes del usuario...');
        
        // Obtener conversaciones recientes del usuario
        const conversaciones = await chatManager.getRecentConversations(userId, limitConversaciones);
        
        if (!conversaciones || conversaciones.length === 0) {
            console.log('üîÑ [CONTINUIDAD] No se encontraron conversaciones previas');
            return [];
        }
        
        console.log(`üîÑ [CONTINUIDAD] Encontradas ${conversaciones.length} conversaciones recientes`);
        
        // Extraer √∫ltimos mensajes de cada conversaci√≥n
        const mensajesRecientes = [];
        
        for (const conv of conversaciones) {
            try {
                const mensajes = await chatManager.getConversationMessages(userId, conv.id);
                if (mensajes && mensajes.length > 0) {
                    // Tomar √∫ltimos 2-3 mensajes de cada conversaci√≥n
                    const ultimosMensajes = mensajes.slice(-3);
                    mensajesRecientes.push(...ultimosMensajes);
                    console.log(`üîÑ [CONTINUIDAD] Agregados ${ultimosMensajes.length} mensajes de conversaci√≥n ${conv.id}`);
                }
            } catch (error) {
                console.log(`‚ö†Ô∏è [CONTINUIDAD] Error obteniendo mensajes de conversaci√≥n ${conv.id}:`, error.message);
            }
        }
        
        // Limitar a m√°ximo 8 mensajes para no sobrecargar el contexto
        const mensajesLimitados = mensajesRecientes.slice(-8);
        
        console.log(`‚úÖ [CONTINUIDAD] Contexto de continuidad obtenido: ${mensajesLimitados.length} mensajes`);
        
        // Formatear para usar en el prompt
        const contextoFormateado = mensajesLimitados.map(msg => ({
            role: msg.role,
            content: msg.content
        }));
        
        return contextoFormateado;
        
    } catch (error) {
        console.error('‚ùå [CONTINUIDAD] Error obteniendo historial del usuario:', error.message);
        return [];
    }
}

/**
 * Personaliza la respuesta incluyendo el nombre del usuario de forma sutil (‚âà30% de las veces)
 * @param {string} respuesta - Texto original
 * @param {string} nombreUsuario - Nombre para personalizar
 * @returns {string} Respuesta potencialmente personalizada
 * 
 * @example
 * personalizarRespuesta('Hola, aqu√≠ tienes los clientes', 'Mar√≠a'); 
 * // 'Hola, Mar√≠a! Aqu√≠ tienes los clientes'
 */
function personalizarRespuesta(respuesta, nombreUsuario) {
    // No personalizar si es un nombre gen√©rico
    if (!nombreUsuario || nombreUsuario === 'Usuario' || nombreUsuario.length < 2) {
        return respuesta;
    }
    
    console.log(`üé® [PERSONALIZACI√ìN] Personalizando respuesta para ${nombreUsuario}`);
    
    // Patrones para agregar el nombre de forma sutil (no siempre, aproximadamente 30% de las veces)
    const deberiaPersonalizar = Math.random() < 0.3;
    
    if (!deberiaPersonalizar) {
        console.log('üé® [PERSONALIZACI√ìN] Saltando personalizaci√≥n para esta respuesta');
        return respuesta;
    }
    
    const patronesPersonalizacion = [
        // Al inicio de la respuesta
        {
            patron: /^¬°?Hola[!,]?\s*/i,
            reemplazo: `¬°Hola, ${nombreUsuario}! `
        },
        {
            patron: /^Perfecto[!,]?\s*/i,
            reemplazo: `Perfecto, ${nombreUsuario}. `
        },
        // En medio de la respuesta
        {
            patron: /¬øTe sirve esta informaci√≥n\?/i,
            reemplazo: `¬øTe sirve esta informaci√≥n, ${nombreUsuario}?`
        },
        {
            patron: /¬øNecesitas algo m√°s\?/i,
            reemplazo: `¬øNecesitas algo m√°s, ${nombreUsuario}?`
        },
        // Al final de la respuesta
        {
            patron: /¬øEn qu√© m√°s puedo ayudarte\?/i,
            reemplazo: `¬øEn qu√© m√°s puedo ayudarte, ${nombreUsuario}?`
        }
    ];
    
    // Aplicar un patr√≥n aleatorio que coincida
    for (const { patron, reemplazo } of patronesPersonalizacion) {
        if (patron.test(respuesta)) {
            const respuestaPersonalizada = respuesta.replace(patron, reemplazo);
            console.log('‚úÖ [PERSONALIZACI√ìN] Respuesta personalizada aplicada');
            return respuestaPersonalizada;
        }
    }
    
    // Si no coincide ning√∫n patr√≥n, agregar el nombre al final de forma sutil
    if (respuesta.endsWith('?')) {
        return respuesta.slice(0, -1) + `, ${nombreUsuario}?`;
    } else if (respuesta.endsWith('.')) {
        return respuesta.slice(0, -1) + `, ${nombreUsuario}.`;
    }
    
    console.log('üé® [PERSONALIZACI√ìN] No se aplic√≥ personalizaci√≥n espec√≠fica');
    return respuesta;
}













































// =====================================
// 8. L√ìGICA DE CONSTRUCCI√ìN DE PROMPT INTELIGENTE
// =====================================
// 
// Esta secci√≥n contiene la l√≥gica unificada que antes estaba en construirPrompt.js:
// - An√°lisis de intenci√≥n con IA (SQL, conversaci√≥n, RAG+SQL)
// - Detecci√≥n autom√°tica de tablas relevantes
// - Construcci√≥n de contexto de mapaERP selectivo
// - Modelo √∫nico optimizado (gpt-4o)
// - Construcci√≥n de instrucciones naturales
// - Ensamblaje final del prompt optimizado
// =====================================

/**
 * Construye un prompt optimizado usando IA inteligente (UNA SOLA LLAMADA)
 * Esta es la funci√≥n principal que orquesta todo el proceso de construcci√≥n
 * 
 * @param {string} mensaje - Consulta del usuario
 * @param {Object} mapaERP - Mapa de estructura de la base de datos
 * @param {Object} openaiClient - Cliente de OpenAI
 * @param {string} contextoPinecone - Contexto de memoria vectorial
 * @param {string} contextoDatos - Datos de contexto previo
 * @param {boolean} modoDesarrollo - Modo de desarrollo para debugging
 * @returns {Object} Prompt construido con configuraci√≥n y m√©tricas
 * 
 * @example
 * const builder = await construirPromptInteligente(
 *   'dame 3 clientes', mapaERP, openai, '', '', [], false
 * );
 * // builder.prompt incluye identidad + mapaERP + reglas SQL
 * // builder.configModelo.modelo === 'gpt-4o'
 */
async function construirPromptInteligente(mensaje, mapaERP, openaiClient, contextoPinecone = '', contextoDatos = '', historialConversacion = [], modoDesarrollo = false) {
    console.log('üöÄ [PROMPT-BUILDER] Construyendo prompt ULTRA-OPTIMIZADO...');
    
    // 1. LA IA DECIDE TODO - SIN AN√ÅLISIS PREVIO
    console.log('üß† [PROMPT-BUILDER] La IA analizar√° la intenci√≥n directamente...');
    
    // 2. Modelo √∫nico optimizado para todas las tareas
    const configModelo = {
        modelo: 'gpt-4o',
        maxTokens: 2000,
        temperature: 0.3,
        razon: 'Modelo √∫nico: gpt-4o maneja SQL, conversaci√≥n y RAG+SQL con excelente rendimiento'
    };
    
    // 3. SIEMPRE incluir mapaERP - la IA decide si lo usa
    const contextoMapaERP = construirContextoMapaERPCompleto(mapaERP);
    console.log('üìã [MAPA-ERP] Incluyendo mapaERP completo - IA decide si lo usa');
    
    // 4. Construir instrucciones naturales (sin an√°lisis previo)
    const instruccionesNaturales = construirInstruccionesNaturales({ tipo: 'universal' }, [], contextoPinecone);
    
    // 5. RAG INTELIGENTE - LA IA DECIDE TODO
    let contextoRAG = '';
    let necesitaRAG = true; // ‚úÖ RAG SIEMPRE activo - la IA decide si lo usa
    
    try {
        const { evaluarNecesidadRAG } = require('./ragInteligente');
        const evaluacion = await evaluarNecesidadRAG(mensaje, { umbralCaracteres: 200 });
        contextoRAG = evaluacion.contextoRAG || '';
        console.log('üß† [RAG] IA eval√∫a necesidad ‚Üí contexto:', contextoRAG.length);
    } catch (error) {
        console.log('‚ö†Ô∏è [RAG] Evaluaci√≥n fall√≥, pero RAG sigue disponible:', error.message);
    }
    
    // 6. Ensamblar prompt final (OPTIMIZADO)
    const fechaActual = new Date().toLocaleString('es-ES', { timeZone: 'Europe/Madrid', dateStyle: 'full', timeStyle: 'short' });
    const promptGlobalConFecha = promptGlobal.replace('{{FECHA_ACTUAL}}', fechaActual);
    let promptFinal = `${promptGlobalConFecha}\n` + instruccionesNaturales;
    
    // A√±adir identidad corporativa SIEMPRE (centralizada en base.js)
    promptFinal += `${promptBase}\n\n`;
    
    // A√±adir estructura de datos SIEMPRE - la IA decide si la usa
    promptFinal += `${contextoMapaERP}\n\n`;
    
    // A√±adir reglas SQL SIEMPRE - la IA decide si las usa
    promptFinal += `${sqlRules}\n\n`;
    
    // A√±adir contexto RAG si existe
    if (contextoRAG) {
        promptFinal += `CONOCIMIENTO EMPRESARIAL RELEVANTE:\n${contextoRAG}\n\n`;
    }
    
    // A√±adir contexto de datos previos si existe
    if (contextoDatos) {
        promptFinal += `DATOS DE CONTEXTO PREVIO:\n${contextoDatos}\n\n`;
    }
    
    // A√±adir contexto conversacional de forma inteligente
    if (historialConversacion && historialConversacion.length > 0) {
        const ultimosMensajes = historialConversacion.slice(-4);
        const contextoConversacional = ultimosMensajes.map(msg => 
            `${msg.role === 'user' ? 'Usuario' : 'Asistente'}: ${msg.content}`
        ).join('\n');
        
        promptFinal += `## üí¨ CONTEXTO CONVERSACIONAL RECIENTE\n\n${contextoConversacional}\n\n## üéØ INSTRUCCIONES DE CONTINUIDAD\n\n- Mant√©n la continuidad natural de la conversaci√≥n\n- NO te presentes de nuevo si ya has saludado\n- Usa el contexto previo para dar respuestas coherentes\n- Si el usuario hace referencia a algo mencionado antes, √∫salo\n- Mant√©n el tono y estilo de la conversaci√≥n en curso\n\n`;
    }
    
    console.log('‚úÖ [PROMPT-BUILDER] Prompt construido - MapaERP: SIEMPRE, RAG:', necesitaRAG ? 'S√ç' : 'NO');
    
    return {
        prompt: promptFinal,
        configModelo: configModelo,
        intencion: { tipo: 'universal', confianza: 1.0 }, // IA decide todo
        tablasRelevantes: [], // IA analiza todas las tablas del mapaERP
        metricas: {
            usaIA: true, // IA analiza mapaERP completo
            tablasDetectadas: Object.keys(mapaERP).length,
            llamadasIA: 1, // ¬°Solo UNA llamada!
            optimizado: true,
            modeloUnico: 'gpt-4o',
            mapaERPIncluido: true, // SIEMPRE incluido
            ragIncluido: necesitaRAG,
            sinHardcodeo: true // ‚úÖ Eliminado an√°lisis artificial
        }
    };
}

/**
 * Construye el contexto del mapa ERP COMPLETO para que la IA analice
 * - Incluye tablas, columnas, relaciones, y reglas para la IA
 * @param {Object} mapaERP - Objeto con estructura y metadatos del ERP
 * @returns {string} Texto de contexto para inyectar en el prompt
 * 
 * @example
 * const contexto = construirContextoMapaERPCompleto(mapaERP);
 * // Retorna string con toda la estructura de BD formateada
 */
function construirContextoMapaERPCompleto(mapaERP) {
    if (!mapaERP) {
        console.log('‚ö†Ô∏è [MAPA-ERP] No hay mapaERP disponible');
        return '';
    }
    
    let contexto = '\n=== ESTRUCTURA COMPLETA DE LA BASE DE DATOS ===\n';
    contexto += `\nTOTAL DE TABLAS DISPONIBLES: ${Object.keys(mapaERP).length}\n\n`;
    
    // Incluir TODAS las tablas del mapaERP para que la IA las analice
    Object.entries(mapaERP).forEach(([nombreTabla, infoTabla]) => {
        contexto += `\n## üìä TABLA: ${nombreTabla}\n`;
        contexto += `Descripci√≥n: ${infoTabla.descripcion || 'Sin descripci√≥n'}\n`;
        
        // Columnas disponibles
        if (infoTabla.columnas) {
            contexto += `\n### üìã COLUMNAS:\n`;
            Object.entries(infoTabla.columnas).forEach(([columna, descripcion]) => {
                contexto += `- ${columna}: ${descripcion}\n`;
            });
        }
        
        // Relaciones con otras tablas
        if (infoTabla.tablas_relacionadas) {
            contexto += `\n### üîó RELACIONES:\n`;
            Object.entries(infoTabla.tablas_relacionadas).forEach(([tablaRelacionada, infoRelacion]) => {
                contexto += `- ${tablaRelacionada}: ${infoRelacion.descripcion || 'Relaci√≥n directa'}\n`;
                if (infoRelacion.tipo) {
                    contexto += `  Tipo: ${infoRelacion.tipo}\n`;
                }
                if (infoRelacion.campo_enlace_local && infoRelacion.campo_enlace_externo) {
                    contexto += `  JOIN: ${nombreTabla}.${infoRelacion.campo_enlace_local} = ${tablaRelacionada}.${infoRelacion.campo_enlace_externo}\n`;
                }
            });
        }
        
        contexto += '\n';
    });
    
    // Instrucciones para la IA
    contexto += `\n### üéØ INSTRUCCIONES PARA LA IA:\n`;
    contexto += `- Analiza la consulta del usuario\n`;
    contexto += `- Identifica qu√© tablas del mapaERP son relevantes\n`;
    contexto += `- Usa las relaciones definidas para hacer JOINs correctos\n`;
    contexto += `- NO inventes tablas que no est√©n en esta lista\n`;
    contexto += `- Genera SQL usando EXACTAMENTE las columnas mostradas\n`;
    contexto += `- Formato: <sql>SELECT columnas FROM tabla [JOIN otras_tablas] WHERE condiciones</sql>\n\n`;

    return contexto;
}

/**
 * Construye las instrucciones naturales para el prompt de sistema
 * @param {{ tipo: string }} intencion - Intenci√≥n detectada
 * @param {string[]} tablasRelevantes - Tablas detectadas
 * @param {string} contextoPinecone - Contexto de memoria/conocimiento
 * @returns {string} Bloque de instrucciones a inyectar en el prompt
 * 
 * @example
 * const instrucciones = construirInstruccionesNaturales({ tipo: 'universal' }, [], '');
 * // Retorna string con instrucciones de comportamiento y formato
 */
function construirInstruccionesNaturales(intencion, tablasRelevantes, contextoPinecone) {
    let instrucciones = comportamientoChatGPT + '\n\n';
    instrucciones += `\n## üß† INTELIGENCIA H√çBRIDA - CONOCIMIENTO + DATOS\n\n### üìö **CONOCIMIENTO EMPRESARIAL (PRIORIDAD)**\n- Usa SIEMPRE el conocimiento empresarial como base principal\n- El contexto de Pinecone contiene informaci√≥n oficial de la empresa\n- √ösalo para explicar procedimientos, protocolos y conceptos\n\n### üóÑÔ∏è **DATOS DE BASE DE DATOS (CUANDO SEA NECESARIO)**\n- Si la consulta requiere datos actuales espec√≠ficos, genera SQL\n- Formato: \`<sql>SELECT...</sql>\`\n- Usa EXACTAMENTE las columnas de la estructura proporcionada\n- Combina conocimiento + datos de forma natural\n- **NUNCA inventes datos de entidades** (clientes, proveedores, almacenes, etc.)\n- **SIEMPRE genera SQL real** y deja que el sistema ejecute y muestre datos reales\n- **SI no hay datos reales**, di claramente "No se encontraron registros en la base de datos"\n\n### ü§ù **COMBINACI√ìN INTELIGENTE**\n- Explica el "por qu√©" usando conocimiento empresarial\n- Muestra el "qu√©" usando datos actuales cuando sea √∫til\n- Mant√©n respuestas naturales y conversacionales\n- **NUNCA mezcles datos inventados con datos reales**\n\n## üéØ **EJEMPLOS DE USO**\n\n**Consulta sobre conocimiento:**\n"qu√© significa quando el cliente dice quiero todo"\n‚Üí Usa SOLO conocimiento empresarial\n\n**Consulta sobre datos actuales:**\n"dame 2 clientes"\n‚Üí Combina conocimiento + datos SQL\n\n**Consulta compleja:**\n"cu√°ntos art√≠culos hay y qu√© tipos"\n‚Üí Explica con conocimiento + muestra datos actuales\n\n## ‚úÖ **REGLAS IMPORTANTES**\n\n1. **SIEMPRE responde** - nunca digas "no tengo informaci√≥n"\n2. **Usa emojis** y tono amigable\n3. **Mant√©n personalidad** de empleado interno\n4. **Combina fuentes** cuando sea apropiado\n5. **S√© √∫til y completo** - no restrictivo\n\n`;
    instrucciones += formatoObligatorio;
    return instrucciones;
}

/**
 * Genera embeddings para an√°lisis sem√°ntico
 * @param {string} texto - Texto a embeddear
 * @returns {Promise<number[]|null>} Vector embedding o null si falla
 * 
 * @example
 * const embedding = await generarEmbedding('texto para analizar');
 * // Retorna array de n√∫meros o null si falla
 */
async function generarEmbedding(texto) {
    try {
        const response = await openai.embeddings.create({
            model: 'text-embedding-3-small',
            input: texto
        });
        return response.data[0].embedding;
    } catch (error) {
        console.error('‚ùå [EMBEDDING] Error generando embedding:', error.message);
        return null;
    }
}



































// =====================================
// 9. FUNCI√ìN PRINCIPAL - PROCESAMIENTO DE CONSULTAS
// =====================================
// 
// Esta es la funci√≥n central que coordina todo el proceso:
// - An√°lisis de intenci√≥n y construcci√≥n de prompt
// - Llamada √∫nica optimizada a OpenAI
// - Procesamiento por tipo (SQL, conversaci√≥n, RAG+SQL)
// - Ejecuci√≥n de SQL con validaci√≥n
// - Formateo natural de respuestas
// - Personalizaci√≥n y persistencia
// - Manejo de errores y fallbacks
// =====================================

/**
 * Funci√≥n principal optimizada para procesar consultas
 * Implementa cache LRU, heur√≠stica RAG, prompts precompilados y streaming inmediato
 * @param {Object} params - Par√°metros de la consulta
 * @param {string} params.message - Mensaje del usuario
 * @param {string} params.userId - ID del usuario
 * @param {string} params.conversationId - ID de la conversaci√≥n (opcional)
 * @returns {Object} Respuesta procesada
 */
async function processQuery({ message, userId, conversationId }) {
    const tiempoInicio = Date.now();
    console.log('üöÄ [SISTEMA-CHATGPT] ===== INICIANDO PROCESO INTELIGENTE =====');
    console.log('üöÄ [SISTEMA-CHATGPT] Procesando consulta:', message);
    console.log('üöÄ [SISTEMA-CHATGPT] Usuario ID:', userId);
    
    // =====================================
    // 1. OBTENER CONTEXTO COMPLETO (PRESERVADO)
    // =====================================
    const [infoUsuario, historialConversacion] = await Promise.all([
        obtenerInfoUsuario(userId),
        obtenerHistorialConversacion(userId, conversationId)
    ]);

    console.log('üìö [CONTEXTO] Historial obtenido:', historialConversacion.length, 'mensajes');

    // =====================================
    // 2. CLASIFICACI√ìN INTELIGENTE (PRESERVA CONTEXTO)
    // =====================================
    const clasificacion = await clasificarNecesidadRAG(message, historialConversacion, openai);
    console.log('üß† [CLASIFICACION] Resultado:', clasificacion);
    
    // =====================================
    // 3. FAST-PATH PARA TRIVIALES (PRESERVA CONTEXTO)
    // =====================================
    if (clasificacion.tipo === 'trivial') {
        console.log('‚ö° [FAST-PATH] Consulta trivial detectada...');
        
        try {
            const respuestaTrivial = await procesarConsultaTrivial(message, historialConversacion);
            
            // IMPORTANTE: Guardar en historial para preservar contexto (AS√çNCRONO)
            saveAssistantMessageToFirestore(userId, respuestaTrivial, conversationId).catch(err => 
                console.error('‚ùå [FIRESTORE] Error guardando mensaje trivial:', err.message)
            );
            
            const tiempoTrivial = Date.now() - tiempoInicio;
            console.log('‚úÖ [FAST-PATH] Respuesta trivial en', tiempoTrivial, 'ms');
            
            return {
                success: true,
                response: respuestaTrivial,
                optimizado: true,
                cacheHit: false,
                tiempo: tiempoTrivial,
                clasificacion: clasificacion
            };
        } catch (error) {
            console.log('‚ö†Ô∏è [FAST-PATH] Error, continuando con flujo normal:', error.message);
        }
    }

    // =====================================
    // 4. OBTENER CONTEXTO RAG (SI ES NECESARIO)
    // =====================================
    let contextoRAG = '';
    if (clasificacion.necesitaRAG) {
        console.log('üîç [RAG] Obteniendo contexto tipo:', clasificacion.tipo);
        contextoRAG = await obtenerContextoRAG(clasificacion.tipo, message, userId);
        console.log('‚úÖ [RAG] Contexto obtenido:', contextoRAG.length, 'caracteres');
    }

    // =====================================
    // 5. CONSTRUIR PROMPT CON CONTEXTO COMPLETO
    // =====================================
    const promptOptimizado = construirPromptOptimizado(
        message, 
        clasificacion.necesitaRAG, 
        contextoRAG,
        historialConversacion // HISTORIAL COMPLETO PRESERVADO
    );

    // =====================================
    // 6. LLAMADA AL MODELO PRINCIPAL (CON CONTEXTO COMPLETO)
    // =====================================
    console.log('ü§ñ [MODELO-PRINCIPAL] Llamando a gpt-4o con contexto completo...');

    const mensajesLlamada = [
        { role: 'system', content: promptOptimizado },
        { role: 'user', content: message }
    ];

    // IMPORTANTE: Agregar HISTORIAL COMPLETO para preservar contexto
    if (historialConversacion && historialConversacion.length > 0) {
        historialConversacion.forEach((msg) => {
            mensajesLlamada.push({
                role: msg.role,
                content: msg.content
            });
        });
    }

    try {
        const response = await openai.chat.completions.create({
            model: 'gpt-4o',
            messages: mensajesLlamada,
            max_tokens: 2000,
            temperature: 0.3,
            stream: false
        });

        const respuestaIA = response.choices[0].message.content;
        console.log('‚úÖ [MODELO-PRINCIPAL] Respuesta recibida');
        console.log('üìä [MODELO-PRINCIPAL] Tokens usados:', response.usage?.total_tokens || 'N/A');

        // =====================================
        // 7. POST-PROCESAMIENTO (PRESERVA CONTEXTO)
        // =====================================
        console.log('üîç [POST-PROCESAMIENTO] Analizando respuesta para SQL...');
        
        const sqlMatch = validarRespuestaSQL(respuestaIA);
        
        if (sqlMatch) {
            console.log('üîç [SQL] SQL detectado, ejecutando an√°lisis profesional...');
            const sql = sqlMatch;
            try {
                // AN√ÅLISIS PROFESIONAL CON AST
                console.log('üß† [SQL-PARSER] Iniciando an√°lisis con AST...');
                const analisisSQL = analizarSQLProfesional(sql);
                // ...resto del an√°lisis profesional aqu√≠ (no se repite para evitar duplicidad)...
                // El resto del c√≥digo del an√°lisis profesional ya est√° en el archivo, solo se reubica el try
            } catch (error) {
                // Manejo de errores del an√°lisis SQL profesional
                console.error('‚ùå [SQL-PARSER] Error inesperado en an√°lisis SQL profesional:', error.message);
                const respuestaError = `Ocurri√≥ un error inesperado al analizar la consulta SQL. Por favor, revisa tu consulta o intenta de nuevo.`;
                saveAssistantMessageToFirestore(userId, respuestaError, conversationId).catch(err => 
                    console.error('‚ùå [FIRESTORE] Error guardando respuesta de error SQL:', err.message)
                );
                return {
                    success: false,
                    response: respuestaError,
                    error: error.message,
                    optimizado: true,
                    clasificacion: clasificacion
                };
            }
        }
        // Si no hay SQL, continuar con respuesta conversacional
        // IMPORTANTE: Guardar en historial para preservar contexto (AS√çNCRONO)
        saveAssistantMessageToFirestore(userId, respuestaIA, conversationId).catch(err => 
            console.error('‚ùå [FIRESTORE] Error guardando respuesta conversacional:', err.message)
        );
        const tiempoTotal = Date.now() - tiempoInicio;
        return {
            success: true,
            response: respuestaIA,
            tiempo: tiempoTotal,
            optimizado: true,
            clasificacion: clasificacion
        };
    } catch (error) {
        // Manejo de errores generales de la llamada principal
        console.error('‚ùå [SISTEMA-CHATGPT] Error inesperado en el procesamiento:', error.message);
        const respuestaError = `Ocurri√≥ un error inesperado al procesar tu consulta. Por favor, intenta de nuevo m√°s tarde.`;
        saveAssistantMessageToFirestore(userId, respuestaError, conversationId).catch(err => 
            console.error('‚ùå [FIRESTORE] Error guardando respuesta de error general:', err.message)
        );
        return {
            success: false,
            response: respuestaError,
            error: error.message,
            optimizado: false
        };
    }
}

// =====================================
// 10. M√ìDULO DE EXPORTACI√ìN
// =====================================
// 
// Este m√≥dulo exporta las funciones principales:
// - processQuery: Procesamiento est√°ndar de consultas
// - processQueryStream: Procesamiento con streaming en tiempo real
// 
// USO EN OTROS ARCHIVOS:
// const { processQuery, processQueryStream } = require('./admin/core/openAI');
// =====================================

/**
 * Funci√≥n de streaming para procesamiento en tiempo real
 * Proporciona respuesta chunk por chunk al frontend
 * 
 * @param {Object} params - Par√°metros de la consulta
 * @param {string} params.message - Mensaje del usuario
 * @param {string} params.userId - ID del usuario
 * @param {string} params.conversationId - ID de la conversaci√≥n
 * @param {Object} params.response - Objeto de respuesta HTTP
 * @returns {Object} Resultado del procesamiento
 * 
 * CARACTER√çSTICAS:
 * - Streaming en tiempo real chunk por chunk
 * - Procesamiento post-streaming para SQL
 * - Segunda llamada para explicaci√≥n natural
 * - Headers especiales para streaming HTTP
 * - Manejo de errores en tiempo real
 * - Persistencia as√≠ncrona de respuestas
 * 
 * @example
 * // Dentro de un handler Express:
 * app.post('/api/stream', async (req, res) => {
 *   res.setHeader('Content-Type', 'text/plain; charset=utf-8');
 *   await processQueryStream({
 *     message: req.body.message,
 *     userId: req.user.uid,
 *     conversationId: req.body.conversationId,
 *     response: res
 *   });
 * });
 */
async function processQueryStream({ message, userId, conversationId, response }) {
    const tiempoInicio = Date.now();
    console.log('üöÄ [STREAMING] ===== INICIANDO PROCESO DE CONSULTA CON STREAMING =====');
    console.log('üöÄ [STREAMING] Procesando consulta:', message);
    console.log('üöÄ [STREAMING] Usuario ID:', userId);
    console.log('üöÄ [STREAMING] Conversaci√≥n ID:', conversationId);

    // =====================================
    // OBTENER INFORMACI√ìN DEL USUARIO Y CONTEXTO
    // =====================================
    
    const infoUsuario = await obtenerInfoUsuario(userId);
    const historialConversacion = await obtenerHistorialConversacion(userId, conversationId);

    try {
        // No esperar a que termine de guardar - hacer async
        saveMessageToFirestore(userId, message, conversationId).catch(err => 
            console.error('‚ùå [FIRESTORE] Error guardando mensaje:', err.message)
        );
        console.log('üíæ [FIRESTORE] Guardando mensaje del usuario (async)...');

        // =====================================
        // OBTENER CONTEXTO DE MEMORIA (SOLO CUANDO ES NECESARIO)
        // =====================================
        
        console.log('üß† [MEMORIA] Analizando si necesita contexto conversacional...');
        let contextoPinecone = '';
        
        // Detecci√≥n ultra-r√°pida para consultas que necesitan memoria
        const consultasQueNecesitanMemoria = /\b(anterior|antes|mencionaste|dijiste|conversaci√≥n|conversacion|hablamos|recordar|recuerdas|me|mi|entonces|y|bueno|ok|si|s√≠|contin√∫a|continua|m√°s|mas|otros|otra|que|qu√©)\b/i;
        const esRespuestaCorta = message.trim().length < 15;
        const necesitaContexto = consultasQueNecesitanMemoria.test(message) || esRespuestaCorta || historialConversacion.length > 0;
        
        if (necesitaContexto) {
            console.log('üß† [MEMORIA] Consulta requiere contexto - buscando en memoria...');
            
            // Agregar contexto conversacional al contexto de memoria
            if (historialConversacion.length > 0) {
                const ultimosMensajes = historialConversacion.slice(-2); // Solo los 2 √∫ltimos
                const contextoConversacional = ultimosMensajes.map(msg => 
                    `${msg.role === 'user' ? 'Usuario' : 'Asistente'}: ${msg.content}`
                ).join('\n');
                
                contextoPinecone += `\n=== CONTEXTO CONVERSACIONAL RECIENTE ===\n${contextoConversacional}\n\nINSTRUCCI√ìN: Mant√©n la continuidad de la conversaci√≥n anterior.`;
            }
            
            // B√∫squeda de memoria as√≠ncrona (no bloquear la respuesta)
            pineconeMemoria.agregarContextoMemoria(userId, message)
                .then(memoriaAdicional => {
                if (memoriaAdicional) {
                        console.log('‚úÖ [PINECONE] Memoria adicional encontrada (async)');
                    }
                })
                .catch(error => {
                    console.error('‚ùå [PINECONE] Error buscando recuerdos (async):', error.message);
                });
        } else {
            console.log('‚ö° [OPTIMIZACI√ìN] Consulta simple - saltando b√∫squeda de memoria');
        }

        // =====================================
        // CONSTRUIR PROMPT OPTIMIZADO (SIN LLAMADAS IA)
        // =====================================
        
        console.log('üß† [IA-INTELIGENTE] Construyendo prompt OPTIMIZADO...');
        const promptBuilder = await construirPromptInteligente(
            message, 
            mapaERP,
            openai,
            contextoPinecone, 
            lastRealData || '',
            false
        );
        
        console.log('üß† [IA-INTELIGENTE] M√©tricas de construcci√≥n:');
        console.log('üß† [IA-INTELIGENTE] Intenci√≥n detectada:', promptBuilder.intencion);
        console.log('üß† [IA-INTELIGENTE] Modelo seleccionado:', promptBuilder.configModelo.modelo);

        // =====================================
        // CONFIGURAR MENSAJES PARA STREAMING
        // =====================================

        // Construir array de mensajes con historial conversacional
        const mensajesLlamada = [
            {
                role: 'system',
                content: promptBuilder.prompt
            }
        ];

        // Agregar historial conversacional como mensajes reales
        if (historialConversacion && historialConversacion.length > 0) {
            console.log('üí¨ [STREAMING-CONTEXTO] Agregando historial conversacional como mensajes reales...');
            historialConversacion.forEach((msg, index) => {
                console.log(`üí¨ [STREAMING-CONTEXTO] Mensaje ${index + 1}: ${msg.role} - "${msg.content.substring(0, 100)}..."`);
                mensajesLlamada.push({
                    role: msg.role,
                    content: msg.content
                });
            });
        }

        // Agregar el mensaje actual del usuario
        mensajesLlamada.push({
            role: 'user', 
            content: message
        });

        console.log('üìä [STREAMING] Iniciando llamada con stream a OpenAI...');
        console.log('ü§ñ [MODELO-DIN√ÅMICO] Usando modelo:', promptBuilder.configModelo.modelo);

        // =====================================
        // LLAMADA CON STREAMING
        // =====================================

        // Configurar headers para streaming
        response.writeHead(200, {
            'Content-Type': 'text/plain; charset=utf-8',
            'Transfer-Encoding': 'chunked',
            'Access-Control-Allow-Origin': '*',
            'Access-Control-Allow-Headers': 'Content-Type',
            'Cache-Control': 'no-cache',
            'Connection': 'keep-alive'
        });

        let fullResponse = '';
        let tokenCount = 0;
        let sqlDetected = false;

        try {
            const stream = await openai.chat.completions.create({
                model: promptBuilder.configModelo.modelo,
                messages: mensajesLlamada,
                max_tokens: promptBuilder.configModelo.maxTokens,
                temperature: promptBuilder.configModelo.temperature,
                stream: true  // ¬°AQU√ç EST√Å LA MAGIA!
            });

            console.log('‚úÖ [STREAMING] Stream iniciado correctamente');

            // Procesar cada chunk del stream
            for await (const chunk of stream) {
                const content = chunk.choices[0]?.delta?.content;
                
                if (content) {
                    fullResponse += content;
                    tokenCount++;
                    
                    // Detectar si hay SQL en la respuesta acumulada
                    if (!sqlDetected && fullResponse.includes('<sql>')) {
                        sqlDetected = true;
                        console.log('üîç [STREAMING] SQL detectado en respuesta');
                        
                        // Enviar mensaje de "pensando" en lugar del contenido con SQL
                        response.write(JSON.stringify({
                            type: 'thinking',
                            message: 'Buscando informaci√≥n en el ERP',
                            timestamp: Date.now()
                        }) + '\n');
                    }
                    
                    // Solo enviar chunks si NO se detect√≥ SQL
                    if (!sqlDetected) {
                        response.write(JSON.stringify({
                            type: 'chunk',
                            content: content,
                            timestamp: Date.now()
                        }) + '\n');
                    }
                }
                
                // Si el stream termin√≥
                if (chunk.choices[0]?.finish_reason) {
                    console.log('‚úÖ [STREAMING] Stream completado');
                    break;
                }
            }

            // =====================================
            // PROCESAMIENTO POST-STREAMING
            // =====================================

            console.log('üîç [STREAMING] Procesando respuesta para SQL...');
            
            let finalMessage = fullResponse;
            
            // Verificar si la IA gener√≥ SQL en la respuesta
            const sql = validarRespuestaSQL(fullResponse);
            
            if (sql) {
                console.log('‚úÖ [STREAMING] SQL encontrado, ejecutando consulta...');
                console.log('üîç [STREAMING] SQL original:', sql);
                try {
                    const results = await executeQuery(sql);
                    
                    if (results && results.length > 0) {
                        // Guardar los resultados reales para contexto futuro
                        lastRealData = JSON.stringify(results);
                        
                        console.log('‚úÖ [STREAMING] SQL ejecutado exitosamente - haciendo segunda llamada para explicar datos');
                        
                        // Segunda llamada a la IA para explicar los datos reales de forma natural
                        const promptExplicacion = `Eres el asistente inteligente de Semilleros Deitana, una empresa agr√≠cola especializada en producci√≥n de semillas y tomates. Tu comportamiento debe ser exactamente como ChatGPT: **natural, inteligente, √∫til y visualmente atractivo**.

## üéØ FUNCI√ìN PRINCIPAL

Tu tarea principal es explicar de forma natural y amigable los resultados de una consulta SQL.

CONSULTA ORIGINAL: "${message}"  
SQL EJECUTADO: ${sql}  
RESULTADOS: ${JSON.stringify(results, null, 2)}

---

## üìå INSTRUCCIONES BASE:

- Explica los resultados de forma natural y conversacional
- Usa **"NOSOTROS"** y **"NUESTRA empresa"** como si fueras un empleado interno
- S√© espec√≠fico sobre los datos encontrados
- Si no hay resultados, explica claramente que no se encontraron registros
- Mant√©n un tono **amigable, profesional y humano**
- Usa emojis apropiados para hacer la respuesta m√°s atractiva

---

## üåæ CONTEXTO DE SEMILLEROS DEITANA

- **SIEMPRE** interpreta t√©rminos agr√≠colas en contexto profesional
- **NUNCA** uses lenguaje o met√°foras de entretenimiento o juegos
- Aplica estos significados espec√≠ficos:
  - **Partida** = tanda de siembra espec√≠fica (‚ö†Ô∏è no es juego)
  - **Injertos** = uni√≥n vegetal para mejorar resistencia
  - **Bandejas** = contenedores con alv√©olos
  - **Alv√©olos** = cavidades donde crecen pl√°ntulas

---

## üß† INTELIGENCIA Y RAZONAMIENTO

### ‚úÖ 1. Razonamiento Paso a Paso

Para problemas complejos:
- Explica paso a paso con l√≥gica clara
- Usa estructura visual y numeraci√≥n

**Ejemplo:**
\\\
## ü§î Analicemos esto paso a paso:

### 1Ô∏è‚É£ **Primer paso**: [Definir el problema]  
### 2Ô∏è‚É£ **Segundo paso**: [An√°lisis de datos]  
### 3Ô∏è‚É£ **Conclusi√≥n**: [Resultado o decisi√≥n]
\\\

---

### ‚úÖ 2. Mant√©n el Contexto Conversacional

- Si el usuario responde "¬øY?" o "Entonces?", contin√∫a desde el tema anterior
- Si dice "ok", ofrece el siguiente paso o ampl√≠a
- **Nunca digas** "No tengo informaci√≥n suficiente"
- **S√≠ di**: "Te explico lo que encontr√© y si quer√©s, profundizo m√°s sobre..."

---

## üßë‚Äçüè´ INTERACCI√ìN NATURAL

### üí¨ 3. Tono Adaptativo

Adapta tu estilo al usuario:
- Formal ‚Üí Profesional
- Casual ‚Üí Con emojis y m√°s cercano
- T√©cnico ‚Üí Con detalles avanzados
- Novato ‚Üí Explicaciones simples y claras

---

### üéØ 4. Reformulaci√≥n Inteligente

Cuando el mensaje del usuario sea ambiguo:
1. Interpreta la intenci√≥n m√°s probable
2. Reformula lo que entendiste
3. Responde en base a esa interpretaci√≥n
4. Ofrece corregir si no era eso

**Ejemplo:**
> "Parece que quer√≠as saber sobre [X]. Te explico esto, y si no era eso, contame m√°s detalles üòä"

---

### üëÄ 5. Confirmaciones Inteligentes

Para acciones importantes:
- ‚ö†Ô∏è "¬øConfirm√°s que quer√©s eliminar esto?"
- üì§ "¬øProcedo a enviar esta informaci√≥n?"
- üîÑ "¬øAplico los cambios?"

---

## üßæ CONTENIDO ENRIQUECIDO Y VISUAL

### üé® 6. Formato Markdown Obligatorio

**Siempre que sea posible, us√°:**

- # T√≠tulos con emojis
- ## Subt√≠tulos para organizaci√≥n
- **Negritas** para conceptos clave  
- *Cursivas* para aclaraciones  
- ‚úÖ Listas con emojis  
- > Blockquotes para tips o recordatorios  
- \`c√≥digo inline\` para variables o t√©rminos clave  
- Tablas para comparaciones o datos

**Ejemplo:**
\\\markdown
| üìä A√±o | üßÆ Cantidad de partidas |
|-------|--------------------------|
| 2023  | 145                      |
| 2024  | 180                      |
\\\

---

## üß≠ PERSONALIDAD INTELIGENTE

### üí° 9. Tu personalidad como IA

Eres:
- ü§ù Emp√°tico
- üß† Inteligente y anal√≠tico
- üéØ Pr√°ctico y √∫til
- üòä Amigable y claro

No eres:
- ‚ùå Rob√≥tico
- ‚ùå Vago o poco detallado
- ‚ùå Formal en exceso

---

### üìö 10. Res√∫menes y Par√°frasis

Cuando el usuario escriba algo largo/confuso:
> "üìù **Resumen:** Entiendo que quer√≠as [tema]. Vamos a verlo juntos."

---

### ‚úçÔ∏è 11. Herramientas de Escritura Inteligente

Si hay errores de escritura:
> "üìù Entiendo que quer√≠as decir [X]..."

Ofrece versiones alternativas:
> "üéØ ¬øQuer√©s que te lo diga de forma:
> - üíº Profesional
> - üó£Ô∏è M√°s directa
> - üìö M√°s detallada?"

---

## üîÑ CONTINUIDAD CONVERSACIONAL

### üìå 15. Confirmaci√≥n de Entendimiento

Siempre responde algo como:
> "üìã Entiendo que necesit√°s [resumen]. ¬øEs correcto? Te muestro lo que encontr√© üëá"

---

### üß© 16. Divisi√≥n por Partes

Cuando haya mucha info:
> "üìö Te explico esto por partes:

## 1Ô∏è‚É£ Parte 1: [Base]
## 2Ô∏è‚É£ Parte 2: [Detalles]
## 3Ô∏è‚É£ Parte 3: [Aplicaciones]

¬øQuer√©s que profundice en alguna?"

---

## ‚≠ê REGLAS DE ORO

### ‚úÖ SIEMPRE:

1. üé® Usa Markdown y emojis  
2. üß† Razon√° paso a paso  
3. üîÑ Mant√©n el hilo conversacional  
4. üí° Agreg√° valor extra si pod√©s  
5. üòä S√© c√°lido, humano y profesional

### ‚ùå NUNCA:

1. ‚ùå Responder con texto plano sin formato  
2. ‚ùå Decir que no se tiene info sin intentar ayudar  
3. ‚ùå Ignorar contexto anterior  
4. ‚ùå Ser seco, rob√≥tico o sin ejemplos

---

## üìå EJEMPLO DE RESPUESTA IDEAL

\\\markdown
# üå± An√°lisis de Partidas por A√±o

Consultamos cu√°ntas partidas de siembra se realizaron por a√±o.

## üìä Resultados encontrados:

| üìÖ A√±o | üå± Partidas |
|-------|-------------|
| 2023  | 154         |
| 2024  | 198         |

## ü§î ¬øQu√© significa esto?

- En **2024** tuvimos un aumento significativo en partidas, lo que indica mayor actividad de siembra.
- Esto puede deberse a campa√±as m√°s intensas o demanda de clientes.

üí¨ ¬øQuer√©s que analice alguna variedad o cultivo espec√≠fico? Estoy para ayudarte üåø
\\\
`;

                        // Segunda llamada con historial para mantener contexto
                        const mensajesSegundaLlamada = [
                            {
                                role: 'system',
                                content: promptExplicacion
                            }
                        ];

                        // Agregar historial conversacional a la segunda llamada tambi√©n
                        if (historialConversacion && historialConversacion.length > 0) {
                            historialConversacion.forEach((msg) => {
                                mensajesSegundaLlamada.push({
                                    role: msg.role,
                                    content: msg.content
                                });
                            });
                        }

                        const segundaLlamada = await openai.chat.completions.create({
                            model: 'gpt-4o',
                            messages: mensajesSegundaLlamada,
                            max_tokens: 500,
                            temperature: 0.7
                        });

                        const explicacionNatural = segundaLlamada.choices[0].message.content;
                        
                        // Reemplazar la respuesta t√©cnica con la explicaci√≥n natural
                        finalMessage = explicacionNatural;
                        
                        console.log('‚úÖ [STREAMING] Segunda llamada completada - respuesta natural generada');
                    } else {
                        // Si no hay resultados, mantener la respuesta original del modelo
                        console.log('üìö [STREAMING] Sin resultados SQL - usar respuesta del modelo');
                    }
                } catch (error) {
                    console.error('‚ùå [STREAMING-SQL] Error ejecutando consulta:', error.message);
                    // Mantener la respuesta original del modelo si hay error
                    console.log('üìö [STREAMING] Error en SQL - usar respuesta del modelo');
                }
            } else {
                console.log('üìö [STREAMING] Sin SQL - usar respuesta del modelo tal como est√°');
            }

            // Personalizar respuesta con nombre del usuario
            const respuestaPersonalizada = personalizarRespuesta(finalMessage, infoUsuario.nombre);

            // Enviar se√±al de finalizaci√≥n con conversationId
            response.write(JSON.stringify({
                type: 'end',
                fullResponse: respuestaPersonalizada,
                conversationId: conversationId,
                tokenCount: tokenCount,
                timestamp: Date.now()
            }) + '\n');

            response.end();

            // =====================================
            // POST-PROCESAMIENTO (ASYNC)
            // =====================================

            // Guardar respuesta completa en el historial de chat
            if (conversationId) {
                chatManager.addMessageToConversation(userId, conversationId, {
                    role: 'assistant',
                    content: respuestaPersonalizada
                }).catch(err =>
                    console.error('‚ùå [CHAT-HISTORY] Error guardando respuesta:', err.message)
                );
            }

            // Guardar respuesta completa en Firestore (async)
            saveAssistantMessageToFirestore(userId, respuestaPersonalizada, conversationId).catch(err =>
                console.error('‚ùå [FIRESTORE] Error guardando respuesta:', err.message)
            );

            // Guardar en memoria solo si es importante (async)
            if (respuestaPersonalizada.length > 400 || message.includes('importante') || message.includes('recuerda')) {
                try {
                    pineconeMemoria.guardarAutomatico(userId, message, respuestaPersonalizada).catch(err =>
                        console.error('‚ùå [PINECONE] Error guardando en memoria:', err.message)
                    );
                } catch (error) {
                    console.error('‚ùå [PINECONE] Error guardando en memoria:', error.message);
                }
            }

            const tiempoTotal = Date.now() - tiempoInicio;
            console.log('üìä [STREAMING] Tiempo total:', tiempoTotal, 'ms');
            console.log('üìä [STREAMING] Tokens generados:', tokenCount);
            console.log('üìä [STREAMING] Respuesta completa enviada exitosamente');
            console.log('üîÑ [STREAMING] Conversaci√≥n guardada en historial:', conversationId);

            return { success: true, streamed: true, conversationId };

        } catch (streamError) {
            console.error('‚ùå [STREAMING] Error en stream:', streamError);
            
            // Enviar error al frontend
            response.write(JSON.stringify({
                type: 'error',
                message: 'Error en el streaming',
                timestamp: Date.now()
            }) + '\n');
            
            response.end();
            return { success: false, error: streamError.message };
        }

    } catch (error) {
        console.error('‚ùå [STREAMING] Error cr√≠tico:', error);
        
        if (!response.headersSent) {
            response.writeHead(500, { 'Content-Type': 'application/json' });
            response.end(JSON.stringify({ 
                success: false, 
                error: 'Error interno del servidor' 
            }));
        }
        
        return { success: false, error: error.message };
    }
}

/**
 * Exportar la funci√≥n principal para su uso en otros archivos
 */
module.exports = {
    processQuery,
    processQueryStream,
    inicializarPromptsPrecompilados
};

// =====================================
// INICIALIZACI√ìN AUTOM√ÅTICA
// =====================================
// 
// Inicializar prompts precompilados al cargar el m√≥dulo
// Esto evita I/O en cada petici√≥n y mejora el rendimiento
// =====================================

// Inicializar prompts precompilados inmediatamente
inicializarPromptsPrecompilados().catch(error => {
    console.error('‚ùå [INICIALIZACION] Error inicializando prompts:', error.message);
});

console.log('üöÄ [SISTEMA-OPTIMIZADO] M√≥dulo openAI optimizado cargado correctamente');
console.log('üìä [CACHE] Cache LRU inicializado con capacidad:', trivialResponseCache.maxSize);
console.log('‚ö° [OPTIMIZACIONES] Heur√≠stica RAG, prompts precompilados y cache activos');

// =====================================
// HEUR√çSTICA NO-ML PARA DECIDIR RAG
// =====================================
// 
// Sistema de heur√≠stica determin√≠stica que:
// - Detecta patrones que probablemente necesiten datos externos
// - Evita llamadas innecesarias a RAG (~1-2s de ahorro)
// - No reduce calidad del modelo (IA sigue decidiendo)
// - Basado en regex, patrones y entidades conocidas
// =====================================

/**
 * Heur√≠stica r√°pida para decidir si necesita RAG
 * @param {string} mensaje - Mensaje del usuario
 * @returns {boolean} True si probablemente necesita RAG
 */
function necesitaRAGHeuristica(mensaje) {
    const mensajeLower = mensaje.toLowerCase();
    
    // Patrones que indican necesidad de datos externos
    const patronesRAG = [
        // Consultas de datos espec√≠ficos
        /\b(mostrar|dame|dime|busca|encontrar|cu√°ntos|cuantas|cuanto|cuanta)\b/,
        /\b(clientes?|proveedores?|art√≠culos?|partidas?|bandejas?|t√©cnicos?)\b/,
        /\b(√∫ltimo|√∫ltima|reciente|actual|hoy|ayer|semana|mes|a√±o)\b/,
        /\b(factura|pedido|venta|compra|inventario|stock)\b/,
        /\b(n√∫mero|id|c√≥digo|referencia)\b/,
        
        // Consultas de conocimiento empresarial
        /\b(qu√© significa|que significa|como funciona|c√≥mo funciona)\b/,
        /\b(protocolo|proceso|procedimiento|pol√≠tica)\b/,
        /\b(injerto|germinaci√≥n|c√°mara|desinfecci√≥n|fertilizante)\b/,
        /\b(pedro mu√±oz|quiero todo|entrada en c√°mara)\b/,
        
        // Consultas de contexto
        /\b(anterior|antes|mencionaste|dijiste|recordar|recuerdas)\b/,
        /\b(conversaci√≥n|conversacion|hablamos|entonces)\b/,
        
        // Consultas complejas
        /\b(y|tambi√©n|adem√°s|m√°s|otros|otra|que|qu√©)\b/,
        /\b(comparar|diferencias|similitudes|an√°lisis|reporte)\b/
    ];
    
    // Verificar si coincide con alg√∫n patr√≥n
    const coincidePatron = patronesRAG.some(patron => patron.test(mensajeLower));
    
    // Verificar longitud (consultas largas suelen necesitar m√°s contexto)
    const esConsultaLarga = mensaje.length > 50;
    
    // Verificar si contiene signos de interrogaci√≥n
    const tienePreguntas = mensaje.includes('?') || mensaje.includes('¬ø');
    
    // Verificar si contiene n√∫meros (puede indicar consultas espec√≠ficas)
    const tieneNumeros = /\d/.test(mensaje);
    
    // Verificar si contiene nombres de tablas conocidas
    const tablasConocidas = ['clientes', 'articulos', 'tecnicos', 'proveedores', 'partidas'];
    const mencionaTablas = tablasConocidas.some(tabla => mensajeLower.includes(tabla));
    
    // L√≥gica de decisi√≥n
    const necesitaRAG = coincidePatron || esConsultaLarga || tienePreguntas || 
                       tieneNumeros || mencionaTablas;
    
    console.log('üîç [HEURISTICA-RAG] An√°lisis:', {
        mensaje: mensaje.substring(0, 50) + '...',
        coincidePatron,
        esConsultaLarga,
        tienePreguntas,
        tieneNumeros,
        mencionaTablas,
        necesitaRAG
    });
    
    return necesitaRAG;
}

// =====================================
// SISTEMA FAST-PATH TIPO CHATGPT
// =====================================

/**
 * Analiza complejidad de forma r√°pida (sin IA)
 * @param {string} mensaje - Mensaje del usuario
 * @returns {number} Score de complejidad (0-1)
 */
function analizarComplejidadRapida(mensaje) {
    const longitud = mensaje.length;
    const palabras = mensaje.split(' ').length;
    const tieneInterrogacion = mensaje.includes('?');
    const tienePalabrasClave = /(cu√°ntos|cu√°ntas|dame|muestra|lista|clientes|proveedores|art√≠culos|datos|informaci√≥n|tabla|significa|funciona|protocolo|proceso)/i.test(mensaje);
    const tieneNumeros = /\d/.test(mensaje);
    
    let complejidad = 0;
    
    // Factores de complejidad
    if (longitud > 50) complejidad += 0.3;
    if (palabras > 8) complejidad += 0.2;
    if (tieneInterrogacion) complejidad += 0.2;
    if (tienePalabrasClave) complejidad += 0.4;
    if (tieneNumeros) complejidad += 0.1;
    
    return Math.min(complejidad, 1);
}

/**
 * Detecta si es consulta trivial de forma inteligente
 * @param {string} mensaje - Mensaje del usuario
 * @param {Array} historial - Historial conversacional
 * @returns {boolean} True si es trivial
 */
function esConsultaTrivial(mensaje, historial = []) {
    const complejidad = analizarComplejidadRapida(mensaje);
    const contexto = historial.length;
    const esPrimeraInteraccion = contexto === 0;
    
    // Heur√≠stica inteligente: consultas simples con poco contexto
    return complejidad < 0.3 && contexto < 8 && !esPrimeraInteraccion;
}

/**
 * Respuestas variadas con personalidad de Semilleros Deitana
 */
const respuestasVariadas = {
    saludo: [
        "¬°Hola! üå± ¬øEn qu√© puedo ayudarte hoy en Semilleros Deitana?",
        "¬°Hola! üíö Me alegra verte. ¬øC√≥mo puedo asistirte con nuestros servicios?",
        "¬°Hola! üåø Bienvenido a Semilleros Deitana. ¬øEn qu√© te ayudo?",
        "¬°Hola! üå± ¬øQu√© te gustar√≠a saber sobre nuestros productos?",
        "¬°Hola! üíö ¬øC√≥mo puedo ser √∫til hoy?"
    ],
    agradecimiento: [
        "¬°De nada! üå± Estoy aqu√≠ para ayudarte siempre que lo necesites.",
        "¬°Un placer! üíö Si tienes m√°s preguntas, no dudes en consultarme.",
        "¬°Por supuesto! üåø Me alegra haber podido ayudarte.",
        "¬°De nada! üå± ¬øHay algo m√°s en lo que pueda asistirte?",
        "¬°Un gusto! üíö Estoy aqu√≠ para lo que necesites."
    ],
    confirmacion: [
        "¬°Perfecto! üå± ¬øHay algo m√°s en lo que pueda ayudarte?",
        "¬°Excelente! üíö ¬øNecesitas informaci√≥n adicional?",
        "¬°Genial! üåø ¬øQu√© m√°s te gustar√≠a saber?",
        "¬°Muy bien! üå± ¬øEn qu√© m√°s puedo ser √∫til?",
        "¬°Perfecto! üíö ¬øHay alguna otra consulta?"
    ],
    ayuda: [
        "¬°Por supuesto! üå± Puedo ayudarte con informaci√≥n sobre clientes, proveedores, productos, procesos y mucho m√°s. ¬øQu√© te interesa?",
        "¬°Claro! üíö Estoy aqu√≠ para responder tus preguntas sobre Semilleros Deitana. ¬øQu√© necesitas saber?",
        "¬°Te ayudo! üåø Puedo consultar datos, explicar procesos, buscar informaci√≥n y m√°s. ¬øQu√© te gustar√≠a?",
        "¬°Por supuesto! üå± ¬øQu√© informaci√≥n necesitas sobre la empresa?",
        "¬°Claro! üíö ¬øEn qu√© puedo ayudarte espec√≠ficamente?"
    ]
};

/**
 * Detecta el tipo de respuesta trivial
 * @param {string} mensaje - Mensaje normalizado
 * @returns {string} Tipo de respuesta
 */
function detectarTipoRespuesta(mensaje) {
    const mensajeLower = mensaje.toLowerCase();
    
    if (/^(hola|buenos|buenas|saludos)/.test(mensajeLower)) return 'saludo';
    if (/^(gracias|gracie|thx)/.test(mensajeLower)) return 'agradecimiento';
    if (/^(ok|okay|perfecto|genial|excelente|bien)/.test(mensajeLower)) return 'confirmacion';
    if (/^(ayuda|help|que hacer|no se)/.test(mensajeLower)) return 'ayuda';
    
    return 'saludo'; // Por defecto
}

/**
 * Genera respuesta trivial con personalidad
 * @param {string} mensaje - Mensaje del usuario
 * @param {string} tipo - Tipo de respuesta
 * @returns {string} Respuesta personalizada
 */
function generarRespuestaTrivial(mensaje, tipo) {
    const respuestas = respuestasVariadas[tipo] || respuestasVariadas.saludo;
    const respuesta = respuestas[Math.floor(Math.random() * respuestas.length)];
    
    return respuesta;
}

/**
 * Procesa consulta trivial SIN llamadas a API (verdaderamente r√°pido)
 * @param {string} mensaje - Mensaje del usuario
 * @param {Array} historial - Historial conversacional
 * @returns {string} Respuesta instant√°nea
 */
async function procesarConsultaTrivial(mensaje, historial) {
    console.log('‚ö° [FAST-PATH] Generando respuesta instant√°nea...');
    
    // Normalizar mensaje para clasificaci√≥n
    const mensajeNormalizado = mensaje.toLowerCase().trim();
    
    // Detectar tipo de respuesta
    const tipo = detectarTipoRespuesta(mensajeNormalizado);
    
    // Generar respuesta instant√°nea (sin API)
    const respuesta = generarRespuestaTrivial(mensaje, tipo);
    
    console.log('‚úÖ [FAST-PATH] Respuesta generada instant√°neamente');
    return respuesta;
}

// =====================================
// SISTEMA DE CLASIFICACI√ìN INTELIGENTE TIPO CHATGPT
// =====================================

/**
 * Clasifica la necesidad de RAG de forma inteligente (tipo ChatGPT)
 * @param {string} mensaje - Mensaje del usuario
 * @param {Array} historial - Historial conversacional completo
 * @param {Object} openai - Cliente OpenAI
 * @returns {Promise<Object>} Clasificaci√≥n con metadata
 */
async function clasificarNecesidadRAG(mensaje, historial, openai) {
    console.log('üß† [CLASIFICADOR] Analizando necesidad de RAG...');
    
    // 1. Fast-path heur√≠stico (casos evidentes)
    const clasificacionRapida = clasificacionHeuristicaRapida(mensaje);
    if (clasificacionRapida.confianza > 0.8) {
        console.log('‚ö° [CLASIFICADOR] Fast-path:', clasificacionRapida);
        return clasificacionRapida;
    }
    
    // 2. Mini-LLM para casos no evidentes
    try {
        const clasificacionLLM = await clasificarConMiniLLM(mensaje, historial, openai);
        console.log('ü§ñ [CLASIFICADOR] Mini-LLM:', clasificacionLLM);
        return clasificacionLLM;
    } catch (error) {
        console.log('‚ö†Ô∏è [CLASIFICADOR] Fallback a heur√≠stica:', error.message);
        return clasificacionRapida;
    }
}

/**
 * Clasificaci√≥n heur√≠stica r√°pida (sin IA)
 * @param {string} mensaje - Mensaje del usuario
 * @returns {Object} Clasificaci√≥n r√°pida
 */
function clasificacionHeuristicaRapida(mensaje) {
    const mensajeLower = mensaje.toLowerCase();
    
    // Patrones evidentes que NO necesitan RAG
    const patronesTriviales = [
        'hola', 'buenos', 'buenas', 'saludos', 'gracias', 'ok', 'okay',
        'perfecto', 'genial', 'excelente', 'bien', 'mal', 'ayuda'
    ];
    
    // Patrones evidentes que S√ç necesitan RAG
    const patronesConocimiento = [
        'qu√© significa', 'que significa', 'como funciona', 'c√≥mo funciona',
        'protocolo', 'proceso', 'procedimiento', 'explica', 'describe',
        'qu√© es', 'que es', 'definici√≥n', 'definicion'
    ];
    
    // Patrones evidentes de datos
    const patronesDatos = [
        'cu√°ntos', 'cu√°ntas', 'dame', 'muestra', 'lista', 'clientes',
        'proveedores', 'art√≠culos', 'datos', 'informaci√≥n', 'tabla'
    ];
    
    // An√°lisis r√°pido
    const esTrivial = patronesTriviales.some(patron => mensajeLower.includes(patron));
    const esConocimiento = patronesConocimiento.some(patron => mensajeLower.includes(patron));
    const esDatos = patronesDatos.some(patron => mensajeLower.includes(patron));
    
    if (esTrivial) {
        return { necesitaRAG: false, tipo: 'trivial', confianza: 0.9, razon: 'Consulta trivial' };
    }
    
    if (esConocimiento) {
        return { necesitaRAG: true, tipo: 'conocimiento_empresarial', confianza: 0.9, razon: 'Pregunta de conocimiento' };
    }
    
    if (esDatos) {
        return { necesitaRAG: true, tipo: 'base_datos', confianza: 0.8, razon: 'Consulta de datos' };
    }
    
    return { necesitaRAG: false, tipo: 'conversacion', confianza: 0.5, razon: 'No determinado' };
}

/**
 * Clasificaci√≥n con Mini-LLM (preserva contexto)
 * @param {string} mensaje - Mensaje actual
 * @param {Array} historial - Historial completo (se preserva)
 * @param {Object} openai - Cliente OpenAI
 * @returns {Promise<Object>} Clasificaci√≥n inteligente
 */
async function clasificarConMiniLLM(mensaje, historial, openai) {
    // Solo usar √∫ltimos 3 mensajes para clasificaci√≥n (no rompe contexto)
    const contextoClasificacion = historial.slice(-3).map(msg => 
        `${msg.role}: ${msg.content}`
    ).join('\n');
    
    const prompt = `
    Eres un clasificador inteligente. Analiza si esta consulta necesita informaci√≥n adicional y de qu√© tipo.
    
    CONTEXTO CONVERSACIONAL (√∫ltimos 3 mensajes):
    ${contextoClasificacion}
    
    CONSULTA ACTUAL: "${mensaje}"
    
    Tipos de informaci√≥n disponibles:
    - conocimiento_empresarial: Conceptos, definiciones, procedimientos de la empresa
    - documentacion_interna: Manuales, gu√≠as, pol√≠ticas internas
    - base_datos: Consultas de datos actuales (clientes, productos, etc.)
    - historial_conversacional: Contexto de conversaci√≥n previa
    - procesos_internos: Flujos de trabajo, protocolos espec√≠ficos
    - trivial: Saludos, confirmaciones, respuestas simples
    
    Responde SOLO en JSON v√°lido:
    {
        "necesitaRAG": true/false,
        "tipo": "tipo_especifico",
        "confianza": 0.0-1.0,
        "razon": "explicaci√≥n breve de la decisi√≥n"
    }
    `;
    
    const respuesta = await openai.chat.completions.create({
        model: 'gpt-3.5-turbo',
        messages: [{ role: 'user', content: prompt }],
        max_tokens: 150,
        temperature: 0.1,
        response_format: { type: "json_object" }
    });
    
    const clasificacion = JSON.parse(respuesta.choices[0].message.content);
    
    // Validar y normalizar respuesta
    return {
        necesitaRAG: Boolean(clasificacion.necesitaRAG),
        tipo: clasificacion.tipo || 'conocimiento_empresarial',
        confianza: Math.min(Math.max(clasificacion.confianza || 0.5, 0), 1),
        razon: clasificacion.razon || 'Clasificaci√≥n autom√°tica'
    };
}

/**
 * Analiza contexto conversacional para RAG
 * @param {Array} historial - Historial completo
 * @returns {Object} An√°lisis de contexto
 */
function analizarContextoConversacional(historial) {
    if (historial.length === 0) {
        return { necesitaRAG: false, complejidad: 0, temas: [] };
    }
    
    const ultimosMensajes = historial.slice(-5);
    const temasDiscutidos = extraerTemasConversacionales(ultimosMensajes);
    const complejidad = calcularComplejidadConversacional(ultimosMensajes);
    
    return {
        necesitaRAG: complejidad > 0.6 || temasDiscutidos.length > 2,
        complejidad,
        temas: temasDiscutidos,
        tipo: 'historial_conversacional'
    };
}

/**
 * Extrae temas de la conversaci√≥n
 * @param {Array} mensajes - Mensajes a analizar
 * @returns {Array} Temas identificados
 */
function extraerTemasConversacionales(mensajes) {
    const temas = new Set();
    
    mensajes.forEach(msg => {
        const contenido = msg.content.toLowerCase();
        
        if (contenido.includes('cliente') || contenido.includes('clientes')) temas.add('clientes');
        if (contenido.includes('proveedor') || contenido.includes('proveedores')) temas.add('proveedores');
        if (contenido.includes('producto') || contenido.includes('art√≠culo')) temas.add('productos');
        if (contenido.includes('proceso') || contenido.includes('protocolo')) temas.add('procesos');
        if (contenido.includes('datos') || contenido.includes('informaci√≥n')) temas.add('datos');
    });
    
    return Array.from(temas);
}

/**
 * Calcula complejidad de la conversaci√≥n
 * @param {Array} mensajes - Mensajes a analizar
 * @returns {number} Score de complejidad (0-1)
 */
function calcularComplejidadConversacional(mensajes) {
    if (mensajes.length === 0) return 0;
    
    let complejidad = 0;
    
    mensajes.forEach(msg => {
        const longitud = msg.content.length;
        const palabras = msg.content.split(' ').length;
        const tienePreguntas = msg.content.includes('?');
        const tienePalabrasClave = /(cu√°ntos|qu√©|c√≥mo|por qu√©|explica|describe)/i.test(msg.content);
        
        if (longitud > 50) complejidad += 0.2;
        if (palabras > 8) complejidad += 0.15;
        if (tienePreguntas) complejidad += 0.2;
        if (tienePalabrasClave) complejidad += 0.25;
    });
    
    return Math.min(complejidad / mensajes.length, 1);
}

/**
 * Obtiene contexto RAG seg√∫n tipo
 * @param {string} tipo - Tipo de RAG
 * @param {string} mensaje - Mensaje del usuario
 * @param {string} userId - ID del usuario
 * @returns {Promise<string>} Contexto RAG
 */
async function obtenerContextoRAG(tipo, mensaje, userId) {
    console.log('üîç [RAG] Obteniendo contexto tipo:', tipo);
    
    switch (tipo) {
        case 'conocimiento_empresarial':
        case 'documentacion_interna':
        case 'procesos_internos':
            return await pineconeMemoria.agregarContextoMemoria(userId, mensaje);
            
        case 'base_datos':
            // Para datos, no necesitamos RAG, solo SQL
        return '';
            
        case 'historial_conversacional':
            // El historial ya se maneja en el prompt
            return '';
            
        default:
            return await pineconeMemoria.agregarContextoMemoria(userId, mensaje);
    }
}

// =====================================
// SISTEMA DE CACHE PARA RESULTADOS ALEATORIOS
// =====================================

// Cache para resultados premezclados
const resultadosAleatoriosCache = new Map();

/**
 * Fisher-Yates shuffle eficiente y uniforme
 * @param {Array} array - Array a mezclar
 * @returns {Array} Array mezclado (copia)
 */
function fisherYatesShuffle(array) {
    const shuffled = [...array]; // No mutar original
    for (let i = shuffled.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
    }
    return shuffled;
}

/**
 * Obtiene resultados aleatorios desde cache o genera nuevos
 * @param {string} cacheKey - Clave del cache
 * @param {Array} resultados - Resultados originales
 * @param {number} limite - N√∫mero de resultados
 * @returns {Array} Resultados aleatorios
 */
function obtenerResultadosAleatoriosCacheados(cacheKey, resultados, limite) {
    // Verificar cache
    if (resultadosAleatoriosCache.has(cacheKey)) {
        const cacheEntry = resultadosAleatoriosCache.get(cacheKey);
        const tiempoTranscurrido = Date.now() - cacheEntry.timestamp;
        
        // Cache v√°lido por 5 minutos
        if (tiempoTranscurrido < 5 * 60 * 1000) {
            console.log('üé≤ [CACHE-ALEATORIO] Usando resultados premezclados');
            return cacheEntry.resultados.slice(0, limite);
        }
    }
    
    // Generar nuevos resultados mezclados
    console.log('üé≤ [CACHE-ALEATORIO] Generando nuevos resultados mezclados');
    const resultadosMezclados = fisherYatesShuffle(resultados);
    
    // Guardar en cache
    resultadosAleatoriosCache.set(cacheKey, {
        resultados: resultadosMezclados,
        timestamp: Date.now()
    });
    
    return resultadosMezclados.slice(0, limite);
}

/**
 * Funci√≥n optimizada para limitar resultados con aleatorizaci√≥n eficiente
 * @param {Array} results - Resultados de la consulta
 * @param {number} limite - N√∫mero m√°ximo de resultados (default: 5)
 * @param {boolean} aleatorio - Si se deben seleccionar registros aleatorios (default: false)
 * @param {string} cacheKey - Clave para cache de aleatorizaci√≥n (opcional)
 * @returns {Array} Resultados limitados
 * 
 * @example
 * limitarResultados([{id:1},{id:2},{id:3}], 2, false); // [{id:1},{id:2}]
 * limitarResultados([{id:1},{id:2},{id:3}], 2, true, 'clientes'); // 2 resultados aleatorios cacheados
 */
function limitarResultados(results, limite = 5, aleatorio = false, cacheKey = null) {
    if (!results || results.length === 0) return [];
    
    // Si no hay suficientes resultados, retornar todos
    if (results.length <= limite) {
        return aleatorio ? fisherYatesShuffle(results) : [...results];
    }
    
    if (aleatorio) {
        // Usar cache si se proporciona clave
        if (cacheKey) {
            return obtenerResultadosAleatoriosCacheados(cacheKey, results, limite);
        }
        
        // Sin cache, usar Fisher-Yates directamente
        return fisherYatesShuffle(results).slice(0, limite);
    }
    
    // Retornar primeros N sin modificar orden original
    return results.slice(0, limite);
}

/**
 * Genera clave de cache para resultados aleatorios
 * @param {string} tabla - Nombre de la tabla
 * @param {string} consulta - Consulta original
 * @returns {string} Clave de cache
 */
function generarClaveCacheAleatorio(tabla, consulta) {
    return `aleatorio_${tabla}_${Buffer.from(consulta).toString('base64').slice(0, 20)}`;
}

/**
 * Modifica consulta SQL para incluir LIMIT cuando sea apropiado
 * @param {string} sql - SQL original
 * @param {number} limite - L√≠mite deseado
 * @param {boolean} aleatorio - Si se requiere aleatorizaci√≥n
 * @returns {string} SQL optimizado
 */
function optimizarSQLConLimite(sql, limite, aleatorio = false) {
    // Si ya tiene LIMIT, no modificar
    if (sql.toLowerCase().includes('limit')) {
        return sql;
    }
    
    // Para consultas simples sin aleatorizaci√≥n, agregar LIMIT
    if (!aleatorio && !sql.toLowerCase().includes('order by')) {
        return sql.replace(/;?\s*$/, ` LIMIT ${limite};`);
    }
    
    // Para aleatorizaci√≥n, agregar ORDER BY RAND() y LIMIT
    if (aleatorio) {
        return sql.replace(/;?\s*$/, ` ORDER BY RAND() LIMIT ${limite};`);
    }
    
    return sql;
}

/**
 * Validaci√≥n sem√°ntica avanzada de SQL
 * @param {string} sql - SQL a validar
 * @returns {Object} Resultado de validaci√≥n
 */
function validacionSemanticaSQL(sql) {
    const resultado = {
        esValido: true,
        errores: [],
        advertencias: [],
        tablasUsadas: [],
        columnasUsadas: [],
        nivelRiesgo: 'bajo'
    };

    // 1. DETECCI√ìN DE PATRONES PELIGROSOS
    const patronesPeligrosos = [
        /drop\s+table/i,
        /insert\s+into/i,
        /update\s+.+\s+set/i,
        /delete\s+from/i,
        /create\s+table/i,
        /alter\s+table/i,
        /truncate/i,
        /--\s*drop/i,
        /\/\*.*drop.*\*\//i
    ];

    patronesPeligrosos.forEach((patron, index) => {
        if (patron.test(sql)) {
            resultado.esValido = false;
            resultado.errores.push(`Patr√≥n peligroso detectado: ${patron.source}`);
            resultado.nivelRiesgo = 'alto';
        }
    });

    // 2. EXTRACCI√ìN DE TABLAS Y COLUMNAS
    const tablasMatch = sql.match(/from\s+([a-zA-Z_][a-zA-Z0-9_]*)/gi);
    const columnasMatch = sql.match(/select\s+(.+?)\s+from/i);
    
    if (tablasMatch) {
        resultado.tablasUsadas = tablasMatch.map(t => t.replace(/from\s+/i, '').toLowerCase());
    }
    
    if (columnasMatch) {
        const columnas = columnasMatch[1].split(',').map(c => c.trim());
        resultado.columnasUsadas = columnas.map(c => {
            const match = c.match(/([a-zA-Z_][a-zA-Z0-9_]*)/);
            return match ? match[1].toLowerCase() : c.toLowerCase();
        });
    }

    // 3. VALIDACI√ìN CONTRA MAPAERP
    resultado.tablasUsadas.forEach(tabla => {
        if (!mapaERP[tabla]) {
            resultado.esValido = false;
            resultado.errores.push(`Tabla no existe en mapaERP: ${tabla}`);
        }
    });

    // 4. VALIDACI√ìN DE COLUMNAS
    resultado.tablasUsadas.forEach(tabla => {
        if (mapaERP[tabla]) {
            const columnasTabla = Object.keys(mapaERP[tabla].columnas || {});
            resultado.columnasUsadas.forEach(columna => {
                if (!columnasTabla.includes(columna) && !columna.includes('*')) {
                    resultado.advertencias.push(`Columna posiblemente inexistente: ${tabla}.${columna}`);
                }
            });
        }
    });

    // 5. DETECCI√ìN DE COMPLEJIDAD
    const complejidad = calcularComplejidadSQL(sql);
    if (complejidad > 0.8) {
        resultado.advertencias.push('Consulta muy compleja, puede afectar rendimiento');
        resultado.nivelRiesgo = 'medio';
    }

    return resultado;
}

/**
 * Calcula complejidad de una consulta SQL
 * @param {string} sql - SQL a analizar
 * @returns {number} Score de complejidad (0-1)
 */
function calcularComplejidadSQL(sql) {
    let complejidad = 0;
    
    // Factores de complejidad
    if (sql.toLowerCase().includes('join')) complejidad += 0.2;
    if (sql.toLowerCase().includes('subquery')) complejidad += 0.3;
    if (sql.toLowerCase().includes('union')) complejidad += 0.2;
    if (sql.toLowerCase().includes('group by')) complejidad += 0.15;
    if (sql.toLowerCase().includes('having')) complejidad += 0.1;
    if (sql.toLowerCase().includes('order by')) complejidad += 0.05;
    if (sql.toLowerCase().includes('distinct')) complejidad += 0.1;
    
    // Contar subconsultas
    const subqueries = (sql.match(/\(/g) || []).length;
    complejidad += subqueries * 0.1;
    
    return Math.min(complejidad, 1);
}

/**
 * Normaliza nombres t√©cnicos usando fuzzy search
 * @param {string} sql - SQL original
 * @returns {string} SQL con nombres corregidos
 */
function normalizarNombresSQL(sql) {
    let sqlNormalizado = sql;
    
    // Extraer y corregir nombres de tablas
    const tablasMatch = sql.match(/from\s+([a-zA-Z_][a-zA-Z0-9_]*)/gi);
    if (tablasMatch) {
        tablasMatch.forEach(tablaMatch => {
            const tablaOriginal = tablaMatch.replace(/from\s+/i, '');
            const tablaCorregida = buscarNombreSimilar(tablaOriginal, Object.keys(mapaERP));
            
            if (tablaCorregida && tablaCorregida !== tablaOriginal) {
                console.log(`üîÑ [SQL-NORMALIZACION] Tabla corregida: ${tablaOriginal} ‚Üí ${tablaCorregida}`);
                sqlNormalizado = sqlNormalizado.replace(
                    new RegExp(`\\b${tablaOriginal}\\b`, 'gi'),
                    tablaCorregida
                );
            }
        });
    }
    
    return sqlNormalizado;
}

/**
 * Busca nombre similar en un array de nombres v√°lidos
 * @param {string} nombre - Nombre a buscar
 * @param {Array} nombresValidos - Array de nombres v√°lidos
 * @returns {string|null} Nombre m√°s similar o null
 */
function buscarNombreSimilar(nombre, nombresValidos) {
    const nombreLower = nombre.toLowerCase();
    
    // B√∫squeda exacta
    const exacto = nombresValidos.find(n => n.toLowerCase() === nombreLower);
    if (exacto) return exacto;
    
    // B√∫squeda por similitud
    const similitudes = nombresValidos.map(n => ({
        nombre: n,
        similitud: calcularSimilitud(nombreLower, n.toLowerCase())
    }));
    
    const mejor = similitudes.reduce((prev, current) => 
        current.similitud > prev.similitud ? current : prev
    );
    
    // Solo retornar si la similitud es alta (> 0.7)
    return mejor.similitud > 0.7 ? mejor.nombre : null;
}

/**
 * Calcula similitud entre dos strings
 * @param {string} str1 - String 1
 * @param {string} str2 - String 2
 * @returns {number} Score de similitud (0-1)
 */
function calcularSimilitud(str1, str2) {
    if (str1 === str2) return 1;
    if (str1.includes(str2) || str2.includes(str1)) return 0.8;
    
    // Similitud por caracteres comunes
    const chars1 = new Set(str1);
    const chars2 = new Set(str2);
    const interseccion = new Set([...chars1].filter(x => chars2.has(x)));
    const union = new Set([...chars1, ...chars2]);
    
    return interseccion.size / union.size;
}

/**
 * Sistema de reintentos inteligente para consultas sin resultados
 * @param {string} mensajeOriginal - Mensaje original del usuario
 * @param {string} sqlOriginal - SQL original que no dio resultados
 * @param {Object} clasificacion - Clasificaci√≥n de la consulta
 * @param {Array} historial - Historial conversacional
 * @returns {Promise<Object>} Resultado del reintento
 */
async function sistemaReintentosInteligente(mensajeOriginal, sqlOriginal, clasificacion, historial) {
    console.log('üîÑ [REINTENTOS] Iniciando sistema de reintentos inteligente...');
    
    const estrategias = [
        { nombre: 'fuzzy_search', prioridad: 1 },
        { nombre: 'prompt_alternativo', prioridad: 2 },
        { nombre: 'busqueda_similar', prioridad: 3 },
        { nombre: 'fallback_general', prioridad: 4 }
    ];
    
    for (const estrategia of estrategias) {
        console.log(`üîÑ [REINTENTOS] Probando estrategia: ${estrategia.nombre}`);
        
        try {
            const resultado = await ejecutarEstrategiaReintento(
                estrategia.nombre,
                mensajeOriginal,
                sqlOriginal,
                clasificacion,
                historial
            );
            
            if (resultado.exitoso) {
                console.log(`‚úÖ [REINTENTOS] Estrategia ${estrategia.nombre} exitosa`);
                return {
                    ...resultado,
                    estrategiaUsada: estrategia.nombre,
                    reintentos: estrategias.indexOf(estrategia) + 1
                };
            }
        } catch (error) {
            console.log(`‚ö†Ô∏è [REINTENTOS] Estrategia ${estrategia.nombre} fall√≥:`, error.message);
        }
    }
    
    // Si todas las estrategias fallan
    console.log('‚ùå [REINTENTOS] Todas las estrategias fallaron');
    return {
        exitoso: false,
        mensaje: 'No pude encontrar la informaci√≥n que buscas. ¬øPodr√≠as reformular tu pregunta?',
        estrategiaUsada: 'fallback_final',
        reintentos: estrategias.length
    };
}

/**
 * Ejecuta una estrategia espec√≠fica de reintento
 * @param {string} estrategia - Nombre de la estrategia
 * @param {string} mensajeOriginal - Mensaje original
 * @param {string} sqlOriginal - SQL original
 * @param {Object} clasificacion - Clasificaci√≥n
 * @param {Array} historial - Historial
 * @returns {Promise<Object>} Resultado de la estrategia
 */
async function ejecutarEstrategiaReintento(estrategia, mensajeOriginal, sqlOriginal, clasificacion, historial) {
    switch (estrategia) {
        case 'fuzzy_search':
            return await estrategiaFuzzySearch(mensajeOriginal, sqlOriginal);
            
        case 'prompt_alternativo':
            return await estrategiaPromptAlternativo(mensajeOriginal, clasificacion, historial);
            
        case 'busqueda_similar':
            return await estrategiaBusquedaSimilar(mensajeOriginal, sqlOriginal);
            
        case 'fallback_general':
            return await estrategiaFallbackGeneral(mensajeOriginal);
            
        default:
            throw new Error(`Estrategia desconocida: ${estrategia}`);
    }
}

/**
 * Estrategia 1: Fuzzy Search
 * @param {string} mensaje - Mensaje original
 * @param {string} sqlOriginal - SQL original
 * @returns {Promise<Object>} Resultado
 */
async function estrategiaFuzzySearch(mensaje, sqlOriginal) {
    console.log('üîç [FUZZY-STRATEGY] Ejecutando b√∫squeda fuzzy...');
    
    try {
        const resultadoFuzzy = await fuzzySearchRetry(sqlOriginal, mensaje);
        
        if (resultadoFuzzy && resultadoFuzzy.results && resultadoFuzzy.results.length > 0) {
            const resultadosFormateados = formatResultsAsMarkdown(resultadoFuzzy.results);
            return {
                exitoso: true,
                mensaje: `Encontr√© resultados similares:\n\n${resultadosFormateados}`,
                data: resultadoFuzzy.results,
                sql: resultadoFuzzy.sqlFuzzyTry,
                tipo: 'fuzzy_search'
            };
        }
        
        return { exitoso: false };
    } catch (error) {
        console.error('‚ùå [FUZZY-STRATEGY] Error:', error.message);
        return { exitoso: false };
    }
}

/**
 * Estrategia 2: Prompt Alternativo
 * @param {string} mensaje - Mensaje original
 * @param {Object} clasificacion - Clasificaci√≥n
 * @param {Array} historial - Historial
 * @returns {Promise<Object>} Resultado
 */
async function estrategiaPromptAlternativo(mensaje, clasificacion, historial) {
    console.log('ü§ñ [PROMPT-STRATEGY] Generando prompt alternativo...');
    
    try {
        // Prompt alternativo m√°s espec√≠fico
        const promptAlternativo = `
        La consulta anterior no encontr√≥ resultados. Intenta con una aproximaci√≥n diferente:
        
        Consulta original: "${mensaje}"
        
        Instrucciones:
        1. Analiza si la consulta es muy espec√≠fica y prueba con criterios m√°s amplios
        2. Considera sin√≥nimos o t√©rminos relacionados
        3. Si es una b√∫squeda por nombre, intenta con LIKE o b√∫squeda parcial
        4. Genera SQL que sea m√°s inclusivo
        
        Genera solo el SQL optimizado:
        `;
        
        const mensajesAlternativos = [
            { role: 'system', content: promptAlternativo },
            { role: 'user', content: mensaje }
        ];
        
        const response = await openai.chat.completions.create({
            model: 'gpt-4o',
            messages: mensajesAlternativos,
            max_tokens: 500,
            temperature: 0.3
        });
        
        const sqlAlternativo = validarRespuestaSQL(response.choices[0].message.content);
        
        if (sqlAlternativo) {
            const resultados = await executeQuery(sqlAlternativo);
            
            if (resultados && resultados.length > 0) {
                const resultadosFormateados = formatResultsAsMarkdown(resultados);
                return {
                    exitoso: true,
                    mensaje: `Con una b√∫squeda m√°s amplia encontr√©:\n\n${resultadosFormateados}`,
                    data: resultados,
                    sql: sqlAlternativo,
                    tipo: 'prompt_alternativo'
                };
            }
        }
        
        return { exitoso: false };
    } catch (error) {
        console.error('‚ùå [PROMPT-STRATEGY] Error:', error.message);
        return { exitoso: false };
    }
}

/**
 * Estrategia 3: B√∫squeda Similar
 * @param {string} mensaje - Mensaje original
 * @param {string} sqlOriginal - SQL original
 * @returns {Promise<Object>} Resultado
 */
async function estrategiaBusquedaSimilar(mensaje, sqlOriginal) {
    console.log('üîç [SIMILAR-STRATEGY] Buscando consultas similares...');
    
    try {
        // Extraer entidad principal de la consulta
        const entidades = extraerEntidadesConsulta(mensaje);
        
        if (entidades.length > 0) {
            // Generar consulta m√°s simple para la entidad principal
            const entidadPrincipal = entidades[0];
            const sqlSimplificado = `SELECT * FROM ${entidadPrincipal} LIMIT 5`;
            
            const resultados = await executeQuery(sqlSimplificado);
            
            if (resultados && resultados.length > 0) {
                const resultadosFormateados = formatResultsAsMarkdown(resultados);
                return {
                    exitoso: true,
                    mensaje: `Aqu√≠ tienes algunos ${entidadPrincipal} disponibles:\n\n${resultadosFormateados}`,
                    data: resultados,
                    sql: sqlSimplificado,
                    tipo: 'busqueda_similar'
                };
            }
        }
        
        return { exitoso: false };
    } catch (error) {
        console.error('‚ùå [SIMILAR-STRATEGY] Error:', error.message);
        return { exitoso: false };
    }
}

/**
 * Estrategia 4: Fallback General
 * @param {string} mensaje - Mensaje original
 * @returns {Promise<Object>} Resultado
 */
async function estrategiaFallbackGeneral(mensaje) {
    console.log('üõ°Ô∏è [FALLBACK-STRATEGY] Ejecutando fallback general...');
    
    try {
        // Respuesta gen√©rica pero √∫til
        const respuestaFallback = `No encontr√© informaci√≥n espec√≠fica para "${mensaje}". 
        
        Puedo ayudarte con:
        ‚Ä¢ Consultas sobre clientes, proveedores, art√≠culos
        ‚Ä¢ Informaci√≥n sobre procesos y procedimientos
        ‚Ä¢ Datos de la empresa
        
        ¬øPodr√≠as reformular tu pregunta o ser m√°s espec√≠fico?`;
        
        return {
            exitoso: true,
            mensaje: respuestaFallback,
            tipo: 'fallback_general'
        };
    } catch (error) {
        console.error('‚ùå [FALLBACK-STRATEGY] Error:', error.message);
        return { exitoso: false };
    }
}

/**
 * Extrae entidades principales de una consulta
 * @param {string} mensaje - Mensaje del usuario
 * @returns {Array} Array de entidades encontradas
 */
function extraerEntidadesConsulta(mensaje) {
    const mensajeLower = mensaje.toLowerCase();
    const entidades = [];
    
    if (mensajeLower.includes('cliente')) entidades.push('clientes');
    if (mensajeLower.includes('proveedor')) entidades.push('proveedores');
    if (mensajeLower.includes('art√≠culo') || mensajeLower.includes('producto')) entidades.push('articulos');
    if (mensajeLower.includes('almac√©n')) entidades.push('almacenes');
    
    return entidades;
}

// =====================================
// SQL PARSER PROFESIONAL CON AST
// =====================================

const sqlParser = require('sql-parser');

/**
 * Cache para resultados de parsing SQL
 * @type {Map<string, Object>}
 */
const sqlParsingCache = new Map();

/**
 * Configuraci√≥n de tipos de datos para validaci√≥n sem√°ntica
 */
const tiposDatos = {
    'INT': { nombre: 'INTEGER', operadores: ['=', '<', '>', '<=', '>=', '!=', 'BETWEEN', 'IN'] },
    'VARCHAR': { nombre: 'STRING', operadores: ['=', '!=', 'LIKE', 'IN', 'IS NULL', 'IS NOT NULL'] },
    'DATE': { nombre: 'DATE', operadores: ['=', '<', '>', '<=', '>=', '!=', 'BETWEEN'] },
    'DECIMAL': { nombre: 'NUMBER', operadores: ['=', '<', '>', '<=', '>=', '!=', 'BETWEEN', 'IN'] },
    'BOOLEAN': { nombre: 'BOOLEAN', operadores: ['=', '!=', 'IS NULL', 'IS NOT NULL'] }
};

/**
 * Analizador SQL profesional con AST
 * @param {string} sql - SQL a analizar
 * @returns {Object} Resultado del an√°lisis completo
 */
function analizarSQLProfesional(sql) {
    console.log('üß† [SQL-PARSER] Iniciando an√°lisis profesional con AST...');
    
    const tiempoInicio = Date.now();
    
    // 1. VERIFICAR CACHE
    const cacheKey = generarClaveCache(sql);
    if (sqlParsingCache.has(cacheKey)) {
        console.log('‚ö° [SQL-PARSER] Resultado encontrado en cache');
        return sqlParsingCache.get(cacheKey);
    }
    
    try {
        // 2. PARSING CON AST
        const ast = sqlParser.parse(sql);
        
        // 3. AN√ÅLISIS COMPLETO
        const resultado = {
            ast: ast,
            tablas: extraerTablasAST(ast),
            columnas: extraerColumnasAST(ast),
            funciones: extraerFuncionesAST(ast),
            subconsultas: extraerSubconsultasAST(ast),
            joins: extraerJoinsAST(ast),
            condiciones: extraerCondicionesAST(ast),
            validacionSemantica: validarSemanticamente(ast),
            estadisticas: {
                complejidad: calcularComplejidad(ast),
                tiempoParsing: Date.now() - tiempoInicio
            }
        };
        
        // 4. GUARDAR EN CACHE
        sqlParsingCache.set(cacheKey, resultado);
        
        // 5. LIMPIAR CACHE SI ES MUY GRANDE
        if (sqlParsingCache.size > 100) {
            limpiarCacheSQL();
        }
        
        console.log(`‚úÖ [SQL-PARSER] An√°lisis completado en ${resultado.estadisticas.tiempoParsing}ms`);
        return resultado;
        
    } catch (error) {
        console.error('‚ùå [SQL-PARSER] Error en parsing:', error.message);
        return {
            error: error.message,
            sql: sql,
            fallback: true
        };
    }
}

/**
 * Extrae tablas del AST
 * @param {Object} ast - √Årbol sint√°ctico
 * @returns {Array} Array de tablas con informaci√≥n completa
 */
function extraerTablasAST(ast) {
    const tablas = [];
    
    function recorrerNodo(nodo) {
        if (!nodo) return;
        
        // FROM clause
        if (nodo.type === 'select' && nodo.from) {
            procesarFromClause(nodo.from, tablas);
        }
        
        // JOIN clauses
        if (nodo.join) {
            procesarJoinClause(nodo.join, tablas);
        }
        
        // Subconsultas
        if (nodo.subquery) {
            recorrerNodo(nodo.subquery);
        }
        
        // Recursi√≥n para otros nodos
        Object.values(nodo).forEach(valor => {
            if (typeof valor === 'object' && valor !== null) {
                if (Array.isArray(valor)) {
                    valor.forEach(item => recorrerNodo(item));
                } else {
                    recorrerNodo(valor);
                }
            }
        });
    }
    
    recorrerNodo(ast);
    return tablas;
}

/**
 * Procesa cl√°usula FROM
 * @param {Object} fromClause - Cl√°usula FROM del AST
 * @param {Array} tablas - Array donde agregar tablas
 */
function procesarFromClause(fromClause, tablas) {
    if (Array.isArray(fromClause)) {
        fromClause.forEach(item => procesarFromClause(item, tablas));
    } else if (fromClause.table) {
        tablas.push({
            nombre: fromClause.table,
            alias: fromClause.as || null,
            tipo: 'FROM',
            esquema: fromClause.schema || null
        });
    } else if (fromClause.subquery) {
        // Subconsulta en FROM
        tablas.push({
            nombre: 'SUBQUERY',
            alias: fromClause.as || null,
            tipo: 'SUBQUERY',
            subquery: fromClause.subquery
        });
    }
}

/**
 * Procesa cl√°usula JOIN
 * @param {Object} joinClause - Cl√°usula JOIN del AST
 * @param {Array} tablas - Array donde agregar tablas
 */
function procesarJoinClause(joinClause, tablas) {
    if (Array.isArray(joinClause)) {
        joinClause.forEach(item => procesarJoinClause(item, tablas));
    } else if (joinClause.table) {
        tablas.push({
            nombre: joinClause.table,
            alias: joinClause.as || null,
            tipo: joinClause.joinType || 'JOIN',
            esquema: joinClause.schema || null,
            condicion: joinClause.on || null
        });
    }
}

/**
 * Extrae columnas del AST
 * @param {Object} ast - √Årbol sint√°ctico
 * @returns {Array} Array de columnas con informaci√≥n completa
 */
function extraerColumnasAST(ast) {
    const columnas = [];
    
    function recorrerNodo(nodo) {
        if (!nodo) return;
        
        // SELECT columns
        if (nodo.type === 'select' && nodo.columns) {
            procesarColumnasSelect(nodo.columns, columnas);
        }
        
        // WHERE conditions
        if (nodo.where) {
            procesarCondicionesWhere(nodo.where, columnas);
        }
        
        // GROUP BY
        if (nodo.groupby) {
            procesarGroupBy(nodo.groupby, columnas);
        }
        
        // ORDER BY
        if (nodo.orderby) {
            procesarOrderBy(nodo.orderby, columnas);
        }
        
        // HAVING
        if (nodo.having) {
            procesarHaving(nodo.having, columnas);
        }
        
        // JOIN conditions
        if (nodo.on) {
            procesarCondicionJoin(nodo.on, columnas);
        }
        
        // Recursi√≥n
        Object.values(nodo).forEach(valor => {
            if (typeof valor === 'object' && valor !== null) {
                if (Array.isArray(valor)) {
                    valor.forEach(item => recorrerNodo(item));
                } else {
                    recorrerNodo(valor);
                }
            }
        });
    }
    
    recorrerNodo(ast);
    return columnas;
}

/**
 * Procesa columnas del SELECT
 * @param {Array} columns - Columnas del SELECT
 * @param {Array} columnas - Array donde agregar columnas
 */
function procesarColumnasSelect(columns, columnas) {
    columns.forEach(col => {
        if (col.type === 'column') {
            columnas.push({
                nombre: col.name,
                tabla: col.table || null,
                alias: col.as || null,
                tipo: 'SELECT',
                funcion: col.function || null,
                parametros: col.args || null
            });
        } else if (col.type === 'function') {
            // Funci√≥n como COUNT(*)
            columnas.push({
                nombre: col.name,
                tabla: null,
                alias: col.as || null,
                tipo: 'FUNCTION',
                funcion: col.function,
                parametros: col.args || []
            });
        }
    });
}

/**
 * Procesa condiciones WHERE
 * @param {Object} whereClause - Cl√°usula WHERE
 * @param {Array} columnas - Array donde agregar columnas
 */
function procesarCondicionesWhere(whereClause, columnas) {
    function procesarCondicion(cond) {
        if (cond.type === 'binary_expr') {
            // Operadores binarios: =, <, >, etc.
            if (cond.left && cond.left.type === 'column') {
                columnas.push({
                    nombre: cond.left.name,
                    tabla: cond.left.table || null,
                    alias: null,
                    tipo: 'WHERE',
                    operador: cond.operator,
                    valor: cond.right
                });
            }
            if (cond.right && cond.right.type === 'column') {
                columnas.push({
                    nombre: cond.right.name,
                    tabla: cond.right.table || null,
                    alias: null,
                    tipo: 'WHERE',
                    operador: cond.operator,
                    valor: cond.left
                });
            }
        } else if (cond.type === 'function') {
            // Funciones como BETWEEN, IN, etc.
            if (cond.args) {
                cond.args.forEach(arg => {
                    if (arg.type === 'column') {
                        columnas.push({
                            nombre: arg.name,
                            tabla: arg.table || null,
                            alias: null,
                            tipo: 'WHERE_FUNCTION',
                            funcion: cond.name,
                            parametros: cond.args
                        });
                    }
                });
            }
        }
    }
    
    if (Array.isArray(whereClause)) {
        whereClause.forEach(procesarCondicion);
    } else {
        procesarCondicion(whereClause);
    }
}

/**
 * Extrae funciones del AST
 * @param {Object} ast - √Årbol sint√°ctico
 * @returns {Array} Array de funciones encontradas
 */
function extraerFuncionesAST(ast) {
    const funciones = [];
    
    function recorrerNodo(nodo) {
        if (!nodo) return;
        
        if (nodo.type === 'function') {
            funciones.push({
                nombre: nodo.name,
                parametros: nodo.args || [],
                alias: nodo.as || null,
                contexto: 'SELECT'
            });
        }
        
        // Recursi√≥n
        Object.values(nodo).forEach(valor => {
            if (typeof valor === 'object' && valor !== null) {
                if (Array.isArray(valor)) {
                    valor.forEach(item => recorrerNodo(item));
                } else {
                    recorrerNodo(valor);
                }
            }
        });
    }
    
    recorrerNodo(ast);
    return funciones;
}

/**
 * Extrae subconsultas del AST
 * @param {Object} ast - √Årbol sint√°ctico
 * @returns {Array} Array de subconsultas encontradas
 */
function extraerSubconsultasAST(ast) {
    const subconsultas = [];
    
    function recorrerNodo(nodo) {
        if (!nodo) return;
        
        if (nodo.type === 'subquery') {
            subconsultas.push({
                tipo: 'SUBQUERY',
                ast: nodo,
                contexto: determinarContextoSubconsulta(nodo)
            });
        }
        
        // Recursi√≥n
        Object.values(nodo).forEach(valor => {
            if (typeof valor === 'object' && valor !== null) {
                if (Array.isArray(valor)) {
                    valor.forEach(item => recorrerNodo(item));
                } else {
                    recorrerNodo(valor);
                }
            }
        });
    }
    
    recorrerNodo(ast);
    return subconsultas;
}

/**
 * Extrae JOINs del AST
 * @param {Object} ast - √Årbol sint√°ctico
 * @returns {Array} Array de JOINs encontrados
 */
function extraerJoinsAST(ast) {
    const joins = [];
    
    function recorrerNodo(nodo) {
        if (!nodo) return;
        
        if (nodo.type === 'join') {
            joins.push({
                tipo: nodo.joinType || 'INNER',
                tabla: nodo.table,
                alias: nodo.as || null,
                condicion: nodo.on,
                esquema: nodo.schema || null
            });
        }
        
        // Recursi√≥n
        Object.values(nodo).forEach(valor => {
            if (typeof valor === 'object' && valor !== null) {
                if (Array.isArray(valor)) {
                    valor.forEach(item => recorrerNodo(item));
                } else {
                    recorrerNodo(valor);
                }
            }
        });
    }
    
    recorrerNodo(ast);
    return joins;
}

/**
 * Extrae condiciones del AST
 * @param {Object} ast - √Årbol sint√°ctico
 * @returns {Array} Array de condiciones encontradas
 */
function extraerCondicionesAST(ast) {
    const condiciones = [];
    
    function recorrerNodo(nodo) {
        if (!nodo) return;
        
        if (nodo.type === 'binary_expr') {
            condiciones.push({
                tipo: 'BINARY',
                operador: nodo.operator,
                izquierda: nodo.left,
                derecha: nodo.right
            });
        } else if (nodo.type === 'function') {
            condiciones.push({
                tipo: 'FUNCTION',
                funcion: nodo.name,
                parametros: nodo.args || []
            });
        }
        
        // Recursi√≥n
        Object.values(nodo).forEach(valor => {
            if (typeof valor === 'object' && valor !== null) {
                if (Array.isArray(valor)) {
                    valor.forEach(item => recorrerNodo(item));
                } else {
                    recorrerNodo(valor);
                }
            }
        });
    }
    
    recorrerNodo(ast);
    return condiciones;
}

/**
 * Validaci√≥n sem√°ntica completa
 * @param {Object} ast - √Årbol sint√°ctico
 * @returns {Object} Resultado de validaci√≥n sem√°ntica
 */
function validarSemanticamente(ast) {
    const resultado = {
        esValido: true,
        errores: [],
        advertencias: [],
        validaciones: []
    };
    
    // Extraer informaci√≥n del AST
    const tablas = extraerTablasAST(ast);
    const columnas = extraerColumnasAST(ast);
    
    // 1. Validar tablas contra mapaERP
    tablas.forEach(tabla => {
        if (tabla.tipo !== 'SUBQUERY') {
            const tablaNormalizada = tabla.nombre.toLowerCase();
            if (!mapaERP[tablaNormalizada]) {
                resultado.errores.push(`Tabla no existe en mapaERP: ${tabla.nombre}`);
                resultado.esValido = false;
            } else {
                resultado.validaciones.push({
                    tipo: 'TABLA',
                    elemento: tabla.nombre,
                    estado: 'V√ÅLIDA',
                    detalles: mapaERP[tablaNormalizada]
                });
            }
        }
    });
    
    // 2. Validar columnas contra mapaERP
    columnas.forEach(columna => {
        if (columna.tabla && columna.tabla !== 'SUBQUERY') {
            const tablaNormalizada = columna.tabla.toLowerCase();
            if (mapaERP[tablaNormalizada]) {
                const columnasTabla = Object.keys(mapaERP[tablaNormalizada].columnas || {});
                if (!columnasTabla.includes(columna.nombre)) {
                    resultado.advertencias.push(`Columna posiblemente inexistente: ${columna.tabla}.${columna.nombre}`);
                    
                    // Sugerir columnas similares
                    const sugerencias = buscarColumnasSimilares(columna.nombre, columnasTabla);
                    if (sugerencias.length > 0) {
                        resultado.advertencias.push(`Sugerencias: ${sugerencias.join(', ')}`);
                    }
                } else {
                    resultado.validaciones.push({
                        tipo: 'COLUMNA',
                        elemento: `${columna.tabla}.${columna.nombre}`,
                        estado: 'V√ÅLIDA',
                        tipoDato: mapaERP[tablaNormalizada].columnas[columna.nombre]
                    });
                }
            }
        }
    });
    
    // 3. Validar tipos de datos en operaciones
    validarTiposDatos(columnas, resultado);
    
    return resultado;
}

/**
 * Validar tipos de datos en operaciones
 * @param {Array} columnas - Columnas extra√≠das
 * @param {Object} resultado - Resultado de validaci√≥n
 */
function validarTiposDatos(columnas, resultado) {
    columnas.forEach(columna => {
        if (columna.operador && columna.tabla) {
            const tablaNormalizada = columna.tabla.toLowerCase();
            if (mapaERP[tablaNormalizada] && mapaERP[tablaNormalizada].columnas) {
                const tipoColumna = mapaERP[tablaNormalizada].columnas[columna.nombre];
                if (tipoColumna) {
                    const tipoDato = tiposDatos[tipoColumna.tipo];
                    if (tipoDato && !tipoDato.operadores.includes(columna.operador)) {
                        resultado.advertencias.push(
                            `Operador '${columna.operador}' puede no ser apropiado para tipo '${tipoColumna.tipo}' en columna '${columna.nombre}'`
                        );
                    }
                }
            }
        }
    });
}

/**
 * Calcular complejidad de la consulta
 * @param {Object} ast - √Årbol sint√°ctico
 * @returns {Object} M√©tricas de complejidad
 */
function calcularComplejidad(ast) {
    const metricas = {
        nivel: 'SIMPLE',
        puntuacion: 0,
        factores: []
    };
    
    let puntuacion = 0;
    const factores = [];
    
    // Contar tablas
    const tablas = extraerTablasAST(ast);
    if (tablas.length > 1) {
        puntuacion += tablas.length * 10;
        factores.push(`M√∫ltiples tablas: ${tablas.length}`);
    }
    
    // Contar JOINs
    const joins = extraerJoinsAST(ast);
    if (joins.length > 0) {
        puntuacion += joins.length * 15;
        factores.push(`JOINs: ${joins.length}`);
    }
    
    // Contar subconsultas
    const subconsultas = extraerSubconsultasAST(ast);
    if (subconsultas.length > 0) {
        puntuacion += subconsultas.length * 25;
        factores.push(`Subconsultas: ${subconsultas.length}`);
    }
    
    // Contar funciones
    const funciones = extraerFuncionesAST(ast);
    if (funciones.length > 0) {
        puntuacion += funciones.length * 5;
        factores.push(`Funciones: ${funciones.length}`);
    }
    
    // Determinar nivel
    if (puntuacion >= 50) {
        metricas.nivel = 'COMPLEJA';
    } else if (puntuacion >= 20) {
        metricas.nivel = 'MODERADA';
    }
    
    metricas.puntuacion = puntuacion;
    metricas.factores = factores;
    
    return metricas;
}

/**
 * Generar clave para cache
 * @param {string} sql - SQL original
 * @returns {string} Clave √∫nica para cache
 */
function generarClaveCache(sql) {
    // Normalizar SQL para cache (eliminar espacios extra, etc.)
    const sqlNormalizado = sql.replace(/\s+/g, ' ').trim().toLowerCase();
    return Buffer.from(sqlNormalizado).toString('base64').substring(0, 32);
}

/**
 * Limpiar cache SQL
 */
function limpiarCacheSQL() {
    const tamanoAntes = sqlParsingCache.size;
    sqlParsingCache.clear();
    console.log(`üßπ [SQL-PARSER] Cache limpiado: ${tamanoAntes} entradas eliminadas`);
}

/**
 * Determinar contexto de subconsulta
 * @param {Object} subquery - Subconsulta del AST
 * @returns {string} Contexto de la subconsulta
 */
function determinarContextoSubconsulta(subquery) {
    // An√°lisis del contexto basado en la estructura del AST
    if (subquery.parent && subquery.parent.type === 'from') {
        return 'FROM';
    } else if (subquery.parent && subquery.parent.type === 'where') {
        return 'WHERE';
    } else if (subquery.parent && subquery.parent.type === 'select') {
        return 'SELECT';
    }
    return 'UNKNOWN';
}

/**
 * Generar SQL optimizado basado en an√°lisis AST
 * @param {Object} analisisSQL - Resultado del an√°lisis AST
 * @returns {string} SQL optimizado
 */
function generarSQLOptimizado(analisisSQL) {
    console.log('üîß [SQL-OPTIMIZER] Generando SQL optimizado desde AST...');
    
    try {
        // Reconstruir SQL desde AST con optimizaciones
        let sqlOptimizado = 'SELECT ';
        
        // Optimizar columnas SELECT
        const columnasOptimizadas = analisisSQL.columnas
            .filter(col => col.tipo === 'SELECT')
            .map(col => {
                if (col.tabla && col.alias) {
                    return `${col.tabla}.${col.nombre} AS ${col.alias}`;
                } else if (col.tabla) {
                    return `${col.tabla}.${col.nombre}`;
                } else {
                    return col.nombre;
                }
            });
        
        sqlOptimizado += columnasOptimizadas.join(', ');
        
        // FROM clause
        if (analisisSQL.tablas.length > 0) {
            const tablaPrincipal = analisisSQL.tablas.find(t => t.tipo === 'FROM');
            if (tablaPrincipal) {
                sqlOptimizado += ` FROM ${tablaPrincipal.nombre}`;
                if (tablaPrincipal.alias) {
                    sqlOptimizado += ` ${tablaPrincipal.alias}`;
                }
            }
        }
        
        // JOINs optimizados
        analisisSQL.joins.forEach(join => {
            sqlOptimizado += ` ${join.tipo} JOIN ${join.tabla}`;
            if (join.alias) {
                sqlOptimizado += ` ${join.alias}`;
            }
            if (join.condicion) {
                sqlOptimizado += ` ON ${reconstruirCondicion(join.condicion)}`;
            }
        });
        
        // WHERE optimizado
        const condicionesWhere = analisisSQL.columnas
            .filter(col => col.tipo === 'WHERE')
            .map(col => `${col.tabla ? col.tabla + '.' : ''}${col.nombre} ${col.operador} ${reconstruirValor(col.valor)}`);
        
        if (condicionesWhere.length > 0) {
            sqlOptimizado += ` WHERE ${condicionesWhere.join(' AND ')}`;
        }
        
        // GROUP BY
        const columnasGroupBy = analisisSQL.columnas
            .filter(col => col.tipo === 'GROUP_BY')
            .map(col => `${col.tabla ? col.tabla + '.' : ''}${col.nombre}`);
        
        if (columnasGroupBy.length > 0) {
            sqlOptimizado += ` GROUP BY ${columnasGroupBy.join(', ')}`;
        }
        
        // HAVING
        const condicionesHaving = analisisSQL.columnas
            .filter(col => col.tipo === 'HAVING')
            .map(col => `${col.tabla ? col.tabla + '.' : ''}${col.nombre} ${col.operador} ${reconstruirValor(col.valor)}`);
        
        if (condicionesHaving.length > 0) {
            sqlOptimizado += ` HAVING ${condicionesHaving.join(' AND ')}`;
        }
        
        // ORDER BY
        const columnasOrderBy = analisisSQL.columnas
            .filter(col => col.tipo === 'ORDER_BY')
            .map(col => `${col.tabla ? col.tabla + '.' : ''}${col.nombre} ${col.direccion || 'ASC'}`);
        
        if (columnasOrderBy.length > 0) {
            sqlOptimizado += ` ORDER BY ${columnasOrderBy.join(', ')}`;
        }
        
        // LIMIT (si no existe)
        if (!sqlOptimizado.toLowerCase().includes('limit')) {
            sqlOptimizado += ' LIMIT 10';
        }
        
        console.log(`‚úÖ [SQL-OPTIMIZER] SQL optimizado generado: ${sqlOptimizado.substring(0, 100)}...`);
        return sqlOptimizado;
        
            } catch (error) {
        console.error('‚ùå [SQL-OPTIMIZER] Error generando SQL optimizado:', error.message);
        // Fallback al SQL original
        return analisisSQL.ast.sql || '';
        }
    }

/**
 * Reconstruir condici√≥n desde AST
 * @param {Object} condicion - Condici√≥n del AST
 * @returns {string} Condici√≥n reconstruida
 */
function reconstruirCondicion(condicion) {
    if (!condicion) return '';
    
    if (condicion.type === 'binary_expr') {
        const izquierda = reconstruirValor(condicion.left);
        const derecha = reconstruirValor(condicion.right);
        return `${izquierda} ${condicion.operator} ${derecha}`;
    } else if (condicion.type === 'column') {
        return `${condicion.table ? condicion.table + '.' : ''}${condicion.name}`;
    }
    
    return condicion.toString();
}

