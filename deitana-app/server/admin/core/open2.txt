
// =====================================
// IMPORTACIONES Y CONFIGURACI√ìN INICIAL
// =====================================



const { OpenAI } = require('openai');
const pool = require('../../db');
const chatManager = require('../../utils/chatManager');
const admin = require('../../firebase-admin');
const pineconeMemoria = require('../../utils/pinecone');
// Comandos y langfuse removidos - no se usan
require('dotenv').config();
const mapaERP = require('./mapaERP');
// Importaciones desde las carpetas organizadas
const {
    guiaMarkdownCompleta,
    promptGlobal, 
    comportamientoGlobal,
    formatoRespuesta
} = require('../prompts/GLOBAL');

const { sqlRules } = require('../prompts/SQL');

const { identidadEmpresa, terminologia } = require('../prompts/DEITANA');




// =====================================
// VERIFICACI√ìN DE IMPORTACIONES
// =====================================


const ragInteligente = require('../data/integrar_rag_nuevo');



const openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY
});

// =====================================
// CONFIGURACI√ìN DE VARIABLES GLOBALES
// =====================================

// Historial global de conversaci√≥n (en memoria, para demo)
const conversationHistory = [];
// Contexto de datos reales de la √∫ltima consulta relevante
let lastRealData = null;




// =====================================
// CONFIGURACI√ìN DE VARIABLES GLOBALES
// =====================================

/**
 * 
 * @param {Array} results - Resultados de la consulta SQL
 * @param {string} query - Consulta original del usuario
 * @returns {string} Respuesta formateada de forma natural
 * 
 */


// =====================================
// FUNCIONES DE EJECUCI√ìN Y VALIDACI√ìN SQL
// =====================================


// =====================================
// EJECUCI√ìN DE CONSULTAS SQL
// =====================================

/**
 * Funci√≥n para ejecutar consultas SQL con sistema inteligente de manejo de errores
 * @param {string} sql - Consulta SQL a ejecutar
 * @param {string} originalQuery - Consulta original del usuario
 * @param {number} attempt - N√∫mero de intento (para reintentos)
 * @returns {Promise<Array>} Resultados de la consulta
 */
async function executeQuery(sql, originalQuery = '', attempt = 1) {
    try {
        // Reemplazar los nombres de las tablas con sus nombres reales
        const sqlModificado = reemplazarNombresTablas(sql);
        console.log(`üîç [SQL-EXEC] Intento ${attempt} - Ejecutando:`, sqlModificado);
        
        const [rows] = await pool.query(sqlModificado);
        console.log('üìä [SQL-RESULT] Filas devueltas:', rows.length);
        
        if (rows.length === 0) {
            console.log('‚ö†Ô∏è [SQL-RESULT] La consulta no devolvi√≥ resultados');
            return [];
        }

        return rows;
        
    } catch (error) {
        console.error(`‚ùå [SQL-EXEC] Error en intento ${attempt}:`, error.message);
        console.error('‚ùå [SQL-EXEC] SQL:', sql);
        
        // Si es posible reintentar y no hemos agotado los intentos
        if (attempt < 3) {
            console.log(`üîÑ [RETRY] Reintentando consulta...`);
            return await executeQuery(sql, originalQuery, attempt + 1);
        }
        
        // Si llegamos aqu√≠, el error no se pudo resolver
        throw error;
    }
}





// =====================================
// DETECCI√ìN DE CONSULTAS ESPECIALES
// =====================================

// =====================================
// MANTENIMIENTO DEL SISTEMA
// =====================================

/**
 * Limpieza autom√°tica de TODOs antiguos (ejecutar peri√≥dicamente)
 */
function performSystemMaintenance() {
    console.log('üßπ [MAINTENANCE] Iniciando mantenimiento del sistema...');
    
    // Log de mantenimiento b√°sico
    console.log('üìä [MAINTENANCE] Sistema funcionando correctamente');
    
    return {
        status: 'ok',
        message: 'Mantenimiento completado'
    };
}

// Ejecutar mantenimiento cada hora
setInterval(performSystemMaintenance, 60 * 60 * 1000);



// =====================================
// VALIDACI√ìN Y PROCESAMIENTO DE SQL
// =====================================

/**
 * Funci√≥n para validar que la respuesta contiene una consulta SQL v√°lida
 * Extrae SQL de diferentes formatos y valida su sintaxis
 * 
 * @param {string} response - Respuesta de OpenAI
 * @returns {string|null} SQL validado o null si no es v√°lido
 * 
 * FORMATOS SOPORTADOS:
 * - <sql>SELECT...</sql>
 * - ```sql SELECT...```
 * - SELECT... (texto plano)
 */
function validarRespuestaSQL(response) {
    console.log('üîç [SQL-VALIDATION] Validando respuesta para extraer SQL...');
    
    const sqlQueries = [];
    
    // Buscar m√∫ltiples consultas SQL con etiquetas <sql>
    const sqlMatches = response.match(/<sql>([\s\S]*?)<\/sql>/g);
    if (sqlMatches) {
        console.log('‚úÖ [SQL-VALIDATION] Encontradas', sqlMatches.length, 'consultas SQL con etiquetas');
        sqlMatches.forEach((match, index) => {
            const sqlContent = match.replace(/<\/?sql>/g, '').trim();
            if (sqlContent && sqlContent.toLowerCase().startsWith('select')) {
                sqlQueries.push(procesarSQL(sqlContent, `SQL ${index + 1}`));
            }
        });
    }
    
    // Si no encontr√≥ con etiquetas, buscar con bloques de c√≥digo SQL
    if (sqlQueries.length === 0) {
        const codeMatches = response.match(/```sql\s*([\s\S]*?)```/g);
        if (codeMatches) {
            console.log('‚úÖ [SQL-VALIDATION] Encontradas', codeMatches.length, 'consultas SQL en bloques de c√≥digo');
            codeMatches.forEach((match, index) => {
                const sqlContent = match.replace(/```sql\s*/, '').replace(/```/, '').trim();
                if (sqlContent && sqlContent.toLowerCase().startsWith('select')) {
                    sqlQueries.push(procesarSQL(sqlContent, `SQL ${index + 1}`));
                }
            });
        }
    }
    
    // Si no encontr√≥ con bloques, buscar SQL en texto plano
    if (sqlQueries.length === 0) {
        console.log('üîç [SQL-VALIDATION] Buscando SQL en texto plano...');
        const sqlPattern = /(SELECT\s+[\s\S]*?)(?:;|$)/gi;
        let match;
        let index = 0;
        while ((match = sqlPattern.exec(response)) !== null) {
            const sqlContent = match[1].trim();
            if (sqlContent && sqlContent.toLowerCase().startsWith('select')) {
                sqlQueries.push(procesarSQL(sqlContent, `SQL ${index + 1}`));
                index++;
            }
        }
        if (sqlQueries.length > 0) {
            console.log('‚úÖ [SQL-VALIDATION] Encontradas', sqlQueries.length, 'consultas SQL en texto plano');
        }
    }
    
    if (sqlQueries.length === 0) {
        console.log('‚ùå [SQL-VALIDATION] No se encontr√≥ SQL en la respuesta');
        return null;
    }
    
    // Si solo hay una consulta, devolverla como string (compatibilidad)
    if (sqlQueries.length === 1) {
        return sqlQueries[0];
    }
    
    // Si hay m√∫ltiples consultas, devolver array
    console.log('‚úÖ [SQL-VALIDATION] Devolviendo', sqlQueries.length, 'consultas SQL');
    return sqlQueries;
}

function procesarSQL(sql, nombre) {
    console.log(`üîç [SQL-PROCESSING] Procesando ${nombre}:`, sql.substring(0, 100) + '...');
    
    // Validar que es una consulta SQL v√°lida
    if (!sql.toLowerCase().startsWith('select')) {
        console.error(`‚ùå [SQL-PROCESSING] ${nombre} no es SELECT`);
        throw new Error(`${nombre} debe comenzar con SELECT`);
    }
    
    // Validar y corregir sintaxis com√∫n
    if (sql.includes('OFFSET')) {
        const offsetMatch = sql.match(/LIMIT\s+(\d+)\s+OFFSET\s+(\d+)/i);
        if (offsetMatch) {
            sql = sql.replace(
                /LIMIT\s+(\d+)\s+OFFSET\s+(\d+)/i,
                `LIMIT ${offsetMatch[2]}, ${offsetMatch[1]}`
            );
            console.log(`üîÑ [SQL-PROCESSING] Corregida sintaxis OFFSET en ${nombre}`);
        }
    }
    
    // Verificar si es una consulta de conteo
    const esConsultaConteo = sql.toLowerCase().includes('count(*)');
    const tieneDistinct = /select\s+distinct/i.test(sql);
    const tieneGroupBy = /group by/i.test(sql);
    const tieneJoin = /join/i.test(sql);
    const tieneFiltroFecha = /where[\s\S]*fpe_fec|where[\s\S]*fecha|where[\s\S]*_fec/i.test(sql);
    
    // Si no tiene LIMIT y no es excepci√≥n, AGREGAR LIMIT autom√°ticamente
    if (!esConsultaConteo && !tieneDistinct && !tieneGroupBy && !sql.toLowerCase().includes('limit') && !(tieneJoin && tieneFiltroFecha)) {
        sql = sql.replace(/;*\s*$/, '');
        sql += ' LIMIT 10';
        console.log(`üîÑ [SQL-PROCESSING] Agregado LIMIT autom√°tico en ${nombre}`);
    }
    
    console.log(`‚úÖ [SQL-PROCESSING] ${nombre} validado:`, sql.substring(0, 100) + '...');
    return sql;
}



// =====================================
// UTILIDADES DE MAPEO DE TABLAS
// =====================================

// Funci√≥n para reemplazar nombres de tablas en la consulta SQL
function reemplazarNombresTablas(sql) {
    let sqlModificado = sql;
    Object.keys(mapaERP).forEach(key => {
        if (mapaERP[key].tabla && mapaERP[key].tabla.includes('-')) {
            const regex = new RegExp(`\\b${key}\\b`, 'g');
            sqlModificado = sqlModificado.replace(regex, `\`${mapaERP[key].tabla}\``);
        }
    });
    return sqlModificado;
}





// =====================================
// FUNCIONES DE PERSISTENCIA Y ALMACENAMIENTO
// =====================================



// Funci√≥n para guardar mensaje en Firestore
async function saveMessageToFirestore(userId, message, isAdmin = true) {
    try {
        const now = new Date();
        const messageData = {
            content: message,
            role: 'user',
            timestamp: now
        };

        const userChatRef = chatManager.chatsCollection.doc(userId);
        const conversationRef = userChatRef.collection('conversations').doc('admin_conversation');
        
        // Primero obtenemos el documento actual
        const conversationDoc = await conversationRef.get();
        let messages = [];
        
        if (conversationDoc.exists) {
            messages = conversationDoc.data().messages || [];
        }
        
        // Agregamos el nuevo mensaje
        messages.push(messageData);
        
        // Actualizamos el documento con el nuevo array de mensajes
        await conversationRef.set({
            lastUpdated: now,
            messages: messages
        }, { merge: true });

        return true;
    } catch (error) {
        console.error('Error al guardar mensaje en Firestore:', error);
        return false;
    }
}

// Funci√≥n para guardar mensaje del asistente en Firestore
async function saveAssistantMessageToFirestore(userId, message) {
    try {
        const now = new Date();
        const messageData = {
            content: message,
            role: 'assistant',
            timestamp: now
        };

        const userChatRef = chatManager.chatsCollection.doc(userId);
        const conversationRef = userChatRef.collection('conversations').doc('admin_conversation');
        
        // Primero obtenemos el documento actual
        const conversationDoc = await conversationRef.get();
        let messages = [];
        
        if (conversationDoc.exists) {
            messages = conversationDoc.data().messages || [];
        }
        
        // Agregamos el nuevo mensaje
        messages.push(messageData);
        
        // LIMITAR EL TAMA√ëO DE LA CONVERSACI√ìN PARA EVITAR ERRORES DE FIRESTORE
        const MAX_MESSAGES = 30; // M√°ximo 30 mensajes por conversaci√≥n
        const MAX_MESSAGE_SIZE = 50000; // M√°ximo 50KB por mensaje
        
        // Si el mensaje es muy grande, truncarlo
        if (messageData.content.length > MAX_MESSAGE_SIZE) {
            console.log(`‚ö†Ô∏è [FIRESTORE] Mensaje muy grande (${messageData.content.length} chars), truncando...`);
            messageData.content = messageData.content.substring(0, MAX_MESSAGE_SIZE) + '\n\n[Contenido truncado por l√≠mite de tama√±o]';
        }
        
        // Si hay demasiados mensajes, mantener solo los √∫ltimos MAX_MESSAGES
        if (messages.length > MAX_MESSAGES) {
            console.log(`‚ö†Ô∏è [FIRESTORE] Demasiados mensajes (${messages.length}), manteniendo √∫ltimos ${MAX_MESSAGES}...`);
            messages = messages.slice(-MAX_MESSAGES);
        }
        
        // Calcular tama√±o aproximado del documento
        const documentSize = JSON.stringify({
            lastUpdated: now,
            messages: messages
        }).length;
        
        if (documentSize > 900000) { // 900KB como margen de seguridad
            console.log(`‚ö†Ô∏è [FIRESTORE] Documento muy grande (${documentSize} bytes), limpiando conversaci√≥n...`);
            // Mantener solo los √∫ltimos 10 mensajes
            messages = messages.slice(-10);
        }
        
        // Actualizamos el documento con el nuevo array de mensajes
        await conversationRef.set({
            lastUpdated: now,
            messages: messages
        }, { merge: true });

        console.log(`‚úÖ [FIRESTORE] Mensaje guardado. Total mensajes: ${messages.length}`);
        return true;
    } catch (error) {
        console.error('Error al guardar mensaje del asistente en Firestore:', error);
        
        // Si el error es por tama√±o, intentar limpiar la conversaci√≥n
        if (error.message && error.message.includes('exceeds the maximum allowed size')) {
            console.log('üîÑ [FIRESTORE] Intentando limpiar conversaci√≥n por tama√±o...');
            try {
                const userChatRef = chatManager.chatsCollection.doc(userId);
                const conversationRef = userChatRef.collection('conversations').doc('admin_conversation');
                
                // Crear nueva conversaci√≥n con solo el mensaje actual
                await conversationRef.set({
                    lastUpdated: new Date(),
                    messages: [{
                        content: message.length > 50000 ? message.substring(0, 50000) + '\n\n[Contenido truncado]' : message,
                        role: 'assistant',
                        timestamp: new Date()
                    }]
                });
                
                console.log('‚úÖ [FIRESTORE] Conversaci√≥n limpiada exitosamente');
                return true;
            } catch (cleanupError) {
                console.error('‚ùå [FIRESTORE] Error limpiando conversaci√≥n:', cleanupError);
                return false;
            }
        }
        
        return false;
    }
}





// =====================================
// CONSTRUCCI√ìN INTELIGENTE DE PROMPTS
// =====================================

/**
 * Construye un prompt optimizado usando IA inteligente (UNA SOLA LLAMADA)
 * Esta es la funci√≥n principal que orquesta todo el proceso de construcci√≥n
 * 
 * @param {string} mensaje - Consulta del usuario
 * @param {Object} mapaERP - Mapa de estructura de la base de datos
 * @param {Object} openaiClient - Cliente de OpenAI
 * @param {string} contextoPinecone - Contexto de memoria vectorial
 * @param {string} contextoDatos - Datos de contexto previo
 * @param {boolean} modoDesarrollo - Modo de desarrollo para debugging
 * @returns {Object} Prompt construido con configuraci√≥n y m√©tricas
 */
async function construirPromptInteligente(mensaje, mapaERP, openaiClient, contextoPinecone = '', contextoDatos = '', historialConversacion = [], modoDesarrollo = false) {
    console.log('üöÄ [PROMPT-BUILDER] Construyendo prompt ULTRA-OPTIMIZADO...');
    
    // =====================================
    // AN√ÅLISIS DE INTENCI√ìN Y CONFIGURACI√ìN
    // =====================================
    
    // 1. AN√ÅLISIS INTELIGENTE R√ÅPIDO (SIN LLAMADAS IA)
    const intencion = await analizarIntencionInteligente(mensaje);
    console.log('üéØ [PROMPT-BUILDER] Intenci√≥n detectada:', intencion);
    
    // 2. Configuraci√≥n del modelo (siempre gpt-4o)
    const configModelo = {
        modelo: 'gpt-4o',
        maxTokens: 3000,
        temperature: 0.9,
        topP: 0.95,
        frequencyPenalty: 0.5,
        presencePenalty: 0.4
    };
    
    // =====================================
    // RECOLECCI√ìN DE INFORMACI√ìN
    // =====================================
    
    // 3. SIEMPRE incluir mapaERP - la IA decide si lo usa
    const contextoMapaERP = construirContextoMapaERPCompleto(mapaERP);
    console.log('üìã [MAPA-ERP] Incluyendo mapaERP completo - IA decide si lo usa');
    
    // 4. Construir instrucciones naturales
    const instruccionesNaturales = construirInstruccionesNaturales(intencion, [], contextoPinecone);
    console.log(`üîç [DEBUG-PROMPT] Intenci√≥n final: ${JSON.stringify(intencion)}`);
    console.log(`üîç [DEBUG-PROMPT] Instrucciones naturales construidas: ${instruccionesNaturales.length} caracteres`);
    
    // 5. RAG INTELIGENTE Y SELECTIVO (OPTIMIZADO)
    let contextoRAG = '';
    
    // RAG SIEMPRE ACTIVO para evitar alucinaciones
    try {
        console.log('üß† [RAG] Recuperando conocimiento empresarial...');
        contextoRAG = await ragInteligente.recuperarConocimientoRelevante(mensaje, 'sistema');
        console.log('‚úÖ [RAG] Conocimiento recuperado:', contextoRAG ? contextoRAG.length : 0, 'caracteres');
    } catch (error) {
        console.error('‚ùå [RAG] Error recuperando conocimiento:', error.message);
        // Continuar sin RAG si hay error, pero registrar el problema
    }
    



    
// =====================================
// ENSAMBLAJE DEL PROMPT FINAL
// =====================================
    
    // 6. Preparar la fecha actual para el prompt
    const fechaActual = new Date().toLocaleString('es-ES', { timeZone: 'Europe/Madrid', dateStyle: 'full', timeStyle: 'short' });
    
    // 7. Crear el prompt base (como el encabezado de una carta)
    const promptGlobalConFecha = promptGlobal.replace('{{FECHA_ACTUAL}}', fechaActual);
    
    // 8. Empezar a construir el prompt final (como empezar a escribir la carta)
    let promptFinal = `${promptGlobalConFecha}\n` + instruccionesNaturales;
    
    // 9. Si encontramos informaci√≥n de la empresa, ponerla AL PRINCIPIO (como informaci√≥n importante)
    if (contextoRAG) {
        console.log('üéØ [RAG] PRIORIZANDO contexto empresarial al inicio');
        // Reconstruir el prompt poniendo la informaci√≥n de la empresa al principio
        promptFinal = `${promptGlobalConFecha}\n\nCONOCIMIENTO EMPRESARIAL ESPEC√çFICO:\n${contextoRAG}\n\nINSTRUCCI√ìN: Debes usar siempre la informaci√≥n del conocimiento empresarial espec√≠fico proporcionado arriba. Si la informaci√≥n est√° disponible en ese contexto, √∫sala. No des respuestas gen√©ricas cuando tengas informaci√≥n espec√≠fica de la empresa.\n\n` + instruccionesNaturales;
    }
    
    // 10. Agregar la estructura de la base de datos (como un mapa de la ciudad)
    promptFinal += `${contextoMapaERP}\n\n`;
    
    // 11. Solo agregar reglas SQL si la consulta necesita datos (como reglas de tr√°fico solo si vas a manejar)
    if (intencion.tipo === 'sql' || intencion.tipo === 'rag_sql') {
        promptFinal += `${sqlRules}\n\n`;
    }
    
    // 12. Agregar datos de consultas anteriores si existen (como recordar lo que hablamos antes)
    if (contextoDatos) {
        promptFinal += `DATOS DE CONTEXTO PREVIO:\n${contextoDatos}\n\n`;
    }
    
    // 13. Agregar conversaci√≥n reciente si existe (como recordar los √∫ltimos mensajes)
    if (historialConversacion && historialConversacion.length > 0) {
        const ultimosMensajes = historialConversacion.slice(-4); // Solo los √∫ltimos 4 mensajes
        const contextoConversacional = ultimosMensajes.map(msg => 
            `${msg.role === 'user' ? 'Usuario' : 'Asistente'}: ${msg.content}`
        ).join('\n');
        
        // Agregar el contexto conversacional al prompt final
        promptFinal += `## üí¨ CONTEXTO CONVERSACIONAL RECIENTE\n\n${contextoConversacional}\n\n## üéØ INSTRUCCIONES DE CONTINUIDAD\n\n- Mant√©n la continuidad natural de la conversaci√≥n\n- NO te presentes de nuevo si ya has saludado\n- Usa el contexto previo para dar respuestas coherentes\n- Si el usuario hace referencia a algo mencionado antes, √∫salo\n- Mant√©n el tono y estilo de la conversaci√≥n en curso\n\n`;
    }
    
    console.log('‚úÖ [PROMPT-BUILDER] Prompt construido - MapaERP: SIEMPRE, RAG: SIEMPRE');





    
// =====================================
// RETORNO DE RESULTADOS
// =====================================
    
    return {
        prompt: promptFinal,
        configModelo: configModelo,
        intencion: intencion,
        tablasRelevantes: [], // IA analiza todas las tablas del mapaERP
        metricas: {
            usaIA: true, // IA analiza mapaERP completo
            tablasDetectadas: Object.keys(mapaERP).length,
            llamadasIA: 1, // ¬°Solo UNA llamada!
            optimizado: true,
            modeloUnico: 'gpt-4o',
            mapaERPIncluido: true, // SIEMPRE incluido
            ragIncluido: true // SIEMPRE incluido para evitar alucinaciones
        }
    };
}





// =====================================
// GENERACI√ìN DE T√çTULOS Y CATEGORIZACI√ìN
// =====================================

/**
 * Genera un t√≠tulo breve para el thinking basado en la consulta del usuario
 */
function generarTituloBreve(consulta) {
    const palabras = consulta.toLowerCase().split(' ');
    
    // Detectar tipos de consulta comunes
    if (palabras.some(p => ['cliente', 'clientes'].includes(p))) {
        return 'Consultando clientes';
    }
    if (palabras.some(p => ['producto', 'productos', 'art√≠culo', 'art√≠culos'].includes(p))) {
        return 'Consultando productos';
    }
    if (palabras.some(p => ['venta', 'ventas', 'factura', 'facturas'].includes(p))) {
        return 'Consultando ventas';
    }
    if (palabras.some(p => ['stock', 'inventario', 'almac√©n'].includes(p))) {
        return 'Consultando stock';
    }
    if (palabras.some(p => ['encargo', 'encargos', 'pedido', 'pedidos'].includes(p))) {
        return 'Consultando encargos';
    }
    if (palabras.some(p => ['a√±o', 'a√±os', 'fecha', 'fechas'].includes(p))) {
        return 'Consultando fechas';
    }
    if (palabras.some(p => ['pago', 'pagos', 'forma', 'formas'].includes(p))) {
        return 'Consultando pagos';
    }
    
    // Si no coincide con ning√∫n patr√≥n, usar las primeras palabras
    const primerasPalabras = palabras.slice(0, 2).join(' ');
    return primerasPalabras.charAt(0).toUpperCase() + primerasPalabras.slice(1);
}





// =====================================
// AN√ÅLISIS INTELIGENTE DE INTENCIONES
// =====================================

/**
 * Analiza la intenci√≥n usando IA real (escalable para 900 tablas y 200 usuarios)
 */
async function analizarIntencionInteligente(mensaje) {
    console.log('üß† [INTENCION-IA] Analizando consulta con IA real...');
    
    try {
        // Usar IA para analizar la intenci√≥n de forma inteligente
        const promptAnalisis = `Analiza la siguiente consulta y determina qu√© tipo de respuesta necesita:

CONSULTA: "${mensaje}"

OPCIONES:
1. "sql" - Si la consulta pide datos, n√∫meros, conteos, listas, informaci√≥n de la base de datos
2. "conocimiento" - Si la consulta pide explicaciones, definiciones, protocolos, informaci√≥n del archivo .txt  
3. "conversacion" - Si es un saludo, agradecimiento, o conversaci√≥n casual

REGLAS INTELIGENTES:

üîç ES SQL SI:
- Pide DATOS espec√≠ficos (n√∫meros, cantidades, listas)
- Usa palabras como: "cu√°ntos", "dame", "lista de", "muestra", "busca"
- Menciona ENTIDADES de base de datos (clientes, productos, ventas, etc.)
- Pide informaci√≥n que requiere CONSULTAR datos
- Incluye filtros (por fecha, ubicaci√≥n, tipo, etc.)

üìö ES CONOCIMIENTO SI:
- Pide EXPLICACIONES o DEFINICIONES
- Usa palabras como: "qu√© es", "c√≥mo funciona", "explica", "significa"
- Pregunta sobre PROCESOS o PROTOCOLOS
- Busca informaci√≥n conceptual o te√≥rica

üí¨ ES CONVERSACI√ìN SI:
- Saludos, despedidas, agradecimientos
- Charla casual sin solicitud espec√≠fica de datos

‚ö° PRINCIPIO CLAVE: Si hay DUDA, es probablemente SQL (la mayor√≠a de consultas en ERP piden datos)

Analiza la INTENCI√ìN SEM√ÅNTICA, no palabras espec√≠ficas.

Responde SOLO con: sql, conocimiento, o conversacion`;

        const response = await openai.chat.completions.create({
            model: 'gpt-4o-mini',
            messages: [{ role: 'user', content: promptAnalisis }],
            max_tokens: 10,
            temperature: 0.1
        });

        const tipo = response.choices[0].message.content.trim().toLowerCase();
        console.log(`‚úÖ [INTENCION-IA] Tipo detectado: ${tipo}`);
        console.log(`üîç [INTENCION-IA] Mensaje original: "${mensaje}"`);
        console.log(`üîç [INTENCION-IA] Respuesta completa: "${response.choices[0].message.content}"`);

        // Mapear a tipos internos
        if (tipo === 'sql') {
            return { tipo: 'sql', confianza: 0.95 };
        } else if (tipo === 'conocimiento') {
            return { tipo: 'rag_sql', confianza: 0.95 };
        } else {
            return { tipo: 'conversacion', confianza: 0.95 };
        }
        
    } catch (error) {
        console.error('‚ùå [INTENCION-IA] Error:', error.message);
        // Fallback inteligente: si tiene signo de interrogaci√≥n, probablemente necesita datos
        if (mensaje.toLowerCase().includes('?')) {
            return { tipo: 'sql', confianza: 0.7 };
        }
        return { tipo: 'conversacion', confianza: 0.5 };
    }
}







// =====================================
// FUNCI√ìN PARA OBTENER INFORMACI√ìN DEL USUARIO
// =====================================

/**
 * Obtiene la informaci√≥n del usuario desde Firebase incluyendo su displayName
 */
async function obtenerInfoUsuario(userId) {
    try {
        console.log('üë§ [USER-INFO] Obteniendo informaci√≥n del usuario:', userId);
        
        const userRecord = await admin.auth().getUser(userId);
        
        const infoUsuario = {
            uid: userRecord.uid,
            nombre: userRecord.displayName || 'Usuario',
            email: userRecord.email,
            esAdmin: userRecord.customClaims?.isAdmin || false
        };
        
        console.log('‚úÖ [USER-INFO] Informaci√≥n obtenida:', {
            nombre: infoUsuario.nombre,
            email: infoUsuario.email?.substring(0, 3) + '***',
            esAdmin: infoUsuario.esAdmin
        });
        
        return infoUsuario;
    } catch (error) {
        console.error('‚ùå [USER-INFO] Error obteniendo informaci√≥n del usuario:', error.message);
        return {
            uid: userId,
            nombre: 'Usuario',
            email: null,
            esAdmin: false
        };
    }
}

// =====================================
// FUNCI√ìN PARA OBTENER HISTORIAL CONVERSACIONAL
// =====================================

/**
 * Obtiene el historial completo de la conversaci√≥n para contexto
 */
async function obtenerHistorialConversacion(userId, conversationId) {
    try {
        console.log('üìú [HISTORIAL] Obteniendo contexto conversacional...');
        console.log('üìú [HISTORIAL] Usuario:', userId, 'Conversaci√≥n:', conversationId);
        
        if (!conversationId || conversationId.startsWith('temp_')) {
            console.log('üìú [HISTORIAL] Conversaci√≥n temporal/nueva - sin historial previo');
            return [];
        }
        
        const mensajes = await chatManager.getConversationMessages(userId, conversationId);
        
        // Solo tomar los √∫ltimos 6 mensajes para contexto (3 intercambios)
        const mensajesRecientes = mensajes.slice(-6);
        
        console.log(`üìú [HISTORIAL] Obtenidos ${mensajesRecientes.length} mensajes para contexto`);
        
        // Formatear para usar en el prompt
        const contextoFormateado = mensajesRecientes.map(msg => ({
            role: msg.role,
            content: msg.content
        }));
        
        return contextoFormateado;
    } catch (error) {
        console.error('‚ùå [HISTORIAL] Error obteniendo historial:', error.message);
        return [];
    }
}

// =====================================
// FUNCI√ìN PARA PERSONALIZAR RESPUESTA CON NOMBRE
// =====================================

/**
 * Personaliza la respuesta incluyendo el nombre del usuario de forma sutil
 */
function personalizarRespuesta(respuesta, nombreUsuario) {
    // No personalizar si es un nombre gen√©rico
    if (!nombreUsuario || nombreUsuario === 'Usuario' || nombreUsuario.length < 2) {
        return respuesta;
    }
    
    console.log(`üé® [PERSONALIZACI√ìN] Personalizando respuesta para ${nombreUsuario}`);
    
    // Patrones para agregar el nombre de forma sutil (no siempre, aproximadamente 30% de las veces)
    const deberiaPersonalizar = Math.random() < 0.3;
    
    if (!deberiaPersonalizar) {
        console.log('üé® [PERSONALIZACI√ìN] Saltando personalizaci√≥n para esta respuesta');
        return respuesta;
    }
    
    const patronesPersonalizacion = [
        // Al inicio de la respuesta
        {
            patron: /^¬°?Hola[!,]?\s*/i,
            reemplazo: `¬°Hola, ${nombreUsuario}! `
        },
        {
            patron: /^Perfecto[!,]?\s*/i,
            reemplazo: `Perfecto, ${nombreUsuario}. `
        },
        // En medio de la respuesta
        {
            patron: /¬øTe sirve esta informaci√≥n\?/i,
            reemplazo: `¬øTe sirve esta informaci√≥n, ${nombreUsuario}?`
        },
        {
            patron: /¬øNecesitas algo m√°s\?/i,
            reemplazo: `¬øNecesitas algo m√°s, ${nombreUsuario}?`
        },
        // Al final de la respuesta
        {
            patron: /¬øEn qu√© m√°s puedo ayudarte\?/i,
            reemplazo: `¬øEn qu√© m√°s puedo ayudarte, ${nombreUsuario}?`
        }
    ];
    
    // Aplicar un patr√≥n aleatorio que coincida
    for (const { patron, reemplazo } of patronesPersonalizacion) {
        if (patron.test(respuesta)) {
            const respuestaPersonalizada = respuesta.replace(patron, reemplazo);
            console.log('‚úÖ [PERSONALIZACI√ìN] Respuesta personalizada aplicada');
            return respuestaPersonalizada;
        }
    }
    
    // Si no coincide ning√∫n patr√≥n, agregar el nombre al final de forma sutil
    if (respuesta.endsWith('?')) {
        return respuesta.slice(0, -1) + `, ${nombreUsuario}?`;
    } else if (respuesta.endsWith('.')) {
        return respuesta.slice(0, -1) + `, ${nombreUsuario}.`;
    }
    
    console.log('üé® [PERSONALIZACI√ìN] No se aplic√≥ personalizaci√≥n espec√≠fica');
    return respuesta;
}





/**
 * Funci√≥n de streaming para procesamiento en tiempo real
 * Proporciona respuesta chunk por chunk al frontend
 * 
 * @param {Object} params - Par√°metros de la consulta
 * @param {string} params.message - Mensaje del usuario
 * @param {string} params.userId - ID del usuario
 * @param {string} params.conversationId - ID de la conversaci√≥n
 * @param {Object} params.response - Objeto de respuesta HTTP
 * @returns {Object} Resultado del procesamiento
 * 
 * CARACTER√çSTICAS:
 * - Streaming en tiempo real chunk por chunk
 * - Procesamiento post-streaming para SQL
 * - Segunda llamada para explicaci√≥n natural
 * - Headers especiales para streaming HTTP
 * - Manejo de errores en tiempo real
 * - Persistencia as√≠ncrona de respuestas
 */
async function processQueryStream({ message, userId, conversationId, response }) {
    console.log('üîç [FLUJO] Usando processQueryStream (STREAMING) - openAI.js');
    const tiempoInicio = Date.now();
    console.log('üöÄ [STREAMING] ===== INICIANDO PROCESO DE CONSULTA CON STREAMING =====');
    console.log('üöÄ [STREAMING] Procesando consulta:', message);
    console.log('üöÄ [STREAMING] Usuario ID:', userId);
    console.log('üöÄ [STREAMING] Conversaci√≥n ID:', conversationId);

    // =====================================
    // OBTENER INFORMACI√ìN DEL USUARIO Y CONTEXTO
    // =====================================
    
    const infoUsuario = await obtenerInfoUsuario(userId);
    const historialConversacion = await obtenerHistorialConversacion(userId, conversationId);

    try {
        // No esperar a que termine de guardar - hacer async
        saveMessageToFirestore(userId, message).catch(err => 
            console.error('‚ùå [FIRESTORE] Error guardando mensaje:', err.message)
        );
        console.log('üíæ [FIRESTORE] Guardando mensaje del usuario (async)...');

        // =====================================
        // OBTENER CONTEXTO DE MEMORIA (SOLO CUANDO ES NECESARIO)
        // =====================================
        
        console.log('üß† [MEMORIA] Analizando si necesita contexto conversacional...');
        let contextoPinecone = '';
        
        // Detecci√≥n ultra-r√°pida para consultas que necesitan memoria
        const consultasQueNecesitanMemoria = /\b(anterior|antes|mencionaste|dijiste|conversaci√≥n|conversacion|hablamos|recordar|recuerdas|me|mi|entonces|y|bueno|ok|si|s√≠|contin√∫a|continua|m√°s|mas|otros|otra|que|qu√©)\b/i;
        const esRespuestaCorta = message.trim().length < 15;
        const necesitaContexto = consultasQueNecesitanMemoria.test(message) || esRespuestaCorta || historialConversacion.length > 0;
        
        if (necesitaContexto) {
            console.log('üß† [MEMORIA] Consulta requiere contexto - buscando en memoria...');
            
            // Agregar contexto conversacional al contexto de memoria
            if (historialConversacion.length > 0) {
                const ultimosMensajes = historialConversacion.slice(-2); // Solo los 2 √∫ltimos
                const contextoConversacional = ultimosMensajes.map(msg => 
                    `${msg.role === 'user' ? 'Usuario' : 'Asistente'}: ${msg.content}`
                ).join('\n');
                
                contextoPinecone += `\n=== CONTEXTO CONVERSACIONAL RECIENTE ===\n${contextoConversacional}\n\nINSTRUCCI√ìN: Mant√©n la continuidad de la conversaci√≥n anterior.`;
            }
            
            // B√∫squeda de memoria as√≠ncrona (no bloquear la respuesta)
            pineconeMemoria.agregarContextoMemoria(userId, message)
                .then(memoriaAdicional => {
                if (memoriaAdicional) {
                        console.log('‚úÖ [PINECONE] Memoria adicional encontrada (async)');
                    }
                })
                .catch(error => {
                    console.error('‚ùå [PINECONE] Error buscando recuerdos (async):', error.message);
                });
        } else {
            console.log('‚ö° [OPTIMIZACI√ìN] Consulta simple - saltando b√∫squeda de memoria');
        }

        


        // =====================================
        // CONSTRUIR PROMPT OPTIMIZADO (SIN LLAMADAS IA)
        // =====================================
        
        console.log('üß† [IA-INTELIGENTE] Construyendo prompt OPTIMIZADO...');
        const promptBuilder = await construirPromptInteligente(
            message, 
            mapaERP,
            openai,
            contextoPinecone, 
            lastRealData || '',
            false
        );
        
        console.log('üß† [IA-INTELIGENTE] M√©tricas de construcci√≥n:');
        console.log('üß† [IA-INTELIGENTE] Intenci√≥n detectada:', promptBuilder.intencion);
        console.log('üß† [IA-INTELIGENTE] Modelo seleccionado:', promptBuilder.configModelo.modelo);

        // =====================================
        // CONFIGURAR MENSAJES PARA STREAMING
        // =====================================

        // Construir array de mensajes con historial conversacional
        const mensajesLlamada = [
            {
                role: 'system',
                content: promptBuilder.prompt
            }
        ];

        // Agregar historial conversacional como mensajes reales
        if (historialConversacion && historialConversacion.length > 0) {
            console.log('üí¨ [STREAMING-CONTEXTO] Agregando historial conversacional como mensajes reales...');
            historialConversacion.forEach((msg, index) => {
                console.log(`üí¨ [STREAMING-CONTEXTO] Mensaje ${index + 1}: ${msg.role} - "${msg.content.substring(0, 100)}..."`);
                mensajesLlamada.push({
                    role: msg.role,
                    content: msg.content
                });
            });
        }

        // Agregar el mensaje actual del usuario
        mensajesLlamada.push({
            role: 'user', 
            content: message
        });

        console.log('üìä [STREAMING] Iniciando llamada con stream a OpenAI...');
        console.log('ü§ñ [MODELO-DIN√ÅMICO] Usando modelo:', promptBuilder.configModelo.modelo);

        // =====================================
        // LLAMADA CON STREAMING
        // =====================================

        // Configurar headers para streaming
        response.writeHead(200, {
            'Content-Type': 'text/plain; charset=utf-8',
            'Transfer-Encoding': 'chunked',
            'Access-Control-Allow-Origin': '*',
            'Access-Control-Allow-Headers': 'Content-Type',
            'Cache-Control': 'no-cache',
            'Connection': 'keep-alive'
        });

        // =====================================
        // VARIABLES DE CONTROL DEL STREAMING
        // =====================================
        
        let fullResponse = '';
        let tokenCount = 0;
        let sqlDetected = false;

        // =====================================
        // INICIO DEL STREAMING CON OPENAI
        // =====================================
        
        try {
            const stream = await openai.chat.completions.create({
                model: promptBuilder.configModelo.modelo,
                messages: mensajesLlamada,
                max_tokens: promptBuilder.configModelo.maxTokens,
                temperature: promptBuilder.configModelo.temperature,
                top_p: promptBuilder.configModelo.topP,                       // ‚ö° SAMPLING CREATIVO
                frequency_penalty: promptBuilder.configModelo.frequencyPenalty, // ‚ö° ANTI-REPETICI√ìN
                presence_penalty: promptBuilder.configModelo.presencePenalty,   // ‚ö° DIVERSIDAD
                stream: true  // ¬°AQU√ç EST√Å LA MAGIA!
            });

            console.log('‚úÖ [STREAMING] Stream iniciado correctamente');
            
            // =====================================
            // LOGS DETALLADOS DEL PROCESO
            // =====================================
            console.log('\nüöÄ ==========================================');
            console.log('üöÄ INICIO DEL PROCESO DE CONSULTA');
            console.log('üöÄ ==========================================');
            console.log(`üìù CONSULTA: "${message}"`);
            console.log(`üë§ USUARIO: ${userId}`);
            console.log(`üÜî CONVERSACI√ìN: ${conversationId}`);
            console.log('üöÄ ==========================================\n');

            // =====================================
            // VARIABLES PARA TRACKING DEL THINKING
            // =====================================
            
            // Variables para tracking del thinking
            let thinkingDetected = false;
            let thinkingContent = '';
            let insideThinking = false;
            let thinkingHeaderSent = false;
            let beforeThinkingContent = '';
            const tituloBreve = generarTituloBreve(message);

            // =====================================
            // PROCESAMIENTO DE CHUNKS DEL STREAM
            // =====================================
            
            // Procesar cada chunk del stream
            for await (const chunk of stream) {
                const content = chunk.choices[0]?.delta?.content;
                
                if (content) {
                    // PRIMERO: Detectar thinking ANTES de hacer cualquier otra cosa
                    const hasThinkingTag = content.includes('<thinking') || content.includes('<think') || content.includes('thinking>');
                    
                    fullResponse += content;
                    tokenCount++;
                    
                    // Detectar inicio del thinking INMEDIATAMENTE
                    if (!thinkingDetected && (fullResponse.includes('<thinking>') || hasThinkingTag)) {
                        thinkingDetected = true;
                        insideThinking = true;
                        console.log('\nüß† ==========================================');
                        console.log('üß† THINKING DETECTADO - LLAMADA 1 ACTIVA');
                        console.log('üß† ==========================================');
                        console.log('üß† La IA est√° razonando sobre la consulta...');
                        console.log(`üß† Chunk con thinking: ${content.substring(0, 50)}...`);
                        console.log('üß† ==========================================\n');
                        
                        // Enviar header del thinking inmediatamente
                        if (!thinkingHeaderSent) {
                            // MODO PRODUCCI√ìN: Usar thinking real de la IA
                            response.write(JSON.stringify({
                                type: 'thinking',
                                message: tituloBreve,
                                timestamp: Date.now(),
                                trace: [{
                                    id: "1",
                                    type: "thought",
                                    title: tituloBreve,
                                    description: "Procesando informaci√≥n del ERP",
                                    status: "running",
                                    startTime: new Date().toISOString(),
                                    duration: 0
                                }]
                            }) + '\n');
                            thinkingHeaderSent = true;
                        }
                    }
                    
                    // Si estamos dentro del thinking, solo acumular contenido (no enviar como chunk)
                    if (insideThinking && thinkingHeaderSent) {
                        thinkingContent += content;
                        // No enviar contenido del thinking como chunk cuando usamos trace
                        
                        // Detectar fin del thinking
                        if (thinkingContent.includes('</thinking>')) {
                            insideThinking = false;
                            console.log('üß† [THINKING] Fin del thinking detectado');
                        }
                    }
                    
                    // Detectar si hay SQL en la respuesta acumulada
                    if (!sqlDetected && fullResponse.includes('<sql>')) {
                        sqlDetected = true;
                        console.log('\nüîç ==========================================');
                        console.log('üîç SQL DETECTADO - LLAMADA 1 COMPLETADA');
                        console.log('üîç ==========================================');
                        console.log('üîç La IA gener√≥ una consulta SQL');
                        console.log('üîç Ejecutando consulta en la base de datos...');
                        console.log('üîç ==========================================\n');
                        
                        // Enviar actualizaci√≥n del trace con SQL completado
                        response.write(JSON.stringify({
                            type: 'sql_executing',
                            message: 'Ejecutando consulta SQL',
                            timestamp: Date.now(),
                            trace: [
                                {
                                    id: "1",
                                    type: "thought",
                                    title: tituloBreve,
                                    description: thinkingContent.replace(/<\/?thinking[^>]*>/g, '').trim(),
                                    status: "completed",
                                    startTime: new Date().toISOString(),
                                    endTime: new Date().toISOString(),
                                    duration: 3
                                },
                                {
                                    id: "2",
                                    type: "tool",
                                    title: promptBuilder.intencion && promptBuilder.intencion.tipo === 'conversacion' ? "Procesando respuesta conversacional" : "Consultando base de datos del ERP",
                                    description: promptBuilder.intencion && promptBuilder.intencion.tipo === 'conversacion' ? "Generando respuesta en lenguaje natural" : "Ejecutando consulta SQL en la base de datos",
                                    status: "running",
                                    startTime: new Date().toISOString(),
                                    duration: 0
                                }
                            ]
                        }) + '\n');
                    }
                    
                    // Solo enviar chunks normales si NO estamos en thinking y NO se detect√≥ SQL
                    // Y NO contiene NING√öN fragmento de tags de thinking
                    if (!insideThinking && !sqlDetected && !thinkingDetected && !hasThinkingTag && !content.includes('</thinking>')) {
                        response.write(JSON.stringify({
                            type: 'chunk',
                            content: content,
                            timestamp: Date.now()
                        }) + '\n');
                    }
                }
                
                // Si el stream termin√≥
                if (chunk.choices[0]?.finish_reason) {
                    console.log('‚úÖ [STREAMING] Stream completado');
                    break;
                }
            }

            // =====================================
            // PROCESAR THINKING COMPLETO
            // =====================================
            
            // Si tenemos thinking capturado, procesarlo ahora
            if (thinkingContent && thinkingContent.includes('</thinking>')) {
                const cleanThinkingContent = thinkingContent.replace(/<\/?thinking[^>]*>/g, '').trim();
                console.log('üß† [THINKING] Procesando thinking completo:', cleanThinkingContent.substring(0, 100) + '...');
                
                // MODO PRODUCCI√ìN: Enviar thinking completo y continuar con la respuesta
                response.write(JSON.stringify({
                    type: 'thinking_complete',
                    message: 'Consulta SQL completada',
                    timestamp: Date.now(),
                    trace: [
                        {
                            id: "1",
                            type: "thought",
                            title: tituloBreve,
                            description: cleanThinkingContent,
                            status: "completed",
                            startTime: new Date().toISOString(),
                            endTime: new Date().toISOString(),
                            duration: 3
                        },
                        {
                            id: "2",
                            type: "tool",
                            title: promptBuilder.intencion && promptBuilder.intencion.tipo === 'conversacion' ? "Procesando respuesta conversacional" : "Consultando base de datos del ERP",
                            description: promptBuilder.intencion && promptBuilder.intencion.tipo === 'conversacion' ? "Generando respuesta en lenguaje natural" : "Ejecutando consulta SQL en la base de datos",
                            status: "running",
                            startTime: new Date().toISOString(),
                            duration: 0
                        }
                    ]
                }) + '\n');
            }


            // =====================================
            // PROCESAMIENTO POST-STREAMING
            // =====================================

           console.log('üîç [STREAMING] Procesando respuesta para SQL...');
            
            // =====================================
            // PROCESAMIENTO POST-STREAMING PARA SQL
            // =====================================
            
            let finalMessage = fullResponse;
            
            // Verificar si la IA gener√≥ SQL en la respuesta
            const sql = validarRespuestaSQL(fullResponse);
            
            if (sql) {
                console.log('‚úÖ [STREAMING] SQL encontrado, ejecutando consulta(s)...');
                try {
                    // =====================================
                    // MANEJO DE M√öLTIPLES CONSULTAS SQL
                    // =====================================
                    
                    let results;
                    let allResults = [];
                    
                    // Manejar m√∫ltiples consultas SQL
                    if (Array.isArray(sql)) {
                        console.log(`üîÑ [STREAMING] Ejecutando ${sql.length} consultas SQL...`);
                        for (let i = 0; i < sql.length; i++) {
                            console.log(`üîç [STREAMING] Ejecutando consulta ${i + 1}/${sql.length}`);
                            const queryResults = await executeQuery(sql[i]);
                            allResults.push({
                                query: sql[i],
                                results: queryResults,
                                index: i + 1
                            });
                        }
                        results = allResults;
                    } else {
                        // Consulta √∫nica (compatibilidad)
                        results = await executeQuery(sql);
                    }
                    
                    if (results && (Array.isArray(results) ? results.length > 0 : results.length > 0)) {
                        // Guardar los resultados reales para contexto futuro
                        lastRealData = JSON.stringify(results);
                        
                        console.log('\n‚úÖ ==========================================');
                        console.log('‚úÖ SQL EJECUTADO EXITOSAMENTE');
                        console.log('‚úÖ ==========================================');
                        console.log(`‚úÖ Resultados obtenidos: ${Array.isArray(results) ? results.length : results.length} registros`);
                        console.log('‚úÖ Iniciando segunda llamada para formatear datos...');
                        console.log('‚úÖ ==========================================\n');
                        
                        // =====================================
                        // SEGUNDA LLAMADA PARA EXPLICACI√ìN NATURAL
                        // =====================================
                        
                        // Segunda llamada a la IA para explicar los datos reales de forma natural
                        // Segunda llamada espec√≠fica para explicar datos (SIN sqlRules)
                        console.log('\nüîÑ ==========================================');
                        console.log('üîÑ FORMATEADOR DE DATOS - LLAMADA 2');
                        console.log('üîÑ ==========================================');
                        console.log('üîÑ Construyendo segunda llamada para explicar datos...');
                        console.log('üîÑ Aplicando formato natural y an√°lisis inteligente...');
                        console.log('üîÑ ==========================================\n');
                        
                        const fechaActual = new Date().toLocaleString('es-ES', { timeZone: 'Europe/Madrid', dateStyle: 'full', timeStyle: 'short' });
                        const promptGlobalConFecha = promptGlobal.replace('{{FECHA_ACTUAL}}', fechaActual);
                        
                        // =====================================
                        // VERIFICACI√ìN ANTES DE CONCATENAR
                        // =====================================
                        console.log('\nüîç ==========================================');
                        console.log('üîç VERIFICACI√ìN ANTES DE CONCATENAR');
                        console.log('üîç ==========================================');
                        console.log(`üìÑ comportamientoGlobal type: ${typeof comportamientoGlobal}`);
                        console.log(`üìÑ comportamientoGlobal length: ${comportamientoGlobal ? comportamientoGlobal.length : 'UNDEFINED'}`);
                        console.log(`üìÑ comportamientoGlobal preview: ${comportamientoGlobal ? comportamientoGlobal.substring(0, 100) + '...' : 'UNDEFINED'}`);
                        console.log('üîç ==========================================\n');
                        
                        // =====================================
                        // CONSTRUCCI√ìN DEL PROMPT DE EXPLICACI√ìN
                        // =====================================
                        
                        // ‚ö° CONSTRUIR SEGUNDA LLAMADA SIMPLIFICADA (ANTI-ROB√ìTICA)
                        let promptExplicacion = `${promptGlobalConFecha}\n`;
                        
                        // ‚ö° SOLO LO ESENCIAL - NO SOBRECARGAR
                        promptExplicacion += `
# üé≠ VARIEDAD TOTAL: RESPONDE COMO CHATGPT

## üöÄ OBLIGATORIO: CADA RESPUESTA DEBE SER COMPLETAMENTE DIFERENTE

**‚ùå NUNCA M√ÅS USES:**
- "Para el [fecha], tenemos las siguientes..."
- "Aqu√≠ tienes..."
- "Te presento..."
- "Estas son las..."
- Cualquier patr√≥n repetitivo

**‚úÖ USA ESTOS 5 ESTILOS ALTERNATIVOS (ROTA ENTRE ELLOS):**

### üé≠ ESTILO 1: COMPA√ëERO DE TRABAJO
"üëã Oye, ya tengo lo del lunes:
La Serrana va con Coliflor Skywalker.
Costa Sim√≥n pidi√≥ Br√≥coli Burgundy.
Y ojo, Agrosana viene cargado: tiene cuatro tipos de Cebolla."

### üìä ESTILO 2: EJECUTIVO FORMAL  
"üìå Partidas programadas para el lunes:
Hortalizas La Serrana, SL ‚Üí tiene programada Coliflor Skywalker.
Costa Simon SCOOP ‚Üí solicit√≥ Br√≥coli Burgundy (BIMI).
‚úÖ En resumen: Cada cliente tiene programado un cultivo espec√≠fico."

### üå± ESTILO 3: MOTIVADOR/FAENA
"üöú ¬°As√≠ viene el lunes!
üå± Coliflor Skywalker ‚Üí Hortalizas La Serrana
ü•¶ Br√≥coli Burgundy ‚Üí Costa Sim√≥n
üßÖ Y las cebollas a full con Agrosana: 4 variedades.
Se viene un d√≠a intenso! üí™"

### üìñ ESTILO 4: NARRATIVO
"El lunes se presenta con varias partidas interesantes:
La Serrana sembrar√° Coliflor Skywalker.
Costa Sim√≥n apostar√° por el Br√≥coli Burgundy.
Pero quien realmente destaca es Agrosana, con cuatro variedades de cebolla."

### ‚úÖ ESTILO 5: PR√ÅCTICO/LISTA
"‚úÖ Lunes ‚Äì Siembras programadas:
Coliflor Skywalker ‚Üí Hortalizas La Serrana, SL  
Br√≥coli Burgundy ‚Üí Costa Simon SCOOP
Cebolla (4 variedades) ‚Üí Agrosana
üëâ Principal carga: cebolla de Agrosana."

**üéØ REGLA DE ORO:**
Elige un estilo DIFERENTE cada vez. NUNCA repitas el mismo patr√≥n dos veces seguidas.

`;
                        console.log('‚úÖ [SEGUNDA-LLAMADA] Prompt anti-rob√≥tico construido exitosamente');
                        
                        // =====================================
                        // DIAGN√ìSTICO Y LOGS DETALLADOS DE PROMPTS
                        // =====================================
                        console.log('\nüîç ==========================================');
                        console.log('üîç DIAGN√ìSTICO DE PROMPTS - SEGUNDA LLAMADA');
                        console.log('üîç ==========================================');
                        console.log(`üìÑ promptGlobal: ${promptGlobalConFecha.length} caracteres`);
                        console.log(`üìÑ comportamientoGlobal: ${comportamientoGlobal ? comportamientoGlobal.length : 'UNDEFINED'} caracteres`);
                        console.log(`üìÑ formatoRespuesta: ${formatoRespuesta ? formatoRespuesta.length : 'UNDEFINED'} caracteres`);
                        console.log(`üìÑ guiaMarkdownCompleta: ${guiaMarkdownCompleta ? guiaMarkdownCompleta.length : 'UNDEFINED'} caracteres`);
                        console.log(`üìÑ identidadEmpresa: ${identidadEmpresa ? identidadEmpresa.length : 'UNDEFINED'} caracteres`);
                        console.log(`üìÑ terminologia: ${terminologia ? terminologia.length : 'UNDEFINED'} caracteres`);
                        console.log(`üìÑ PROMPT TOTAL: ${promptExplicacion.length} caracteres`);
                        console.log('üîç ==========================================\n');
                        
                        // Los prompts organizados ya contienen toda la l√≥gica de formato
                        
                        // DEBUG: Mostrar el prompt completo que se est√° construyendo
                        console.log('üîç [DEBUG-PROMPT] Prompt unificado construido:');
                        console.log('üìÑ [DEBUG-PROMPT] Longitud total:', promptExplicacion.length, 'caracteres');
                        console.log('üìÑ [DEBUG-PROMPT] Contenido formatoRespuesta incluido:', formatoRespuesta ? 'S√ç' : 'NO');
                        
                        // =====================================
                        // üö´ RAG TEMPORALMENTE DESHABILITADO PARA SEGUNDA LLAMADA
                        // =====================================
                        console.log('üö´ [RAG] RAG DESHABILITADO temporalmente en segunda llamada para testing');
                        
                        // // A√±adir contexto RAG si existe (CR√çTICO para evitar alucinaciones)
                        // try {
                        //     const contextoRAGSegunda = await ragInteligente.recuperarConocimientoRelevante(message, 'sistema');
                        //     if (contextoRAGSegunda) {
                        //         console.log('üéØ [RAG] Incluyendo contexto empresarial en segunda llamada');
                        //         promptExplicacion += `\n${contextoRAGSegunda}\n\n`;
                        //     }
                        // } catch (error) {
                        //     console.log('‚ö†Ô∏è [RAG] No se pudo obtener contexto RAG para segunda llamada:', error.message);
                        // }
                        
                        // =====================================
                        // AGREGAR CONTEXTO ADICIONAL AL PROMPT
                        // =====================================
                        
                        // A√±adir contexto de datos previos
                        promptExplicacion += `DATOS DE CONTEXTO PREVIO:\n${JSON.stringify(results)}\n\n`;
                        
                        // A√±adir contexto conversacional
                        if (historialConversacion && historialConversacion.length > 0) {
                            const ultimosMensajes = historialConversacion.slice(-4);
                            const contextoConversacional = ultimosMensajes.map(msg => 
                                `${msg.role === 'user' ? 'Usuario' : 'Asistente'}: ${msg.content}`
                            ).join('\n');
                            
                            // Agregar contexto conversacional (SIN duplicar formatoRespuesta que ya est√° incluido)
                            console.log('üîç [DEBUG] formatoRespuesta ya incluido en l√≠nea 1042:', formatoRespuesta ? 'S√ç' : 'NO');
                            promptExplicacion += `CONTEXTO CONVERSACIONAL RECIENTE:\n\n${contextoConversacional}\n\n`;
                        }
                        
                        // =====================================
                        // AGREGAR DATOS PARA FORMATEAR
                        // =====================================
                        
                        // SOLO DATOS - Los prompts organizados ya tienen todas las instrucciones
                        promptExplicacion += `## üìä DATOS PARA FORMATEAR:

CONSULTA ORIGINAL: "${message}"  
${Array.isArray(sql) ? 
    `SQL EJECUTADO: ${sql.length} consultas\n${sql.map((q, i) => `${i + 1}. ${q}`).join('\n')}` : 
    `SQL EJECUTADO: ${sql}`}  
RESULTADOS OBTENIDOS: ${JSON.stringify(results, null, 2)}

${Array.isArray(results) ? 
    `‚ö†Ô∏è M√öLTIPLES CONJUNTOS DE DATOS - formatea cada uno por separado` : 
    ''}

`;

                        // =====================================
                        // LOG ROBUSTO DEL PROMPT FINAL
                        // =====================================
                        console.log('\nüîç ==========================================');
                        console.log('üîç AN√ÅLISIS DEL PROMPT FINAL');
                        console.log('üîç ==========================================');
                        console.log(`üìÑ Longitud total del prompt: ${promptExplicacion.length} caracteres`);
                        console.log(`üìÑ Contiene "formatoRespuesta": ${promptExplicacion.includes('formatoRespuesta') ? 'S√ç' : 'NO'}`);
                        console.log(`üìÑ Contiene "PROHIBIDO ABSOLUTAMENTE": ${promptExplicacion.includes('PROHIBIDO ABSOLUTAMENTE') ? 'S√ç' : 'NO'}`);
                        console.log(`üìÑ Contiene "Aqu√≠ tienes": ${promptExplicacion.includes('Aqu√≠ tienes') ? 'S√ç' : 'NO'}`);
                        console.log(`üìÑ Contiene "comportamientoGlobal": ${promptExplicacion.includes('COMPORTAMIENTO Y ESTILO') ? 'S√ç' : 'NO'}`);
                        console.log(`üìÑ Contiene "COMPORTAMIENTO Y ESTILO": ${promptExplicacion.includes('COMPORTAMIENTO Y ESTILO') ? 'S√ç' : 'NO'}`);
                        console.log(`üìÑ Contiene "PRINCIPIO FUNDAMENTAL": ${promptExplicacion.includes('PRINCIPIO FUNDAMENTAL') ? 'S√ç' : 'NO'}`);
                        console.log(`üìÑ Contiene "PRIORIDAD M√ÅXIMA": ${promptExplicacion.includes('PRIORIDAD M√ÅXIMA') ? 'S√ç' : 'NO'}`);
                        console.log(`üìÑ Contiene "PROHIBIDO ABSOLUTAMENTE": ${promptExplicacion.includes('PROHIBIDO ABSOLUTAMENTE') ? 'S√ç' : 'NO'}`);
                        console.log(`üìÑ Contiene "AN√ÅLISIS INTELIGENTE": ${promptExplicacion.includes('AN√ÅLISIS INTELIGENTE') ? 'S√ç' : 'NO'}`);
                        console.log(`üìÑ Contiene "COMPORTAMIENTO CONVERSACIONAL": ${promptExplicacion.includes('COMPORTAMIENTO CONVERSACIONAL') ? 'S√ç' : 'NO'}`);
                        console.log(`üìÑ Contiene "ANTI-ROBOT": ${promptExplicacion.includes('ANTI-ROBOT') ? 'S√ç' : 'NO'}`);
                        console.log(`üìÑ Contiene "FORMATO OBLIGATORIO": ${promptExplicacion.includes('FORMATO OBLIGATORIO') ? 'S√ç' : 'NO'}`);
                        
                        // Mostrar una muestra del prompt final
                        const muestraPrompt = promptExplicacion.substring(0, 2000);
                        console.log('\nüìÑ MUESTRA DEL PROMPT FINAL (primeros 2000 caracteres):');
                        console.log('‚îÄ'.repeat(50));
                        console.log(muestraPrompt);
                        console.log('‚îÄ'.repeat(50));
                        
                        // Buscar espec√≠ficamente comportamientoGlobal en el prompt
                        const indiceComportamiento = promptExplicacion.indexOf('COMPORTAMIENTO Y ESTILO');
                        console.log(`\nüìÑ √çndice de "COMPORTAMIENTO Y ESTILO": ${indiceComportamiento}`);
                        if (indiceComportamiento > -1) {
                            const muestraComportamiento = promptExplicacion.substring(indiceComportamiento, indiceComportamiento + 500);
                            console.log('üìÑ MUESTRA DE COMPORTAMIENTO GLOBAL:');
                            console.log('‚îÄ'.repeat(30));
                            console.log(muestraComportamiento);
                            console.log('‚îÄ'.repeat(30));
                        }
                        console.log('üîç ==========================================\n');

                        // =====================================
                        // CONFIGURAR SEGUNDA LLAMADA CON HISTORIAL
                        // =====================================
                        
                        // Segunda llamada con historial para mantener contexto
                        const mensajesSegundaLlamada = [
                            {
                                role: 'system',
                                content: promptExplicacion
                            }
                        ];

                        // Agregar historial conversacional a la segunda llamada tambi√©n
                        if (historialConversacion && historialConversacion.length > 0) {
                            historialConversacion.forEach((msg) => {
                                mensajesSegundaLlamada.push({
                                    role: msg.role,
                                    content: msg.content
                                });
                            });
                        }

                        console.log('üîÑ [SEGUNDA-LLAMADA] Iniciando segunda llamada...');
                        console.log('üìÑ [SEGUNDA-LLAMADA] N√∫mero de mensajes:', mensajesSegundaLlamada.length);
                        console.log('üìÑ [SEGUNDA-LLAMADA] Longitud del prompt:', mensajesSegundaLlamada[0].content.length);
                        
                        const segundaLlamada = await openai.chat.completions.create({
                            model: 'gpt-4o',  // ‚ö° CAMBIO A GPT-4O PARA MAYOR CREATIVIDAD
                            messages: mensajesSegundaLlamada,
                            max_tokens: 2500,  // ‚ö° M√ÅS TOKENS PARA RESPUESTAS M√ÅS ELABORADAS
                            temperature: 1.0,  // ‚ö° TEMPERATURA M√ÅXIMA PARA CREATIVIDAD TOTAL
                            top_p: 0.9,       // ‚ö° SAMPLING M√ÅS DIVERSO
                            frequency_penalty: 0.8,  // ‚ö° PENALIZA FRASES REPETITIVAS
                            presence_penalty: 0.6    // ‚ö° FOMENTA NUEVOS TEMAS Y VARIEDAD
                        });

                        console.log('‚úÖ [SEGUNDA-LLAMADA] Respuesta recibida:');
                        console.log('üìÑ [SEGUNDA-LLAMADA] Respuesta completa:', JSON.stringify(segundaLlamada, null, 2));
                        console.log('üìÑ [SEGUNDA-LLAMADA] Content type:', typeof segundaLlamada.choices[0].message.content);
                        console.log('üìÑ [SEGUNDA-LLAMADA] Content length:', segundaLlamada.choices[0].message.content ? segundaLlamada.choices[0].message.content.length : 'UNDEFINED');
                        console.log('üìÑ [SEGUNDA-LLAMADA] Content value:', segundaLlamada.choices[0].message.content);

                        const explicacionNatural = segundaLlamada.choices[0].message.content;
                        
                        // =====================================
                        // üîç LOG ESPEC√çFICO: RESPUESTA DE SEGUNDA LLAMADA
                        // =====================================
                        console.log('\nüîç ==========================================');
                        console.log('üîç RESPUESTA EXACTA DE LA SEGUNDA LLAMADA');
                        console.log('üîç ==========================================');
                        console.log('üìÑ CONTENIDO COMPLETO:');
                        console.log('‚îÄ'.repeat(50));
                        console.log(explicacionNatural);
                        console.log('‚îÄ'.repeat(50));
                        console.log(`üìè Longitud: ${explicacionNatural.length} caracteres`);
                        console.log(`üìù Primeras 100 chars: "${explicacionNatural.substring(0, 100)}"`);
                        console.log(`üìù Empieza con "Vamos": ${explicacionNatural.startsWith('Vamos') ? 'S√ç' : 'NO'}`);
                        console.log(`üìù Empieza con "Aqu√≠": ${explicacionNatural.startsWith('Aqu√≠') ? 'S√ç' : 'NO'}`);
                        console.log(`üìù Empieza con "Claro": ${explicacionNatural.startsWith('Claro') ? 'S√ç' : 'NO'}`);
                        console.log('üîç ==========================================\n');
                        
                        // =====================================
                        // TEST SISTEM√ÅTICO: RASTREAR TEXTO ROB√ìTICO
                        // =====================================
                        
                        // üîç TEST SISTEM√ÅTICO: RASTREAR TEXTO ROB√ìTICO
                        console.log('\nüîç ==========================================');
                        console.log('üîç TEST SISTEM√ÅTICO - RASTREO DE TEXTO ROB√ìTICO');
                        console.log('üîç ==========================================');
                        
                        // Detectar patrones rob√≥ticos espec√≠ficos
                        const patronesRoboticos = [
                            'Estas son las',
                            'Aqu√≠ tienes',
                            'Aqu√≠ te presento',
                            'Te presento',
                            'Seg√∫n nuestros registros',
                            'Claro, aqu√≠ tienes'
                        ];
                        
                        let patronDetectado = null;
                        for (const patron of patronesRoboticos) {
                            if (explicacionNatural.includes(patron)) {
                                patronDetectado = patron;
                                break;
                            }
                        }
                        
                        console.log('ü§ñ PATR√ìN ROB√ìTICO DETECTADO:', patronDetectado || 'NINGUNO');
                        console.log('üìÑ Longitud:', explicacionNatural.length, 'caracteres');
                        console.log('üìÑ Primeros 100 caracteres:', explicacionNatural.substring(0, 100));
                        console.log('üìÑ Contiene saltos de l√≠nea dobles:', (explicacionNatural.match(/\n\n/g) || []).length);
                        console.log('üìÑ Contiene tablas markdown:', explicacionNatural.includes('|') ? 'S√ç' : 'NO');
                        
                        // An√°lisis de estructura
                        const lineas = explicacionNatural.split('\n');
                        console.log('üìÑ N√∫mero de l√≠neas:', lineas.length);
                        console.log('üìÑ Primera l√≠nea:', lineas[0]);
                        console.log('üìÑ Segunda l√≠nea:', lineas[1] || 'N/A');
                        console.log('üìÑ Tercera l√≠nea:', lineas[2] || 'N/A');
                        
                        console.log('üìÑ CONTENIDO COMPLETO:');
                        console.log('‚îÄ'.repeat(50));
                        console.log(explicacionNatural);
                        console.log('‚îÄ'.repeat(50));
                        console.log('üîç ==========================================\n');
                        
                        // Reemplazar la respuesta t√©cnica con la explicaci√≥n natural
                        finalMessage = explicacionNatural;
                        
                        console.log('\n‚úÖ ==========================================');
                        console.log('‚úÖ FORMATEADOR COMPLETADO - LLAMADA 2 FINALIZADA');
                        console.log('‚úÖ ==========================================');
                        console.log('‚úÖ Respuesta natural generada exitosamente');
                        console.log('‚úÖ Datos formateados con an√°lisis inteligente');
                        console.log('‚úÖ ==========================================\n');
                    } else {
                        // Si no hay resultados, mantener la respuesta original del modelo
                        console.log('üìö [STREAMING] Sin resultados SQL - usar respuesta del modelo');
                    }
                } catch (error) {
                    console.error('‚ùå [STREAMING-SQL] Error ejecutando consulta:', error.message);
                    
                    // =====================================
                    // SISTEMA INTELIGENTE DE RECUPERACI√ìN DE ERRORES
                    // =====================================
                    
                    if (error) {
                        console.log('üß† [INTELLIGENT-RECOVERY] Iniciando recuperaci√≥n inteligente...');
                        
                        try {
                            // Usar RAG para buscar informaci√≥n relacionada con la consulta fallida
                            const ragResponse = await ragInteligente.recuperarConocimientoRelevante(
                                `${originalQuery} error SQL tabla columna estructura base datos`, 
                                'sistema'
                            );
                            
                            if (ragResponse && ragResponse.length > 100) {
                                console.log('üéØ [RAG-RECOVERY] Informaci√≥n relevante encontrada en RAG');
                                
                                // Usar informaci√≥n de RAG como respuesta alternativa
                                if (ragResponse && ragResponse.length > 100) {
                                    finalMessage = ragResponse;
                                    console.log('‚úÖ [RAG-RECOVERY] Usando informaci√≥n de RAG como respuesta');
                                } else {
                                    finalMessage = 'Lo siento, no pude procesar tu consulta. Por favor, intenta reformular tu pregunta.';
                                }
                            } else {
                                console.log('‚ö†Ô∏è [RAG-RECOVERY] No se encontr√≥ informaci√≥n relevante en RAG');
                                finalMessage = 'Lo siento, no pude procesar tu consulta. Por favor, intenta reformular tu pregunta.';
                            }
                            
                        } catch (ragError) {
                            console.error('‚ùå [RAG-RECOVERY] Error en recuperaci√≥n RAG:', ragError.message);
                            finalMessage = 'Lo siento, no pude procesar tu consulta. Por favor, intenta reformular tu pregunta.';
                        }
                    } else {
                        // Error gen√©rico - mantener respuesta original
                        console.log('üìö [STREAMING] Error gen√©rico - usar respuesta del modelo');
                    }
                }
            } else {
                console.log('üìö [STREAMING] Sin SQL - usar respuesta del modelo tal como est√°');
            }

            // Limpiar el thinking de la respuesta final si est√° presente
            let respuestaLimpia = finalMessage;
            if (respuestaLimpia.includes('<thinking>') && respuestaLimpia.includes('</thinking>')) {
                // Extraer solo la parte despu√©s del thinking
                const thinkingEnd = respuestaLimpia.indexOf('</thinking>');
                if (thinkingEnd !== -1) {
                    respuestaLimpia = respuestaLimpia.substring(thinkingEnd + 11).trim();
                }
            }
            
            // Personalizar respuesta con nombre del usuario
            const respuestaPersonalizada = personalizarRespuesta(respuestaLimpia, infoUsuario.nombre);
            
            // =====================================
            // üîç LOG COMPARATIVO: ANTES Y DESPU√âS DE PERSONALIZACI√ìN
            // =====================================
            console.log('\nüîç ==========================================');
            console.log('üîç COMPARATIVO: ANTES Y DESPU√âS DE PERSONALIZACI√ìN');
            console.log('üîç ==========================================');
            console.log('üìÑ ANTES (respuestaLimpia):');
            console.log('‚îÄ'.repeat(30));
            console.log(respuestaLimpia.substring(0, 200) + '...');
            console.log('‚îÄ'.repeat(30));
            console.log('üìÑ DESPU√âS (respuestaPersonalizada):');
            console.log('‚îÄ'.repeat(30));
            console.log(respuestaPersonalizada.substring(0, 200) + '...');
            console.log('‚îÄ'.repeat(30));
            console.log(`üìä ¬øCambi√≥ algo?: ${respuestaLimpia === respuestaPersonalizada ? 'NO' : 'S√ç'}`);
            console.log('üîç ==========================================\n');
            
            // Si tenemos thinking capturado pero no se envi√≥ como thinking_complete, enviarlo ahora
            if (thinkingContent && thinkingContent.includes('</thinking>') && !thinkingHeaderSent) {
                const cleanThinkingContent = thinkingContent.replace(/<\/?thinking[^>]*>/g, '').trim();
                console.log('üß† [THINKING] Enviando thinking_complete tard√≠o:', cleanThinkingContent.substring(0, 100) + '...');
                
                response.write(JSON.stringify({
                    type: 'thinking_complete',
                    message: 'Thinking completado',
                    timestamp: Date.now(),
                    trace: [
                        {
                            id: "1",
                            type: "thought",
                            title: tituloBreve,
                            description: cleanThinkingContent,
                            status: "completed",
                            startTime: new Date().toISOString(),
                            endTime: new Date().toISOString(),
                            duration: 3
                        },
                        {
                            id: "2",
                            type: "tool",
                            title: promptBuilder.intencion && promptBuilder.intencion.tipo === 'conversacion' ? "Procesando respuesta conversacional" : "Consultando base de datos del ERP",
                            description: promptBuilder.intencion && promptBuilder.intencion.tipo === 'conversacion' ? "Generando respuesta en lenguaje natural" : "Ejecutando consulta SQL en la base de datos",
                            status: "completed",
                            startTime: new Date().toISOString(),
                            endTime: new Date().toISOString(),
                            duration: 2
                        }
                    ]
                }) + '\n');
            }

            // üîç LOG CR√çTICO: Verificar qu√© se env√≠a al frontend
            console.log('\nüîç ==========================================');
            console.log('üîç RESPUESTA FINAL ENVIADA AL FRONTEND');
            console.log('üîç ==========================================');
            console.log('üìÑ Longitud final:', respuestaPersonalizada.length, 'caracteres');
            console.log('üìÑ Contiene <p>:', respuestaPersonalizada.includes('<p>') ? 'S√ç' : 'NO');
            console.log('üìÑ Contiene <div>:', respuestaPersonalizada.includes('<div>') ? 'S√ç' : 'NO');
            console.log('üìÑ Contiene <table>:', respuestaPersonalizada.includes('<table>') ? 'S√ç' : 'NO');
            console.log('üìÑ Contiene "Aqu√≠ te presento":', respuestaPersonalizada.includes('Aqu√≠ te presento') ? 'S√ç' : 'NO');
            console.log('üìÑ Contiene "Aqu√≠ tienes":', respuestaPersonalizada.includes('Aqu√≠ tienes') ? 'S√ç' : 'NO');
            console.log('üìÑ MUESTRA COMPLETA:');
            console.log('‚îÄ'.repeat(50));
            console.log(respuestaPersonalizada);
            console.log('‚îÄ'.repeat(50));
            console.log('üîç ==========================================\n');

            // Enviar se√±al de finalizaci√≥n con conversationId
            response.write(JSON.stringify({
                type: 'end',
                fullResponse: respuestaPersonalizada,
                conversationId: conversationId,
                tokenCount: tokenCount,
                timestamp: Date.now()
            }) + '\n');

            response.end();
            
            // =====================================
            // LOG FINAL DEL PROCESO
            // =====================================
            console.log('\nüèÅ ==========================================');
            console.log('üèÅ PROCESO COMPLETADO');
            console.log('üèÅ ==========================================');
            console.log('üèÅ Respuesta final enviada al usuario');
            console.log(`üèÅ Longitud de respuesta: ${respuestaPersonalizada.length} caracteres`);
            console.log(`üèÅ Tokens procesados: ${tokenCount}`);
            console.log('üèÅ ==========================================\n');

            // =====================================
            // POST-PROCESAMIENTO (ASYNC)
            // =====================================

            // Guardar respuesta completa en el historial de chat
            if (conversationId) {
                chatManager.addMessageToConversation(userId, conversationId, {
                    role: 'assistant',
                    content: respuestaPersonalizada
                }).catch(err =>
                    console.error('‚ùå [CHAT-HISTORY] Error guardando respuesta:', err.message)
                );
            }

            // Guardar respuesta completa en Firestore (async)
            saveAssistantMessageToFirestore(userId, respuestaPersonalizada).catch(err =>
                console.error('‚ùå [FIRESTORE] Error guardando respuesta:', err.message)
            );

            // Guardar en memoria solo si es importante (async)
            if (respuestaPersonalizada.length > 400 || message.includes('importante') || message.includes('recuerda')) {
                try {
                    pineconeMemoria.guardarAutomatico(userId, message, respuestaPersonalizada).catch(err =>
                        console.error('‚ùå [PINECONE] Error guardando en memoria:', err.message)
                    );
                } catch (error) {
                    console.error('‚ùå [PINECONE] Error guardando en memoria:', error.message);
                }
            }

            const tiempoTotal = Date.now() - tiempoInicio;
            console.log('üìä [STREAMING] Tiempo total:', tiempoTotal, 'ms');
            console.log('üìä [STREAMING] Tokens generados:', tokenCount);
            console.log('üìä [STREAMING] Respuesta completa enviada exitosamente');
            console.log('üîÑ [STREAMING] Conversaci√≥n guardada en historial:', conversationId);

            return { success: true, streamed: true, conversationId };

        } catch (streamError) {
            console.error('‚ùå [STREAMING] Error en stream:', streamError);
            
            // Enviar error al frontend
            response.write(JSON.stringify({
                type: 'error',
                message: 'Error en el streaming',
                timestamp: Date.now()
            }) + '\n');
            
            response.end();
            return { success: false, error: streamError.message };
        }

    } catch (error) {
        console.error('‚ùå [STREAMING] Error cr√≠tico:', error);
        
        if (!response.headersSent) {
            response.writeHead(500, { 'Content-Type': 'application/json' });
            response.end(JSON.stringify({ 
                success: false, 
                error: 'Error interno del servidor' 
            }));
        }
        
        return { success: false, error: error.message };
    }
}

// =====================================
// M√ìDULO DE EXPORTACI√ìN
// =====================================
// 
// Este m√≥dulo exporta la funci√≥n principal:
// - processQueryStream: Procesamiento con streaming en tiempo real
// 
// USO EN OTROS ARCHIVOS:
// const { processQueryStream } = require('./admin/core/openAI');
// =====================================

/**
 * Exportar la funci√≥n principal para su uso en otros archivos
 */
module.exports = {
    processQueryStream
};

/**
 * Construye el contexto del mapa ERP COMPLETO para que la IA analice
 */
function construirContextoMapaERPCompleto(mapaERP) {
    if (!mapaERP) {
        console.log('‚ö†Ô∏è [MAPA-ERP] No hay mapaERP disponible');
        return '';
    }
    

    
    let contexto = '\n=== ESTRUCTURA COMPLETA DE LA BASE DE DATOS ===\n';
    contexto += `\nTOTAL DE TABLAS DISPONIBLES: ${Object.keys(mapaERP).length}\n\n`;
    
    // Incluir TODAS las tablas del mapaERP para que la IA las analice
    Object.entries(mapaERP).forEach(([nombreTabla, infoTabla]) => {
        contexto += `\n## üìä TABLA: ${nombreTabla}\n`;
        contexto += `Descripci√≥n: ${infoTabla.descripcion || 'Sin descripci√≥n'}\n`;
        
        // Columnas disponibles
        if (infoTabla.columnas) {
            contexto += `\n### üìã COLUMNAS:\n`;
            Object.entries(infoTabla.columnas).forEach(([columna, descripcion]) => {
                contexto += `- ${columna}: ${descripcion}\n`;
            });
        }
        
        // Relaciones con otras tablas
        if (infoTabla.tablas_relacionadas) {
            contexto += `\n### üîó RELACIONES:\n`;
            Object.entries(infoTabla.tablas_relacionadas).forEach(([tablaRelacionada, infoRelacion]) => {
                contexto += `- ${tablaRelacionada}: ${infoRelacion.descripcion || 'Relaci√≥n directa'}\n`;
                if (infoRelacion.tipo) {
                    contexto += `  Tipo: ${infoRelacion.tipo}\n`;
                }
                if (infoRelacion.campo_enlace_local && infoRelacion.campo_enlace_externo) {
                    contexto += `  JOIN: ${nombreTabla}.${infoRelacion.campo_enlace_local} = ${tablaRelacionada}.${infoRelacion.campo_enlace_externo}\n`;
                }
            });
        }
        
        contexto += '\n';
    });
    
    // Instrucciones para la IA
    contexto += `\n### üéØ INSTRUCCIONES PARA LA IA:\n`;
    contexto += `- Analiza la consulta del usuario\n`;
    contexto += `- Identifica qu√© tablas del mapaERP son relevantes\n`;
    contexto += `- Usa las relaciones definidas para hacer JOINs correctos\n`;
    contexto += `- NO inventes tablas que no est√©n en esta lista\n`;
    contexto += `- Genera SQL usando EXACTAMENTE las columnas mostradas\n`;
    contexto += `- Formato: <sql>SELECT columnas FROM tabla [JOIN otras_tablas] WHERE condiciones</sql>\n\n`;
    

    return contexto;
}

/**
 * Genera embeddings para an√°lisis sem√°ntico
 */
async function generarEmbedding(texto) {
    try {
        const response = await openai.embeddings.create({
            model: 'text-embedding-3-small',
            input: texto
        });
        return response.data[0].embedding;
    } catch (error) {
        console.error('‚ùå [EMBEDDING] Error generando embedding:', error.message);
        return null;
    }
}

/**
 * Construye las instrucciones naturales para el prompt
 */
function construirInstruccionesNaturales(intencion, tablasRelevantes, contextoPinecone) {
    // ‚ö° PRIORIDAD M√ÅXIMA AL INICIO - ESTILO CHATGPT
    let instrucciones = '';
    instrucciones += comportamientoGlobal + '\n\n';
    instrucciones += formatoRespuesta + '\n\n';         // ‚ö° FORMATO DE RESPUESTA
    instrucciones += guiaMarkdownCompleta + '\n\n';     // ‚ö° GU√çA COMPLETA DE MARKDOWN
    instrucciones += identidadEmpresa + '\n\n';
    instrucciones += terminologia + '\n\n';
    
    // ‚ö° USAR CONTEXTO PINECONE SI EXISTE
    if (contextoPinecone && contextoPinecone.trim()) {
        instrucciones += `## üß† CONTEXTO DE MEMORIA:\n${contextoPinecone}\n\n`;
    }
    
    // ‚ö° REFUERZO CR√çTICO PARA CONSULTAS SQL Y CONVERSACIONALES CON THINKING
    if (intencion && (intencion.tipo === 'sql' || intencion.tipo === 'conversacion')) {
        if (intencion.tipo === 'sql') {
            instrucciones += `
üö®üö®üö® CONSULTA SQL DETECTADA - MODO THINKING ACTIVADO üö®üö®üö®

**PROCESO OBLIGATORIO:**

üö® **CR√çTICO: NO escribas NADA antes de <thinking>. Empieza DIRECTAMENTE con <thinking>** üö®

1. **PRIMERO - THINKING (Razonamiento en voz alta):**
   - ‚ö° EMPIEZA INMEDIATAMENTE con: <thinking>
   - ‚ö° NO escribas texto introductorio antes del <thinking>
   - ‚ö° NO digas "mirando los datos", "interesante", "puedo ayudarte" ANTES del <thinking>
   - ‚ö° LA PRIMERA PALABRA de tu respuesta debe ser: <thinking>
   - **ANALIZA el mapaERP disponible** para entender la estructura de datos
   - **USA las descripciones** de las columnas del mapaERP para explicar qu√© vas a buscar
   - **CONECTA** tu razonamiento con la consulta SQL que vas a ejecutar
   - **EXPLICA** en lenguaje natural qu√© informaci√≥n espec√≠fica necesita el usuario
   - **MENCI√ìN** exactamente qu√© datos vas a consultar usando el lenguaje del mapaERP
   - **USA** las descripciones naturales de las columnas (ej: "denominaciones", "registro de clientes", "informaci√≥n de fincas")
   - **NO menciones** nombres t√©cnicos de tablas o columnas
   - **USA** t√©rminos empresariales naturales y espec√≠ficos del mapaERP
   - **SEA HONESTO** sobre lo que realmente vas a consultar
   - Cierra con: </thinking>

2. **SEGUNDO - SQL REAL:**
   - Formato: <sql>SELECT columnas FROM tabla WHERE condiciones LIMIT X</sql>
   - USA la base de datos real del mapaERP
   - JAM√ÅS inventes datos falsos

**IMPORTANTE - USO DEL MAPAERP:**
- El mapaERP contiene 800+ tablas con descripciones de columnas
- USA las descripciones de las columnas para explicar qu√© vas a buscar
- CONECTA el thinking con el SQL real que vas a ejecutar
- NO uses ejemplos gen√©ricos, usa la informaci√≥n real del mapaERP
- El thinking debe reflejar EXACTAMENTE lo que hace el SQL

**EJEMPLO DIN√ÅMICO:**

Usuario: "dime cuantas acciones comerciales hizo el cliente hernaez"

<thinking>
El usuario quiere saber cu√°ntas gestiones comerciales ha realizado un cliente espec√≠fico llamado Hernaez. Necesito consultar nuestro registro de acciones comerciales para contar todas las actividades que hemos registrado con este cliente, como visitas, llamadas, reuniones o cualquier gesti√≥n comercial, para proporcionarle el n√∫mero total de interacciones.
</thinking>

<sql>SELECT COUNT(*) as total_acciones FROM acciones_com ac JOIN clientes c ON ac.ACCO_CDCL = c.id WHERE c.CL_DENO LIKE '%hernaez%'</sql>

**NOTA:** El thinking debe usar las descripciones del mapaERP y conectar con el SQL real que vas a ejecutar.

‚ö° OBLIGATORIO: El thinking debe ser espec√≠fico y mostrar tu razonamiento real ‚ö°
‚ö° RECUERDA: Empezar DIRECTAMENTE con <thinking> sin texto previo ‚ö°
‚ö° CONECTA: El thinking debe reflejar exactamente lo que vas a consultar en el SQL ‚ö°
`;
        } else if (intencion.tipo === 'conversacion') {
            instrucciones += `
üö®üö®üö® CONSULTA CONVERSACIONAL DETECTADA - MODO THINKING ACTIVADO üö®üö®üö®

**PROCESO OBLIGATORIO:**

üö® **CR√çTICO: NO escribas NADA antes de <thinking>. Empieza DIRECTAMENTE con <thinking>** üö®

1. **PRIMERO - THINKING (Razonamiento en voz alta):**
   - ‚ö° EMPIEZA INMEDIATAMENTE con: <thinking>
   - ‚ö° NO escribas texto introductorio antes del <thinking>
   - ‚ö° NO digas "mirando los datos", "interesante", "puedo ayudarte" ANTES del <thinking>
   - ‚ö° LA PRIMERA PALABRA de tu respuesta debe ser: <thinking>
   - **ANALIZA** qu√© tipo de consulta es (saludo, pregunta general, agradecimiento, etc.)
   - **EXPLICA** c√≥mo entiendes la intenci√≥n del usuario
   - **DECIDE** qu√© tipo de respuesta es m√°s apropiada
   - **PLANIFICA** c√≥mo estructurar tu respuesta para que sea √∫til y emp√°tica
   - **USA** el contexto empresarial disponible si es relevante
   - **SEA HONESTO** sobre tu proceso de razonamiento
   - Cierra con: </thinking>

2. **SEGUNDO - RESPUESTA CONVERSACIONAL:**
   - Responde de forma natural y conversacional
   - Usa el contexto empresarial si es relevante
   - S√© emp√°tico y √∫til
   - Mant√©n un tono amigable

**EJEMPLO DIN√ÅMICO:**

Usuario: "¬øQu√© d√≠a estamos?"

<thinking>
El usuario est√° preguntando por la fecha actual. Esta es una consulta conversacional simple que no requiere informaci√≥n de la base de datos. Necesito proporcionar la fecha actual de forma amigable y ofrecer ayuda adicional si es apropiado. Es una pregunta directa que requiere una respuesta clara y √∫til.
</thinking>

Hoy es martes, 23 de septiembre de 2025. ¬øHay algo m√°s en lo que pueda ayudarte? üòä

**NOTA:** El thinking debe explicar tu proceso de razonamiento para dar la respuesta m√°s √∫til.

‚ö° OBLIGATORIO: El thinking debe ser espec√≠fico y mostrar tu razonamiento real ‚ö°
‚ö° RECUERDA: Empezar DIRECTAMENTE con <thinking> sin texto previo ‚ö°
‚ö° CONECTA: El thinking debe reflejar exactamente c√≥mo vas a responder ‚ö°
`;
        }
    }
    
    // ‚ö° REFUERZO ESPEC√çFICO PARA CONSULTAS DE CONOCIMIENTO (RAG_SQL)
    if (intencion && intencion.tipo === 'rag_sql') {
        instrucciones += `
üö®üö®üö® CONSULTA DE CONOCIMIENTO DETECTADA - MODO RAG ACTIVADO üö®üö®üö®

**PROCESO OBLIGATORIO:**

1. **USAR INFORMACI√ìN DEL CONTEXTO EMPRESARIAL:**
   - ‚ö° SIEMPRE prioriza la informaci√≥n del contexto empresarial proporcionado
   - ‚ö° NO des respuestas gen√©ricas cuando tengas informaci√≥n espec√≠fica
   - ‚ö° Cita y usa la informaci√≥n oficial de Semilleros Deitana

2. **FORMATO DE RESPUESTA ESTRUCTURADO:**
   - ‚ö° Usa t√≠tulos con ## para organizar la informaci√≥n
   - ‚ö° Usa listas con - para puntos importantes
   - ‚ö° Usa **texto en negrita** para destacar informaci√≥n clave
   - ‚ö° S√© conversacional y emp√°tico

3. **EJEMPLO DE FORMATO CORRECTO:**

## üìã T√≠tulo de la Secci√≥n

**Informaci√≥n clave:** Descripci√≥n importante aqu√≠

- Punto importante 1
- Punto importante 2
- Punto importante 3

### üîç Detalles Adicionales

Informaci√≥n complementaria con explicaci√≥n natural y conversacional.

¬øTe gustar√≠a que profundice en alg√∫n aspecto espec√≠fico o tienes alguna pregunta adicional?

‚ö° OBLIGATORIO: Usar formato estructurado y ser conversacional ‚ö°
‚ö° CR√çTICO: Priorizar informaci√≥n empresarial espec√≠fica sobre respuestas gen√©ricas ‚ö°
`;
    }
    
    
    // ‚ö° USAR TABLAS RELEVANTES SI EXISTEN
    if (tablasRelevantes && tablasRelevantes.length > 0) {
        instrucciones += `## üìä TABLAS RELEVANTES:\n${tablasRelevantes.join(', ')}\n\n`;
    }
    
    return instrucciones;
}

// =====================================
// EXPORTACIONES DEL M√ìDULO
// =====================================

module.exports = {
    // Funci√≥n principal de consulta
    processQueryStream,
    
    // Funciones auxiliares
    analizarIntencionInteligente,
    construirPromptInteligente,
    construirInstruccionesNaturales,
    obtenerInfoUsuario,
    obtenerHistorialConversacion,
    executeQuery,
    saveMessageToFirestore,
    saveAssistantMessageToFirestore,
    generarEmbedding,
    
    // Sistema de gesti√≥n de errores
    performSystemMaintenance
};