// test-optimizacion-especifica.js
const ragInteligente = require('./admin/core/ragInteligente');

console.log('üß™ [TEST ESPEC√çFICO] === VERIFICANDO OPTIMIZACIONES ULTRA-GRANULARES ===\n');

async function testInformacionEspecifica() {
    const preguntas = [
        {
            consulta: "¬øQui√©n es Facundo y cu√°l es su rol en la empresa?",
            infoEsperada: ["ingeniero programador", "Deitana IA", "asistente", "evolucione"],
            peso: 25
        },
        {
            consulta: "¬øQu√© fertilizantes espec√≠ficos 15-10-31 y Ambra 48 utiliza la empresa?",
            infoEsperada: ["15-10-31", "Fosfato monopot√°sico", "Ambra 48", "Per√≥xido de hidr√≥geno"],
            peso: 25
        },
        {
            consulta: "¬øCu√°les son los pantanos A, B y C de la empresa?",
            infoEsperada: ["PANTANO A", "PANTANO B", "PANTANO C", "dep√≥sito", "agua"],
            peso: 25
        },
        {
            consulta: "¬øQui√©nes son Antonio Miras Moya y Marcia Padilla en Injertos Hacer?",
            infoEsperada: ["ANTONIO MIRAS MOYA", "MARCIA PADILLA", "encargado", "Injertos Hacer"],
            peso: 25
        }
    ];

    let totalExitosos = 0;
    let detallesResultados = [];

    console.log('üîç PROBANDO INFORMACI√ìN ESPEC√çFICA ULTRA-GRANULAR:\n');

    for (const pregunta of preguntas) {
        console.log(`üìã Pregunta: ${pregunta.consulta}`);
        
        try {
            const inicio = Date.now();
            const contexto = await ragInteligente.recuperarConocimientoRelevante(pregunta.consulta, 'test-especifico');
            const tiempo = Date.now() - inicio;
            
            let coincidencias = 0;
            let detallesCoincidencias = [];
            
            for (const termino of pregunta.infoEsperada) {
                if (contexto.toLowerCase().includes(termino.toLowerCase())) {
                    coincidencias++;
                    detallesCoincidencias.push(`‚úÖ ${termino}`);
                } else {
                    detallesCoincidencias.push(`‚ùå ${termino} - NO ENCONTRADO`);
                }
            }
            
            const porcentajeExito = (coincidencias / pregunta.infoEsperada.length) * 100;
            const exitoso = porcentajeExito >= 75; // 75% o m√°s de coincidencias
            
            if (exitoso) {
                totalExitosos++;
                console.log(`‚úÖ √âXITO (${porcentajeExito.toFixed(1)}% - ${coincidencias}/${pregunta.infoEsperada.length})`);
            } else {
                console.log(`‚ùå FALLO (${porcentajeExito.toFixed(1)}% - ${coincidencias}/${pregunta.infoEsperada.length})`);
            }
            
            detallesResultados.push({
                pregunta: pregunta.consulta,
                exitoso,
                porcentajeExito,
                coincidencias,
                total: pregunta.infoEsperada.length,
                tiempo,
                detallesCoincidencias,
                contexto: contexto.substring(0, 300) + '...'
            });
            
            console.log(`   Tiempo: ${tiempo}ms`);
            console.log(`   Contexto: ${contexto.length} caracteres`);
            console.log(`   Detalles: ${detallesCoincidencias.join(', ')}`);
            console.log('');
            
        } catch (error) {
            console.log(`‚ùå ERROR: ${error.message}`);
            detallesResultados.push({
                pregunta: pregunta.consulta,
                exitoso: false,
                error: error.message,
                tiempo: 0
            });
            console.log('');
        }
    }

    // Calcular estad√≠sticas finales
    const tasaExitoGeneral = (totalExitosos / preguntas.length) * 100;
    
    console.log('üìä === RESULTADOS FINALES DE OPTIMIZACI√ìN ESPEC√çFICA ===');
    console.log(`‚úÖ Preguntas exitosas: ${totalExitosos}/${preguntas.length}`);
    console.log(`üìà Tasa de √©xito: ${tasaExitoGeneral.toFixed(1)}%`);
    console.log('');

    // Analizar mejoras por categor√≠a
    console.log('üîç AN√ÅLISIS POR CATEGOR√çA:');
    
    for (let i = 0; i < detallesResultados.length; i++) {
        const resultado = detallesResultados[i];
        console.log(`\n${i+1}. ${resultado.pregunta}`);
        
        if (resultado.exitoso) {
            console.log(`   ‚úÖ MEJORADO: ${resultado.porcentajeExito.toFixed(1)}% de informaci√≥n espec√≠fica capturada`);
        } else {
            console.log(`   ‚ùå A√öN NECESITA OPTIMIZACI√ìN: ${resultado.porcentajeExito ? resultado.porcentajeExito.toFixed(1) : 0}%`);
            if (resultado.detallesCoincidencias) {
                console.log(`   üìù Detalles: ${resultado.detallesCoincidencias.filter(d => d.includes('NO ENCONTRADO')).join(', ')}`);
            }
        }
    }

    // Evaluaci√≥n de progreso
    console.log('\nüéØ EVALUACI√ìN DE PROGRESO:');
    
    if (tasaExitoGeneral >= 80) {
        console.log('üèÜ EXCELENTE: Las optimizaciones ultra-granulares funcionan perfectamente');
        console.log('   ‚úÖ Sistema captura informaci√≥n espec√≠fica eficazmente');
        console.log('   ‚úÖ Chunks cr√≠ticos funcionando correctamente');
    } else if (tasaExitoGeneral >= 60) {
        console.log('‚ö° BUENO: Mejoras significativas, pero a√∫n se puede optimizar');
        console.log('   ‚úÖ Progreso notable en captura espec√≠fica');
        console.log('   üîß Considerar ajustes adicionales en patrones cr√≠ticos');
    } else if (tasaExitoGeneral >= 40) {
        console.log('‚ö†Ô∏è PROGRESO MODERADO: Se requieren ajustes adicionales');
        console.log('   üîß Revisar patrones de chunks cr√≠ticos');
        console.log('   üîß Ajustar umbrales de similitud');
    } else {
        console.log('‚ùå REQUIERE TRABAJO ADICIONAL: Optimizaciones no son suficientes');
        console.log('   üîß Revisar completamente estrategia de fragmentaci√≥n');
        console.log('   üîß Considerar patrones de extracci√≥n m√°s espec√≠ficos');
    }

    return {
        tasaExito: tasaExitoGeneral,
        exitosos: totalExitosos,
        total: preguntas.length,
        detalles: detallesResultados
    };
}

// Ejecutar test
testInformacionEspecifica()
    .then(resultado => {
        console.log('\nüîö [TEST ESPEC√çFICO] Test de optimizaci√≥n espec√≠fica completado');
        process.exit(resultado.tasaExito >= 60 ? 0 : 1);
    })
    .catch(error => {
        console.error('‚ùå [TEST ESPEC√çFICO] Error en test:', error);
        process.exit(1);
    }); 