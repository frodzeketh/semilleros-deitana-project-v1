// =====================================
// TEST DE DIAGN√ìSTICO DE CONSULTAS ESPEC√çFICAS
// =====================================

const { processQuery } = require('./admin/core/openAI');
const pool = require('./db');

console.log('üî¨ [TEST] === DIAGN√ìSTICO DE CONSULTAS ESPEC√çFICAS ===');

// =====================================
// FUNCIONES DE TESTING
// =====================================

async function testConsultaSQL(consulta, descripcion) {
    console.log(`\nüß™ [TEST] ${descripcion}`);
    console.log(`üìù [CONSULTA] "${consulta}"`);
    console.log('‚è±Ô∏è [TIEMPO] Iniciando...');
    
    const tiempoInicio = Date.now();
    
    try {
        const resultado = await processQuery({
            message: consulta,
            userId: 'test-user-diagnostico'
        });
        
        const tiempoTotal = Date.now() - tiempoInicio;
        
        console.log(`‚è±Ô∏è [TIEMPO] Completado en ${tiempoTotal}ms`);
        console.log('üì§ [RESPUESTA]:', resultado.data?.message || resultado.response || 'Sin respuesta');
        console.log('‚úÖ [ESTADO]:', resultado.success ? '√âXITO' : 'FALLO');
        
        // An√°lisis de la respuesta
        const respuesta = resultado.data?.message || resultado.response || '';
        
        // Verificar si responde como bot gen√©rico
        const esBotGenerico = /semillero\./i.test(respuesta) && 
                             !/SELECT|FROM|WHERE/i.test(respuesta) &&
                             respuesta.length < 100;
        
        // Verificar si respeta la cantidad solicitada
        const pideNumero = consulta.match(/(\d+)\s+(almacenes?|tecnicos?|clientes?|articulos?|proveedores?)/i);
        const numeroSolicitado = pideNumero ? parseInt(pideNumero[1]) : null;
        
        console.log('üîç [AN√ÅLISIS]:');
        console.log('  - Es respuesta gen√©rica:', esBotGenerico ? '‚ùå S√ç' : '‚úÖ NO');
        if (numeroSolicitado) {
            console.log(`  - N√∫mero solicitado: ${numeroSolicitado}`);
            // Contar elementos en la respuesta (simplificado)
            const elementosEncontrados = (respuesta.match(/\n/g) || []).length;
            console.log(`  - Elementos en respuesta: ${elementosEncontrados}`);
            console.log(`  - Respeta cantidad: ${elementosEncontrados >= numeroSolicitado ? '‚úÖ S√ç' : '‚ùå NO'}`);
        }
        
        return {
            exito: resultado.success,
            respuesta: respuesta,
            tiempo: tiempoTotal,
            esBotGenerico: esBotGenerico,
            respetaCantidad: numeroSolicitado ? elementosEncontrados >= numeroSolicitado : true
        };
        
    } catch (error) {
        const tiempoTotal = Date.now() - tiempoInicio;
        console.log(`‚è±Ô∏è [TIEMPO] Error tras ${tiempoTotal}ms`);
        console.log('‚ùå [ERROR]:', error.message);
        return {
            exito: false,
            error: error.message,
            tiempo: tiempoTotal
        };
    }
}

async function testDirectoDB(consulta, descripcion) {
    console.log(`\nüîß [TEST-DB] ${descripcion}`);
    
    try {
        const [rows] = await pool.query(consulta);
        console.log(`üìä [RESULTADOS] ${rows.length} filas encontradas`);
        
        if (rows.length > 0) {
            console.log('üìã [MUESTRA] Primeras 3 filas:');
            rows.slice(0, 3).forEach((row, index) => {
                console.log(`  ${index + 1}. ${JSON.stringify(row)}`);
            });
        }
        
        return rows;
        
    } catch (error) {
        console.log('‚ùå [ERROR-DB]:', error.message);
        return null;
    }
}

// =====================================
// EJECUCI√ìN DE TESTS
// =====================================

async function ejecutarDiagnostico() {
    console.log('\nüéØ [INICIO] Comenzando diagn√≥stico de consultas problem√°ticas...\n');
    
    // =====================================
    // 1. TESTS DIRECTOS A BASE DE DATOS
    // =====================================
    
    console.log('üîß [FASE-1] TESTING DIRECTO A BASE DE DATOS');
    
    await testDirectoDB(
        'SELECT * FROM almacenes LIMIT 5',
        'Verificar tabla almacenes existe y tiene datos'
    );
    
    await testDirectoDB(
        'SELECT * FROM tecnicos LIMIT 5', 
        'Verificar tabla tecnicos existe y tiene datos'
    );
    
    // =====================================
    // 2. TESTS DE CONSULTAS ESPEC√çFICAS PROBLEM√ÅTICAS
    // =====================================
    
    console.log('\nüß™ [FASE-2] TESTING CONSULTAS ESPEC√çFICAS PROBLEM√ÅTICAS');
    
    const consultasProblematicas = [
        {
            consulta: "necesito que me digas 2 almacenes",
            descripcion: "Consulta de 2 almacenes (problema reportado)"
        },
        {
            consulta: "necesito que me digas 2 tecnicos", 
            descripcion: "Consulta de 2 t√©cnicos (problema reportado)"
        },
        {
            consulta: "dame 3 clientes",
            descripcion: "Consulta de 3 clientes (test de cantidad)"
        },
        {
            consulta: "muestra 5 articulos",
            descripcion: "Consulta de 5 art√≠culos (test de cantidad)"
        }
    ];
    
    const resultados = [];
    
    for (const test of consultasProblematicas) {
        const resultado = await testConsultaSQL(test.consulta, test.descripcion);
        resultados.push({
            consulta: test.consulta,
            resultado: resultado
        });
        
        // Pausa entre tests
        await new Promise(resolve => setTimeout(resolve, 2000));
    }
    
    // =====================================
    // 3. AN√ÅLISIS FINAL Y RECOMENDACIONES
    // =====================================
    
    console.log('\nüìä [RESUMEN] AN√ÅLISIS DE RESULTADOS');
    console.log('=====================================');
    
    let problemasEncontrados = [];
    let exitosos = 0;
    
    resultados.forEach((test, index) => {
        console.log(`\n${index + 1}. "${test.consulta}"`);
        
        if (test.resultado.exito) {
            exitosos++;
            console.log('   ‚úÖ Ejecutado correctamente');
            
            if (test.resultado.esBotGenerico) {
                console.log('   ‚ö†Ô∏è PROBLEMA: Respuesta gen√©rica de bot');
                problemasEncontrados.push('Respuestas gen√©ricas en lugar de usar BD');
            }
            
            if (!test.resultado.respetaCantidad) {
                console.log('   ‚ö†Ô∏è PROBLEMA: No respeta cantidad solicitada');
                problemasEncontrados.push('No respeta cantidades num√©ricas');
            }
            
        } else {
            console.log('   ‚ùå Error en ejecuci√≥n');
            problemasEncontrados.push('Errores de ejecuci√≥n');
        }
    });
    
    console.log(`\nüìà [ESTAD√çSTICAS]`);
    console.log(`- Tests exitosos: ${exitosos}/${resultados.length}`);
    console.log(`- Problemas √∫nicos encontrados: ${[...new Set(problemasEncontrados)].length}`);
    
    if (problemasEncontrados.length > 0) {
        console.log('\nüîß [PROBLEMAS IDENTIFICADOS]:');
        [...new Set(problemasEncontrados)].forEach((problema, index) => {
            console.log(`${index + 1}. ${problema}`);
        });
        
        console.log('\nüí° [RECOMENDACIONES]:');
        if (problemasEncontrados.includes('Respuestas gen√©ricas en lugar de usar BD')) {
            console.log('- Verificar que el sistema detecte correctamente consultas SQL');
            console.log('- Revisar la construcci√≥n del prompt para enfatizar uso de BD');
        }
        if (problemasEncontrados.includes('No respeta cantidades num√©ricas')) {
            console.log('- Modificar el prompt para respetar n√∫meros espec√≠ficos');
            console.log('- Incluir ejemplos de consultas con cantidades espec√≠ficas');
        }
    } else {
        console.log('\n‚úÖ [RESULTADO] No se detectaron problemas graves');
    }
    
    console.log('\nüèÅ [FIN] Diagn√≥stico completado');
}

// =====================================
// EJECUCI√ìN
// =====================================

if (require.main === module) {
    ejecutarDiagnostico()
        .then(() => {
            console.log('\n‚úÖ [SISTEMA] Diagn√≥stico finalizado exitosamente');
            process.exit(0);
        })
        .catch((error) => {
            console.error('\n‚ùå [SISTEMA] Error durante diagn√≥stico:', error);
            process.exit(1);
        });
}

module.exports = { testConsultaSQL, testDirectoDB, ejecutarDiagnostico }; 