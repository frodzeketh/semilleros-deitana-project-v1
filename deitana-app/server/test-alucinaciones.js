// =====================================
// TEST: AN√ÅLISIS DE ALUCINACIONES - 25 CONSULTAS VARIADAS
// =====================================

const { processQuery } = require('./admin/core/openAI');

async function testAlucinaciones() {
    console.log('üß™ [TEST] Iniciando an√°lisis de alucinaciones con 25 consultas variadas...');
    
    const testQueries = [
        // === CONSULTAS SOBRE PROCESOS Y PROCEDIMIENTOS ===
        {
            message: '¬øCu√°l es el proceso de entrada en c√°mara de germinaci√≥n?',
            category: 'procesos',
            expectedInfo: 'traslado en carros, registro en ERP, control autom√°tico, avisos PDA'
        },
        {
            message: '¬øC√≥mo funciona el protocolo cuando el cliente dice "quiero todo"?',
            category: 'protocolos',
            expectedInfo: 'c√°lculo obligatorio, 198 plantas por bandeja, 185 para injertos, gesti√≥n excedente'
        },
        {
            message: '¬øQu√© es el sistema de fichaje y organizaci√≥n por sectores?',
            category: 'organizaci√≥n',
            expectedInfo: '14 sectores, encargados con PDA, fichaje interno, asignaci√≥n de tareas'
        },
        {
            message: '¬øC√≥mo se gestiona el etiquetado de bandejas?',
            category: 'procesos',
            expectedInfo: 'etiqueta grande con c√≥digo de barras, etiquetas individuales, escaneado PDA'
        },
        {
            message: '¬øCu√°l es el proceso de facturaci√≥n?',
            category: 'financiero',
            expectedInfo: 'manual, despu√©s de entrega, verificaci√≥n albar√°n, conciliaci√≥n bancaria'
        },

        // === CONSULTAS SOBRE DATOS ESPEC√çFICOS ===
        {
            message: '¬øQu√© tipos de bandejas utilizan?',
            category: 'productos',
            expectedInfo: '52, 54, 104, 150, 198, 260, 322, 874, 589 para cebolla, 322 pl√°stico'
        },
        {
            message: '¬øCu√°les son los cultivos principales de Semilleros Deitana?',
            category: 'productos',
            expectedInfo: 'tomate, sand√≠a, pepino, mel√≥n, puerro, br√≥coli, lechuga, cebolla, apio'
        },
        {
            message: '¬øD√≥nde est√° ubicada la empresa?',
            category: 'empresa',
            expectedInfo: 'Totana, Murcia, Carretera de Mazarr√≥n km 2, 30850'
        },
        {
            message: '¬øCu√°ndo fue fundada la empresa?',
            category: 'empresa',
            expectedInfo: '1989'
        },
        {
            message: '¬øQu√© certificaci√≥n tiene la empresa?',
            category: 'empresa',
            expectedInfo: 'ISO 9001'
        },

        // === CONSULTAS SOBRE PERSONAS ===
        {
            message: '¬øQui√©nes son los due√±os de Semilleros Deitana?',
            category: 'personas',
            expectedInfo: 'hermanos Galera Carmona, Antonio Francisco y Jos√© Luis'
        },
        {
            message: '¬øQui√©n es Pedro Mu√±oz?',
            category: 'personas',
            expectedInfo: 'responsable de encargos, aplicaci√≥n de f√≥rmulas'
        },
        {
            message: '¬øCu√°ntos empleados tiene la empresa?',
            category: 'empresa',
            expectedInfo: 'entre 51 y 200 empleados (seg√∫n LinkedIn), 13 (seg√∫n RocketReach)'
        },

        // === CONSULTAS SOBRE SISTEMAS Y ERP ===
        {
            message: '¬øC√≥mo funciona el sistema ERP?',
            category: 'sistemas',
            expectedInfo: 'gesti√≥n de partidas, control autom√°tico, trazabilidad, m√≥dulos espec√≠ficos'
        },
        {
            message: '¬øQu√© m√≥dulos tiene el ERP?',
            category: 'sistemas',
            expectedInfo: 'Ventas, Compras, Archivos, Producci√≥n, Cobros, Partes y Tratamientos'
        },
        {
            message: '¬øC√≥mo se registran las partidas en el sistema?',
            category: 'sistemas',
            expectedInfo: 'Ventas - Otros - Partidas, n√∫mero √∫nico, datos completos'
        },

        // === CONSULTAS SOBRE PROVEEDORES Y CLIENTES ===
        {
            message: '¬øQui√©nes son los principales proveedores?',
            category: 'comercial',
            expectedInfo: 'Semillas Fit√≥, Sakata, SUMINISTROS AGRICOLAS S.A.'
        },
        {
            message: '¬øC√≥mo se gestionan los clientes?',
            category: 'comercial',
            expectedInfo: 'datos completos, tarifas, IBAN, seguimiento'
        },
        {
            message: '¬øQu√© formas de pago aceptan?',
            category: 'financiero',
            expectedInfo: 'transferencia, recibo, 30 d√≠as, anticipado, parcial'
        },

        // === CONSULTAS SOBRE INVERNADEROS Y C√ÅMARAS ===
        {
            message: '¬øC√≥mo funcionan los invernaderos?',
            category: 'infraestructura',
            expectedInfo: 'sectores, subsectores, ubicaciones, gesti√≥n por PDA'
        },
        {
            message: '¬øCu√°ntas c√°maras de germinaci√≥n tienen?',
            category: 'infraestructura',
            expectedInfo: 'no especificado en el archivo'
        },
        {
            message: '¬øQu√© condiciones mantienen en las c√°maras?',
            category: 'infraestructura',
            expectedInfo: 'humedad/temperatura √≥ptima, tiempo estimado, restricciones tratamientos'
        },

        // === CONSULTAS SOBRE PRODUCTOS FITOSANITARIOS ===
        {
            message: '¬øQu√© productos fitosanitarios utilizan?',
            category: 'productos',
            expectedInfo: 'fungicidas para tratamientos iniciales, archivos auxiliares'
        },
        {
            message: '¬øC√≥mo se aplican los tratamientos?',
            category: 'procesos',
            expectedInfo: 'aplicadores fitosanitarios, equipos, partes de tratamiento'
        },

        // === CONSULTAS SOBRE MAQUINARIA ===
        {
            message: '¬øQu√© maquinaria utilizan?',
            category: 'equipos',
            expectedInfo: 'sembradoras, equipos fitosanitarios, maquinaria espec√≠fica'
        },
        {
            message: '¬øC√≥mo funciona la sembradora?',
            category: 'equipos',
            expectedInfo: 'ajuste al tipo de semilla, bandeja y cultivo'
        },

        // === CONSULTAS SOBRE SUSTRATOS ===
        {
            message: '¬øQu√© sustratos utilizan?',
            category: 'productos',
            expectedInfo: 'sustratos espec√≠ficos, archivos auxiliares'
        }
    ];
    
    const resultados = [];
    
    for (let i = 0; i < testQueries.length; i++) {
        const testQuery = testQueries[i];
        console.log(`\nüìù [TEST ${i + 1}/${testQueries.length}] ${testQuery.category.toUpperCase()}`);
        console.log(`üìù [TEST ${i + 1}] Consulta: "${testQuery.message}"`);
        console.log(`üìù [TEST ${i + 1}] Informaci√≥n esperada: ${testQuery.expectedInfo}`);
        
        try {
            const resultado = await processQuery({
                message: testQuery.message,
                userId: `test-user-alucinaciones-${i}`
            });
            
            if (resultado.success) {
                const respuesta = resultado.data.message.toLowerCase();
                const longitud = resultado.data.message.length;
                
                // An√°lisis de alucinaciones
                const analisis = {
                    consulta: testQuery.message,
                    categoria: testQuery.category,
                    informacionEsperada: testQuery.expectedInfo,
                    respuesta: resultado.data.message.substring(0, 200) + '...',
                    longitud: longitud,
                    contieneInfoEsperada: false,
                    palabrasClaveEncontradas: [],
                    posibleAlucinacion: false,
                    razonesAlucinacion: []
                };
                
                // Verificar si contiene la informaci√≥n esperada
                const palabrasClave = testQuery.expectedInfo.toLowerCase().split(/[,\s]+/);
                const palabrasEncontradas = palabrasClave.filter(palabra => 
                    palabra.length > 2 && respuesta.includes(palabra)
                );
                
                analisis.palabrasClaveEncontradas = palabrasEncontradas;
                analisis.contieneInfoEsperada = palabrasEncontradas.length >= Math.ceil(palabrasClave.length * 0.3);
                
                // Detectar posibles alucinaciones
                const indicadoresAlucinacion = [
                    'generalmente', 't√≠picamente', 'normalmente', 'com√∫nmente',
                    'en la mayor√≠a de casos', 'por lo general', 'habitualmente',
                    'se suele', 'se acostumbra', 'es frecuente',
                    'plantones', 'desinfecci√≥n', 'tratamiento previo',
                    'configuraci√≥n de condiciones', 'monitoreo y ajustes',
                    'registro y control', 'trazabilidad', 'embalaje',
                    'env√≠os', 'env√≠o', 'manual de procedimientos para la selecci√≥n'
                ];
                
                const indicadoresEncontrados = indicadoresAlucinacion.filter(indicator => 
                    respuesta.includes(indicator)
                );
                
                if (indicadoresEncontrados.length > 0) {
                    analisis.posibleAlucinacion = true;
                    analisis.razonesAlucinacion = indicadoresEncontrados;
                }
                
                // Verificar si la respuesta es muy gen√©rica
                if (respuesta.includes('es un proceso') && !analisis.contieneInfoEsperada) {
                    analisis.posibleAlucinacion = true;
                    analisis.razonesAlucinacion.push('respuesta gen√©rica sin informaci√≥n espec√≠fica');
                }
                
                resultados.push(analisis);
                
                console.log(`‚úÖ [TEST ${i + 1}] Estado: √âXITO`);
                console.log(`üìä [TEST ${i + 1}] Longitud: ${longitud} caracteres`);
                console.log(`üîç [TEST ${i + 1}] Palabras clave encontradas: ${palabrasEncontradas.length}/${palabrasClave.length}`);
                console.log(`üéØ [TEST ${i + 1}] Contiene info esperada: ${analisis.contieneInfoEsperada ? '‚úÖ' : '‚ùå'}`);
                console.log(`‚ö†Ô∏è [TEST ${i + 1}] Posible alucinaci√≥n: ${analisis.posibleAlucinacion ? '‚ùå' : '‚úÖ'}`);
                
                if (analisis.posibleAlucinacion) {
                    console.log(`üö® [TEST ${i + 1}] Razones: ${analisis.razonesAlucinacion.join(', ')}`);
                }
                
            } else {
                console.log(`‚ùå [TEST ${i + 1}] El sistema fall√≥ al procesar la consulta`);
                resultados.push({
                    consulta: testQuery.message,
                    categoria: testQuery.category,
                    error: true
                });
            }
            
        } catch (error) {
            console.error(`‚ùå [TEST ${i + 1}] Error durante la prueba:`, error.message);
            resultados.push({
                consulta: testQuery.message,
                categoria: testQuery.category,
                error: true,
                errorMessage: error.message
            });
        }
        
        // Pausa entre pruebas
        await new Promise(resolve => setTimeout(resolve, 2000));
    }
    
    // An√°lisis final
    console.log('\nüìä [AN√ÅLISIS FINAL] Resumen de alucinaciones:');
    
    const exitosos = resultados.filter(r => !r.error);
    const alucinaciones = exitosos.filter(r => r.posibleAlucinacion);
    const conInfoEsperada = exitosos.filter(r => r.contieneInfoEsperada);
    
    console.log(`üìà Total consultas: ${resultados.length}`);
    console.log(`‚úÖ Exitosas: ${exitosos.length}`);
    console.log(`‚ùå Con posible alucinaci√≥n: ${alucinaciones.length}`);
    console.log(`üéØ Con informaci√≥n esperada: ${conInfoEsperada.length}`);
    
    console.log('\nüö® [ALUCINACIONES DETECTADAS]:');
    alucinaciones.forEach((r, i) => {
        console.log(`${i + 1}. ${r.categoria}: "${r.consulta}"`);
        console.log(`   Razones: ${r.razonesAlucinacion.join(', ')}`);
    });
    
    console.log('\n‚úÖ [CONSULTAS CORRECTAS]:');
    conInfoEsperada.forEach((r, i) => {
        console.log(`${i + 1}. ${r.categoria}: "${r.consulta}"`);
    });
    
    return resultados;
}

// Ejecutar la prueba
testAlucinaciones().then((resultados) => {
    console.log('\nüèÅ [TEST] An√°lisis de alucinaciones completado');
    process.exit(0);
}).catch(error => {
    console.error('üí• [TEST] Error fatal:', error);
    process.exit(1);
}); 