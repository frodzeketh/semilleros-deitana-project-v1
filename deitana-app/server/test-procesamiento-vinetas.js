// =====================================
// TEST: PROCESAMIENTO DE VI√ëETAS
// =====================================

const ragInteligente = require('./admin/core/ragInteligente');

// Contenido de prueba con vi√±etas
const contenidoConVi√±etas = `
SECCI√ìN: TAREAS Y PROCESOS
DESCRIPCI√ìN GENERAL: Las tareas y procesos de Semilleros Deitana incluyen una amplia gama de actividades relacionadas con la producci√≥n de plantas hort√≠colas.

TAREAS PRINCIPALES:
‚Ä¢ H. CARRETILLERO INJERTOS (259)
‚Ä¢ MOVER BANDEJAS INJERTOS (260)
‚Ä¢ SACUDIR BANDEJAS INJERTOS (261)
‚Ä¢ Z-CARGAR PARA INJERTAR (65)
‚Ä¢ Z-DEVOLVER PLANTA SOBRANTE (66)
‚Ä¢ Z-ENTERRAR (63)
‚Ä¢ Z-ENTERRAR PUA (300)
‚Ä¢ Z-HORAS FORMACION INJERTOS (276)
‚Ä¢ Z-INJERTAR PEPINO (237)
‚Ä¢ Z-INJERTAR SANDIA (62)
‚Ä¢ Z-INJERTAR SANDIA PUA (299)
‚Ä¢ Z-INJERTAR TOMATE(104) (179)
‚Ä¢ Z-LIMPIAR ALMACEN DE INJERTOS (183)
‚Ä¢ Z-MOVER INJERTOS EN CAMARA (67)
‚Ä¢ Z-PREP.BAND.PARA INJERTOS (185)
‚Ä¢ Z-REPICAR EN ALMACEN INJ. (64)

TAREAS DE SIEMBRA:
- CAMBIAR FUNDAS (221)
- CAMBIAR MAQUINA (91)
- H.SIEMBRA (8)
- LIMPIAR MAQUINA (94)
- PONER ETIQUETAS (37)
- SEMBRAR EN 104 ALV (48)
- SEMBRAR EN 150 ALV (49)
- SEMBRAR EN 198 ALV (50)
- SEMBRAR EN 260 ALV (51)
- SEMBRAR EN 322 ALV (52)
- SEMBRAR EN 54 ALV (47)
- SEMBRAR EN 589 ALV (280)
- SEMBRAR EN 874 ALV (53)

TAREAS DE RIEGO:
* APRENDIZAJE RIEGOS (282)
* GUARDIA DE RIEGO (226)
* H.ENCARGADO RIEGO (239)
* H.RIEGO (18)
* SUPERVISION TECNICOS (ALP)

TARIFAS DE PRECIOS:
1. Tarifa A: Clientes grandes con vol√∫menes muy altos de plantas al a√±o
2. Tarifa B: Clientes medianos con precios intermedios
3. Tarifa C: Clientes peque√±os o de baja frecuencia
4. Tarifa D: Casos especiales
5. Tarifa G: Exclusiva para planta producida internamente

PROCESO DE PRODUCCI√ìN:
a) El cliente solicita plantas espec√≠ficas
b) Se verifica disponibilidad en la c√°mara de semillas
c) Se programa la siembra con fechas espec√≠ficas
d) Se genera etiqueta con c√≥digo de barras
e) Se traslada al invernadero asignado
f) Se registra ubicaci√≥n real en el sistema
g) Se programa riegos y tratamientos
h) Se notifica al cliente cuando est√° listo
`;

async function testProcesamientoVi√±etas() {
    console.log('üß™ [TEST] === INICIANDO TEST DE PROCESAMIENTO DE VI√ëETAS ===');
    
    try {
        // Procesar el contenido con vi√±etas
        const chunks = ragInteligente.crearChunksInteligentes(contenidoConVi√±etas, {
            fuente: 'test-vi√±etas',
            tipo: 'procesos'
        });
        
        console.log(`\nüìä [TEST] Resultados del procesamiento:`);
        console.log(`‚Ä¢ Total de chunks creados: ${chunks.length}`);
        
        chunks.forEach((chunk, index) => {
            console.log(`\n--- CHUNK ${index + 1} ---`);
            console.log(`T√≠tulo: ${chunk.titulo}`);
            console.log(`Longitud: ${chunk.contenido.length} caracteres`);
            console.log(`Tipo: ${chunk.metadatos.tipo}`);
            console.log(`Palabras clave: ${chunk.metadatos.palabrasClave.join(', ')}`);
            
            // Verificar si las vi√±etas se procesaron correctamente
            const tieneVi√±etas = /‚Ä¢ |\* |\- |\d+\. |[a-zA-Z]\)/.test(chunk.contenido);
            console.log(`Contiene vi√±etas: ${tieneVi√±etas ? 'S√ç' : 'NO'}`);
            
            // Mostrar primeras l√≠neas del contenido
            const primerasLineas = chunk.contenido.split('\n').slice(0, 5).join('\n');
            console.log(`Primeras l√≠neas:\n${primerasLineas}${chunk.contenido.split('\n').length > 5 ? '...' : ''}`);
        });
        
        // Verificar que las listas se mantuvieron juntas
        const chunksConListas = chunks.filter(chunk => 
            chunk.contenido.includes('LISTA DE ELEMENTOS:') ||
            (chunk.contenido.match(/‚Ä¢ /g) || []).length > 5
        );
        
        console.log(`\n‚úÖ [TEST] Chunks con listas preservadas: ${chunksConListas.length}`);
        
        if (chunksConListas.length > 0) {
            console.log('‚úÖ [TEST] El procesamiento de vi√±etas funciona correctamente');
        } else {
            console.log('‚ö†Ô∏è [TEST] No se detectaron listas preservadas');
        }
        
    } catch (error) {
        console.error('‚ùå [TEST] Error en el test:', error);
    }
}

// Ejecutar el test
testProcesamientoVi√±etas(); 