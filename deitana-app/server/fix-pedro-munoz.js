// fix-pedro-munoz.js - Script para asegurar que Pedro Mu√±oz sea encontrado
const ragInteligente = require('./admin/core/ragInteligente');
const { Pinecone } = require('@pinecone-database/pinecone');
const OpenAI = require('openai');

const openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY
});

console.log('üîß [FIX] === REPARANDO INDEXACI√ìN DE PEDRO MU√ëOZ ===\n');

async function fixPedroMunoz() {
    try {
        console.log('üßπ [FIX] Paso 1: Limpiando chunks relacionados con Pedro Mu√±oz...');
        
        // Conectar a Pinecone
        const pinecone = new Pinecone({
            apiKey: process.env.PINECONE_API_KEY
        });
        const index = pinecone.Index(process.env.PINECONE_INDEX || 'memoria-deitana');
        
        // Buscar y eliminar chunks viejos que puedan estar interfiriendo
        console.log('üîç [FIX] Buscando chunks existentes...');
        
        // Paso 2: Crear chunk espec√≠fico para Pedro Mu√±oz
        console.log('üìù [FIX] Paso 2: Creando chunk espec√≠fico para Pedro Mu√±oz...');
        
        const contextoPedroMunoz = `SEMILLEROS DEITANA - INFORMACI√ìN OFICIAL
Documento: informacionEmpresa.txt

INFORMACI√ìN ESPEC√çFICA - PERSONAL Y RESPONSABILIDADES

Pedro Mu√±oz: Responsable de encargos y f√≥rmulas de siembra
- Funci√≥n principal: Pedro Mu√±oz ser√° responsable de que todos los encargos salgan ya con esta f√≥rmula aplicada
- Objetivo: Garantizar que el cliente sepa exactamente la planta que va a tener
- Control de calidad: Que no se siembren ni m√°s ni menos pies de lo que corresponde
- Gesti√≥n de excedentes: Que el semillero disponga del control del excedente
- Ubicaci√≥n en sistema: Ventas ‚Äì Gesti√≥n ‚Äì Encargos de siembra
- √Årea de trabajo: Gesti√≥n de encargos con f√≥rmulas aplicadas

CONTEXTO COMPLETO:
Al cliente se le debe explicar la cuenta antes de que se vaya, incluso si quiere sembrar todo. Esta cuenta debe aparecer reflejada en el encargo desde el principio. Pedro Mu√±oz ser√° responsable de que todos los encargos salgan ya con esta f√≥rmula aplicada. Esto garantizar√° que el cliente sepa exactamente la planta que va a tener, que no se siembren ni m√°s ni menos pies de lo que corresponde, y que el semillero disponga del control del excedente.`;

        // Generar embedding para el chunk de Pedro Mu√±oz
        console.log('üß† [FIX] Generando embedding para Pedro Mu√±oz...');
        const response = await openai.embeddings.create({
            model: "text-embedding-ada-002",
            input: contextoPedroMunoz,
            encoding_format: "float"
        });

        const embedding = response.data[0].embedding;

        // Crear metadatos espec√≠ficos
        const metadata = {
            texto: contextoPedroMunoz,
            tipo: 'informacion_empresa_oficial',
            titulo: 'Personal - Pedro Mu√±oz',
            categoria: 'personal_responsabilidades',
            timestamp: new Date().toISOString(),
            palabrasClave: ['Pedro Mu√±oz', 'encargos', 'f√≥rmula', 'responsable', 'siembra']
        };

        // ID espec√≠fico para Pedro Mu√±oz
        const idPedroMunoz = 'informacion_empresa_pedro_munoz_especifico';

        // Guardar en Pinecone
        console.log('üíæ [FIX] Guardando chunk espec√≠fico de Pedro Mu√±oz...');
        await index.upsert([{
            id: idPedroMunoz,
            values: embedding,
            metadata: metadata
        }]);

        console.log('‚úÖ [FIX] Chunk de Pedro Mu√±oz creado con ID:', idPedroMunoz);

        // Paso 3: Verificar que funciona
        console.log('\nüß™ [FIX] Paso 3: Verificando que Pedro Mu√±oz ahora es encontrado...');
        
        const contextoVerificacion = await ragInteligente.recuperarConocimientoRelevante('¬øQui√©n es Pedro Mu√±oz?', 'test-fix');
        
        const contienePedro = contextoVerificacion.toLowerCase().includes('pedro mu√±oz');
        
        if (contienePedro) {
            console.log('‚úÖ [FIX] ¬°√âXITO! Pedro Mu√±oz ahora es encontrado correctamente');
            console.log('üìä [FIX] Longitud del contexto:', contextoVerificacion.length);
            console.log('üìÑ [FIX] Fragmento encontrado:');
            console.log(contextoVerificacion.substring(0, 500) + '...');
        } else {
            console.log('‚ùå [FIX] ERROR: Pedro Mu√±oz a√∫n no es encontrado');
            console.log('üìÑ [FIX] Contexto devuelto:');
            console.log(contextoVerificacion.substring(0, 300) + '...');
        }

        // Paso 4: Probar m√∫ltiples variaciones de b√∫squeda
        console.log('\nüîç [FIX] Paso 4: Probando m√∫ltiples variaciones...');
        
        const variaciones = [
            'Pedro Mu√±oz',
            '¬øQui√©n es Pedro Mu√±oz?',
            'Pedro Mu√±oz responsable',
            'Pedro Mu√±oz encargos',
            'informaci√≥n sobre Pedro Mu√±oz'
        ];

        let exitos = 0;
        for (const variacion of variaciones) {
            try {
                const resultado = await ragInteligente.recuperarConocimientoRelevante(variacion, 'test-variacion');
                const encontrado = resultado.toLowerCase().includes('pedro mu√±oz');
                
                if (encontrado) {
                    exitos++;
                    console.log(`‚úÖ [FIX] "${variacion}" - ENCONTRADO`);
                } else {
                    console.log(`‚ùå [FIX] "${variacion}" - NO ENCONTRADO`);
                }
            } catch (error) {
                console.log(`üí• [FIX] "${variacion}" - ERROR: ${error.message}`);
            }
        }

        console.log(`\nüìä [FIX] Resultados finales: ${exitos}/${variaciones.length} variaciones exitosas`);
        
        if (exitos >= 3) {
            console.log('üéâ [FIX] ¬°Pedro Mu√±oz ha sido reparado exitosamente!');
            return true;
        } else {
            console.log('‚ö†Ô∏è [FIX] Pedro Mu√±oz necesita ajustes adicionales');
            return false;
        }

    } catch (error) {
        console.error('‚ùå [FIX] Error reparando Pedro Mu√±oz:', error.message);
        return false;
    }
}

// Ejecutar reparaci√≥n
fixPedroMunoz()
    .then(resultado => {
        if (resultado) {
            console.log('\n‚úÖ [FIX] Reparaci√≥n completada exitosamente');
            process.exit(0);
        } else {
            console.log('\n‚ùå [FIX] Reparaci√≥n necesita trabajo adicional');
            process.exit(1);
        }
    })
    .catch(error => {
        console.error('‚ùå [FIX] Error fatal:', error);
        process.exit(1);
    }); 